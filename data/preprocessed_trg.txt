PHP manual
Previous
Attachment to.
About this manual
Next
This manual is written in XML using the DocBook XML DTD, Document Style and Semantics Specification Language (DSSSL) for formatting, and Experimental Extensible Stylesheet Language Transformations (XSLT) for maintenance and formatting.
Using XML as the source format gives us the ability to generate many output formats from source files and maintain only one source document for all formats.
The tools used to format the HTML and TeX versions are Jade by James Clark and The Modular DocBook Stylesheets by Norman Walsh.
We use the Microsoft HTML Help Workshop to generate the Windows HTML Help format and, of course, PHP itself for additional conversions and formatting.
You can download the manual in a variety of languages ​​and formats, including plain text, plain HTML, PDF, PalmPilot DOC, PalmPilot iSilo, and Windows HTML Help, from http://www.php.net/docs.php.
The manuals are automatically updated if their text changes.
For more information on downloading the documentation source code in XML, see http://cvs.php.net/.
The documentation is stored in the phpdoc module.
Home
How to help improve documentation
Up
What is missing here
There are two ways you can help improve this documentation.
If you find errors in the manual (in any language), please report them to the bug system at http://bugs.php.net/.
Classify the error as a "Documentation Problem".
You can also submit issues related to specific manual formats here.
Note:
Please do not abuse the bug system by sending help requests.
Use a discussion forum or community site instead, as mentioned above.
You can provide additional examples and explanations for other readers when adding notes.
However, please do not send error reports using this annotation system.
You can learn more about annotations in the 'About User Notes' section of this appendix.
How to find more information about PHP
How we generate formats
This PHP manual is provided in various formats.
These formats can be divided into two groups: formats for online viewing and download packages.
Some publishers have published printed versions of this manual. We do not recommend any of them, because they become obsolete very quickly.
To ensure the fastest access, you should choose the mirror closest to you.
You can view the manual in "plain" HTML format (printable) or in an HTML format that integrates the manual into the look and feel of the PHP pages themselves.
The advantage of the online manual over off-line formats is the integration of user notes.
The obvious disadvantage is that you have to be online when browsing.
There are several offline manual formats, and the format that works best for you depends on what operating system you are using and your personal reading style.
For information on how the manual is generated in so many formats, read the 'How we generate formats' section in the appendices.
The manual in HTML and plain text is suitable for most platforms.
The HTML format is provided both as a single HTML file and as a package of files according to individual sections (which in the end means a collection of thousands of files).
HTML and plain text are provided as tar files compressed with bzip2.
Another popular platform-independent format, as well as the most suitable format for printing, is PDF (also known as Adobe Acrobat).
The manual is almost 2000 pages long and is still being edited!
Palm document and iSilo formats are ideal for handheld owners (Palm compatible).
You can bring your handheld in a shift and use a DOC or iSilo browser to brush up on your PHP knowledge or as a quick guide.
For the Windows platform, there is a version of Widows HTML Help for use with Windows HTML Help - This version provides full-text search, a full index, and bookmarks.
If you are interested in the state of development, check out the SourceForge.net page.
About user notes
This manual does not attempt to provide instructions on general programming techniques.
If you are a completely new programmer or still a beginner, you may find it difficult to learn to program in PHP only according to this manual.
You may want to look for more beginner-oriented lyrics.
Here is a list of books related to PHP: http://www.php.net/books.php.
There are many active e-mail newsgroups to discuss all aspects of PHP programming.
If you have a problem that you can find a solution to, one of these groups could help.
You can find a list of newsgroups at http://www.php.net/support.php, as well as links to the archives of these newsgroups and other online resources.
Further, at http://www.php.net/links.php there is a list of sites dedicated to articles, forums and code galleries for PHP.
User notes play an important role in the development of this manual.
By allowing readers of the manual to add examples and other explanations directly from their browser, we are able to incorporate feedback into the main text of the manual.
And before the notes are processed, they are visible in the form in which users sent them, in online (and some offline) formats.
User notes are not moderated before they are displayed online, so the quality of the text or code examples and their credibility cannot be guaranteed (not that the quality or accuracy of the manual itself is guaranteed).
This is a list of aliases.
All aliases are listed here.
It is usually a bad idea to use aliases, they may be associated with an obsolete or renamed function, leading to a non-portable script.
This list is provided to help those who want to upgrade their old scripts to the new syntax.
Some functions may have two names and none is preferred (eg is_int () and is_integer () are equivalent)
This list is consistent with PHP 4.0.6.
Table F-1.
Aliases
Basic functions
Extension used
Other features
Basic syntax
Filesystem
Strings with multibyte characters
msql_affected_rows
msql_affected_rows ()
orbit_caught_exception
satellite_caught_exception ()
Satellite
orbit_exception_id
satellite_exception_id ()
orbit_exception_value
satellite_exception_value ()
orbit_get_repository_id
satellite_get_repository_id ()
orbit_load_idl
satellite_load_idl ()
swfbutton_keypress
swfbutton_keypress ()
xpath_eval
xpath_eval ()
xpath_eval_expression
xpath_eval_expression ()
xpath_init ()
xpath_new_context
List of reserved words
Other issues
History of PHP and related projects
Annex E.
Example 1.
Example 2.
COM support features in Windows
(PHP 3, PHP 4)
Pseudo-object-oriented directory reading mechanism.
Opens the specified directory.
Two properties are accessible when the directory is opened.
The handle property is usable with other directory functions such as readdir (), rewinddir (), and closedir ().
There are also three methods available: read, rewind and close.
Example 1. dir () example
$ d = dir ("/ etc"); echo "Handle:". $ d - handle. "br \ n"; echo "Path:". $ d - path. "br \ n"; while ($ entry = $ d - read ()) {echo $ entry. "br \ n";} $ d - close ();
Chapter 4.
Example 4-2.
Table 4-1.
Table 4-2.
Table 4-3.
Table 4-4.
Table 4-5.
Note:
Table 4-6.
Example 4-3.
Example 4-4.
Table 4-7.
Table 4-8.
Previous
Home
Next
Example 4-1. php.ini example
Chapter 12. Management structures
PHP offers alternative syntax for some of the control structures, namely if, while, for, foreach, and switch.
In each of these cases, the basic format of the alternative syntax is to replace the opening parentheses with a colon (:) and the closing parentheses with endif ;, endwhile ;, endfor ;, endforeach ;, resp. endswitch ;.
And it equals 5? Php endif ;?
In the example above, the HTML block is nested in an if construct written in an alternative syntax.
This HTML block would only be displayed if $ a is equal to 5.
Alternative syntax can also be used for else and elseif.
The following example shows the structure of if, elseif, and else in an alternative format:
if ($ a == 5): print "a equals 5"; print "..."; elseif ($ a == 6): print "a equals 6"; print "!!!"; else: print "and neither 5 nor 6"; endif;
For more examples, see also while, for, and if.
break terminates the execution of the current for, foreach while, do..while, or switch construct.
break accepts an optional numeric argument that says how many nested structures to jump from.
$ arr = array ('one', 'two', 'three', 'four', 'stop', 'five'); while (list (, $ val) = each ($ arr)) {if ($ val == 'stop') {break; / * You could also type 'break 1;' here. * /} echo "$ val br \ n";} / * Use optional argument. * / $ i = 0; while (++ $ i) {switch ($ i) {case 5: echo "At 5 br \ n"; break 1; / * Terminates the switch only. * / case 10: echo "At 10; end br \ n"; break 2; / * Terminates the switch and while. * / default: break;}}
continue is used within loops to skip the rest of the current iteration and jump to the next iteration immediately.
continue accepts an optional numeric argument that tells you how many levels of loops to complete at one time.
while (list ($ key, $ value) = each ($ arr)) {if (! ($ key% 2)) {// skip even members continue;} do_something_odd ($ value);} $ i = 0; while ($ i + + lt; 5) {echo "Outer br \ n"; while (1) {echo "nbsp; nbsp; Medium br \ n"; while (1) {echo "nbsp; nbsp; Internal br \ n"; continue 3;} echo "This will never be printed. br \ n";} echo "This is not done either. br \ n";}
The declare construct is used to set execution directives for a block of code.
The syntax of declare is similar to the syntax of other flow control constructs:
The directive part allows you to set the behavior of the block to be affected by the declare.
Currently, only one directive is recognized: ticks. (For more information, see below - ticks directive)
The statement part of the declare block will be executed - how it will be executed and what side effects will occur during execution may depend on the directive set in the directive block.
Tick ​​is an event that occurs for every N low-level constructs executed by the parser within the declare block.
The value of N is specified by ticks = N inside the directive section of the declare block.
Event (s) that occur on each tick is specified using register_tick_function ().
See the example below for more details.
Be aware that more than one event can occur per tick.
Example 12-1.
pre? php // A function that records the time when it is called function profile ($ dump = FALSE) {static $ profile; // Return the times stored in profile, then erase it if ($ dump) {$ temp = $ profile; unset ($ profile); return ($ temp);} $ profile [] = microtime ();} // Set up a tick handler register_tick_function ("profile"); // Initialize the function before the declare block profile (); // Run a block of code, throw a tick every 2nd statement declare (ticks = 2) {for ($ x = 1; $ x 50; ++ $ x) {echo similar_text (md5 ($ x), md5 ($ x * $ x)), "lt; br gt;";}} // Display the data stored in the profiler print_r (profile (TRUE)) ;? / pre
The do..while loops are very similar to while loops except that the truth of the expression is tested at the end of each iteration instead of its beginning.
The main difference compared to regular while loops is that the first iteration of the do..while loop is always executed (truth expression is tested only at the end of the iteration), which is not guaranteed for the while loop (truth expression is tested at the beginning of the iteration; if it is evaluated as FALSE, the execution of the cycle ends immediately).
This is the only syntax for do..while loops:
The above cycle would be executed just once, because after the first iteration, when the truth expression is tested, it is evaluated as FALSE ($ i is not greater than 0) and the execution of the cycle ends.
The code is enclosed in do..while (0) and the break statement is used.
This allows you to interrupt the execution of the cycle in the middle of the code, as shown in this example:
to {if ($ i 5) {print "i not big enough"; break;} $ i * = $ factor; if ($ i $ minimum_limit) {break;} print "i is ok"; ... process i ...} while (0);
Don't do anything that you don't understand right away.
You can write scripts, even very effective scripts, even without using this 'feint'.
You may also often want to do something if a condition is met and something else if it is not.
This is made possible by the else construct. else extends the if construct by executing code if the expression in the if construct evaluates to FALSE.
For example, the following code prints a is greater than b if $ a is greater than $ b and a is NOT greater than b in other cases:
if ($ a $ b) {print "a is greater than b";} else {print "a is NOT greater than b";}
Management structures
As the name suggests, elseif is a combination of if and else.
Like elsewhere, it extends the if construct to execute different constructs if the expression of the original if construct evaluates to FALSE.
Thus, unlike else, it is executed only if the expression in the elseif condition evaluates to TRUE.
For example, the following code prints a is greater than b, and is equal to b, or a is less than b:
if ($ a $ b) {print "a is greater than b";} elseif ($ a == $ b) {print "a is equal to b";} else {print "a is less than b";}
There can be multiple elseif constructs within a single if construct.
The first elseif construct (if any) whose expression evaluates to TRUE is executed.
In PHP you can write 'else if' (two words), the behavior will be exactly the same as 'elseif' (one word).
The syntactic meaning is slightly different (if you know C, it's the same), but as a result we get exactly the same behavior.
The elseif construct is executed only if the relevant (immediately preceding) expression of the if construct and the expressions of all relevant previous elseif constructs are evaluated as FALSE, and the specific expression in elseif is evaluated as TRUE.
Alternative syntax of control structures
PHP 4 (not PHP 3) includes a foreach construct, similar to Perl and various other languages.
There are two syntaxes; the second is a smaller but useful extension of the first:
The first form traverses the array given by array_expression.
In each iteration, the value of the current element is assigned to $ value and the internal pointer to the field is incremented by one (ie in the next iteration you will look at the next element).
The second form does the same, except that the element's current key will be assigned to the $ key variable in each iteration.
When foreach When foreach begins performing the first iteration, the inner pointer is automatically set to the first element of the array.
This means you don't have to call reset () before foreach.
Also note that foreach works on a copy of the specified array, not the array itself, so the pointer to the array is not modified like the each () construct, and changes to the returned element do not affect the original array.
You may notice that the following examples are functionally identical:
reset ($ arr); while (list (, $ value) = each ($ arr)) {echo "Value: $ value br \ n";} foreach ($ arr as $ value) {echo "Value: $ value br \ n";}
reset ($ arr); while (list ($ key, $ value) = each ($ arr)) {echo "Key: $ key; Value: $ value br \ n";} foreach ($ arr as $ key = $ value) {echo "Key : $ key; Value: $ value br \ n ";}
Other examples demonstrating use:
/ * foreach example 1: only value * / $ a = array (1, 2, 3, 17); foreach ($ a as $ v) {print "Present value \ $ a: $ v. \ n";} / * foreach example 2: value (key is also shown for illustration) * / $ a = array (1, 2 , 3, 17); $ i = 0; / * for illustrative purposes only * / foreach ($ a as $ v) {print "\ $ a [$ i] = $ v. \ n"; $ i ++;} / * foreach example 3: key and value * / $ a = array ("one" = 1, "two" = 2, "three" = 3, "seventeen" = 17); foreach ($ a as $ k = $ v) {print "\ $ a [$ k] = $ v. \ n";} / * foreach example 4: multidimensional arrays * / $ a [0] [0] = " and"; $ a [0] [1] = "b"; $ a [1] [0] = "y"; $ a [1] [1] = "z"; foreach ($ a as $ v1) {foreach ($ v1 as $ v2) {print "$ v2 \ n";}} / * foreach example 5: dynamic arrays * / foreach (array (1, 2, 3, 4, 5) as $ v) {print "$ v \ n"
For loops are the most complex loops in PHP.
They behave the same as their familymen in C.
The syntax of the for loop is as follows:
The first expression (expr1) is evaluated (executed) once, unconditionally, at the beginning of the cycle.
The expression expr2 is evaluated at the beginning of each iteration.
If TRUE, the cycle continues and the code within the cycle is processed.
Conversely, if its value is FALSE, cycle execution ends.
At the end of each iteration, the expression expr3 is evaluated (executed).
An empty expression expr2 means that the cycle will run indefinitely (PHP, like C, implicitly assumes TRUE).
It may not be as useless as you might think. This is because you can often want to end a loop with a conditional break statement, instead of using a truth expression in the for loop construct.
Consider the following examples.
All show numbers from 1 to 10:
/ * example 1 * / for ($ i = 1; $ i = 10; $ i ++) {print $ i;} / * example 2 * / for ($ i = 1 ;; $ i ++) {if ($ i 10 ) {break;} print $ i;} / * example 3 * / $ i = 1; for (;;) {if ($ i 10) {break;} print $ i; $ i ++;} / * example 4 * / for ($ i = 1; $ i = 10; print $ i, $ i ++);
Of course, the first example looks best (or maybe the fourth), but you may find that the ability to use empty expressions in for loops may not always be completely discarded.
PHP also supports an alternative "colon syntax" for for loops.
Other languages ​​have a foreach construct for traversing fields or hashes.
There is no such thing in PHP 3, PHP 4 is (see foreach).
In PHP 3, you can combine while with the list () and each () functions to achieve the same effect.
See the documentation for examples.
Any PHP script consists of a series of constructs.
A construct can be an assignment, a function call, a cycle, a condition, as well as a construct that does nothing (an empty construct).
The construct usually ends with a semicolon.
In addition, constructs can be grouped into a group (block) enclosed in curly braces.
This block is a construct in itself.
This chapter describes the different types of constructs.
The if construct is one of the most important elements in many languages, including PHP.
Allows conditional execution of a piece of code.
The structure of if in PHP is similar to the structure in C:
As described in the section on expressions, the expression expr is evaluated by its Boolean value.
If expr evaluates to TRUE, PHP executes the statement; if rated FALSE, nothing is done.
See 'Boolean Conversion' for more information on how expressions evaluate to FALSE.
The following example would list a is greater than b if $ a is greater than $ b:
if ($ a $ b) print "a is greater than b";
You would often want more than one construct to be conditional.
Of course, it is not necessary to wrap each construct in an if structure.
Instead, you can group multiple constructs into a block.
For example, this code would display a is greater than b if $ a is greater than $ b and would assign the value $ a to $ b:
if ($ a $ b) {print "a is greater than b"; $ b = $ a;}
The if constructs can be arbitrarily nested within other if constructs, which provides full flexibility in the conditional execution of different parts of the program.
String operators
The switch construct is similar to a series of IF constructs testing the same expression.
In many cases, you may want to compare the same variable (or expression) with many different values ​​and execute different pieces of code depending on which value it equals.
This is exactly what a switch is for.
The following two examples present two different ways to write the same thing; one uses a series of if conditions, while the other is based on the switch construct:
if ($ i == 0) {print "i equals 0";} if ($ i == 1) {print "i equals 1";} if ($ i == 2) {print "i equals 2 ";} switch ($ i) {case 0: print" i equals 0 "; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break;}
It is important to understand how the switch construct is implemented to avoid errors.
The switch construct executes line by line (or construct by construct).
No code is executed at the beginning.
Only when a case with a value matching the value of the switch expression is found will PHP start executing the following constructs.
Code execution continues until the end of the switch block or the first break statement is reached.
If you do not write a break statement at the end of the block after the time, PHP will continue to execute other constructs (after the next time).
For example:
switch ($ i) {case 0: print "i equals 0"; case 1: print "i equals 1"; case 2: print "i equals 2";}
Here, if $ i equals 0, all "print" commands will be executed!
If $ i equals 1, PHP executes the last two commands, and only if $ i equals 2, you receive the "expected" behavior and only "i equals 2" is displayed.
So it's important not to forget the break command (unless you want to skip it intentionally to achieve a certain goal).
In the switch construct, the condition is tested only once and the result is compared with each value in time.
In the case of elseif, the condition is retested each time.
If your condition is more complicated than a simple comparison and / or is within a cycle, the switch may be faster.
The list of constructs per case can also be empty, which simply passes control to the next case.
switch ($ i) {case 0: case 1: case 2: print "i is less than 3 but non-negative"; break; case 3: print "i is 3";}
The special case is "default".
It conforms to all other values ​​that are not covered by any of the other cases and should always be last.
switch ($ i) {case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break; default: print "i does not equal 0, 1 or 2";}
An expression in time can be any expression whose value is of a simple type, ie an integer or a real number or string.
Neither fields nor objects can be used unless they refer to a simple type.
Alternative syntax for switch constructs is supported.
For more information, see Alternative Syntax of Control Structures.
switch ($ i): case 0: print "i equals 0"; break; case 1: print "i equals 1"; break; case 2: print "i equals 2"; break; default: print "i is not equal to 0, 1 or 2"; endswitch;
While loops are the simplest type of loop in PHP.
They act like their C counterparts.
The basic format of the while construct is this:
The meaning of the while construct is easy to understand. Tells PHP to execute nested construct (s) as long as the while expression is TRUE.
The value of the expression is tested each time at the beginning of the cycle (in each iteration), so even if this value changes during the execution of nested constructs, the rest of the code within the cycle is executed - in a specific iteration - until the end (each code execution within the cycle is one iteration) .
Sometimes, when a while statement evaluates to FALSE when it enters a loop, the nested code does not execute at all.
As with if, you can group constructs within a while loop by enclosing this code in curly braces or using alternative syntax:
The following examples are identical, both listing numbers from 1 to 10:
/ * example 1 * / $ i = 1; while ($ i = 10) {print $ i ++; / * printed value would be $ i before increment (post-increment) * /} / * example 2 * / $ i = 1; while ($ i = 10): print $ i; $ i ++; endwhile;
This manual is © Copyright 1997, 1998, 1999, 2000, 2001, 2002 PHP Documentation Group.
The list of members of this group is on the title page of this manual.
This manual may be redistributed under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
The section of this manual "PHP 4.0 Extensions" is © 2000 Zend Technologies, Ltd.
This material may only be redistributed under the conditions specified in Open Publication License v1.0 no later (the latest version is currently available at http://www.opencontent.org/openpub/).
PHP 3 includes support for a network-based debugger.
PHP 4 does not have internal debugging mechanisms.
However, you can use one of the external debuggers.
The Zend IDE includes a debugger, and debugging extensions (such as DBG) can also be found at http://dd.cron.ru/dbg/ or on the Advanced PHP Debugger (APD).
Other incompatibilities
Using the debugger
Annex D.
PHP debugging
The PHP 3 debugger protocol is line oriented.
Each line is of a certain type and several lines form a message.
Each message starts with a start line and ends with an end line.
PHP 3 can send lines for different messages at the same time.
The line has this format:
Date in ISO 8601 format (yyyy - mm - dd)
Time including microseconds: hh: mm: uuuuuu
DNS (domain) name or IP address of the computer where the script error was generated.
PID (process id) on the host process computer that generated the error in the PHP 3 script.
Line type. Tells the receiving program how to handle the following data:
Table D-1.
Debugger line types
Name
Importance
He tells the receiving program that this is where the debugger message begins.
The content of the data part (data) will be the type of error message from the list below.
PHP 3 error message.
File name and line number where the error occurred.
The first location line will always contain the highest level of location. the data will contain file: line. The location line will follow each line of the message and each line of the function.
The number of frames in the following stack listing.
If there are four frames, expect information about the four levels of functions called.
If no "frames" line occurs, a depth of 0 is assumed (the error occurred at the highest level).
The name of the function where the error occurred.
It will be repeated for each level of the function call stack.
He tells the receiving program that the debugger message ends here.
Data in a row.
Table D-2.
Debugger-distinguished error types
(all the others)
Example D-1.
Example - debugger message
The internal debugger in PHP 3 is useful for finding tricky bugs.
The debugger works by connecting to the TCP port every time PHP 3 is started.
All error messages from the respective session are sent to this TCP channel.
This information is intended for a "debugging server" that can run inside an IDE or a programmable editor (such as Emacs).
How to set up a debugger:
Set the TCP port for the debugger in the configuration file (debugger.port) and activate it (debugger.enabled).
Set up TCP to listen on a port (for example, socket -l -s 1400 on UNIX).
In your code, run "debugger_on (host)", where host is the IP address or domain name of the computer where the TCP server is running.
Debugger protocol
This section summarizes the most common errors that occur when building PHP.
Using anonymous access to CVS, I got the latest version of PHP, but it lacks the "configure" script!
You must have the "GNU autoconf" package installed so you can generate a "configure" script from "configure.in".
After downloading the source files from the CVS server, run. / buildconf from the top directory level (unless you run "configure" with the --enable-maintainer-mode parameter, the "configure" script will not be automatically updated when you change the "configure.in" file, so you need to make sure you did it manually after what has been changed for "configure.in".
One symptom of this is finding elements like @ VARIABLE @ in the "Makefile" file after running "configure" or "config.status").
I'm having trouble configuring PHP to work with the Apache server.
He reports he can't find httpd.h, but he's exactly where I said he is!
You need to tell the configuration / installation script the location of the top-level Apache source files.
This means that you specify '--with-apache = / path / to / apache' and not '--with-apache = / path / to / apache / src'.
When I run "configure", it reports that it can't find "include" files or libraries for GD, gdbm and any other packages!
You can specify that the "configure" script search for header files and libraries in non-standard locations for C preprocessor and linker helper flags, for example:
When the language-parser.tab.c file is compiled, it reports errors that say 'yytname undeclared'.
You need to update your version of Bison.
You can find the latest version at ftp: //ftp.gnu.org/pub/gnu/bison/.
When I run "make", it seems to run well, but crashes when trying to build the final application with a message that it can't find any files.
Some older versions of "make" do not save correctly compiled versions of files located in the function directory in the same directory.
Try running "cp * .o functions" and then 'make' again to see if it helps.
If so, you should really install the latest version of "GNU make".
When building PHP, it reports many undefined references.
Look in the line where the assembly is described and make sure that all the necessary libraries have been added at the end. It often happens that '-ldl' and some libraries needed to support the database you specified are missing.
If you are building for Apache 1.2.x, did you forget to add the corresponding information to the EXTRA_LIBS line in the "configure" file and run the Apache configuration script?
For more information, see the INSTALL file that comes with the distribution package.
Some people also reported that if they compiled for Apache, they had to add '-ldl' just after 'libphp4.a'.
I didn't figure out how to build PHP for Apache 1.3.
This is now very easy.
Follow these steps carefully:
Download the latest Apache 1.3 distribution from http://www.apache.org/dist/.
Unzip it somewhere, for example to / usr / local / src / apache-1.3.
Compile PHP by running it first. / configure --with-apache = / path / apache-1.3 (replace path with the current path to the apache-1.3 directory).
Type 'make' and then 'make install' to build PHP and copy the necessary files to the Apache distribution tree.
Change directory to / path / apache-1.3 / src and edit the Configuration file.
Add to the file:
Run '. / Configure 'and then' make '.
You should now have the finished httpd files to work with PHP.
Note::
You can also use a new script. / configure for Apache.
Read the instructions in README.configure, which is in the Apache distribution.
See also the INSTALL file from the PHP distribution.
I followed exactly the instructions to install PHP as a module for Apache on UNIX, and my PHP scripts appear in the browser or the browser tries to save them as files.
This means that the PHP module is not called for some reason.
Before you look for more help, check three things:
Make sure the httpd you compiled is running.
Try running / path / to / binary / httpd -l
If you do not see mod_php4.c in the list, then you are not running the correct version of httpd.
Find and install the correct version.
Make sure you add the correct Mime Type specification to the Apache .conf files.
It should be there:
AddType application / x-httpd-php3 .php3 (for PHP 3)
or AddType application / x-httpd-php .php (for PHP 4)
Also, make sure that this AddType line is not hidden inside the Virtualhost or Directory block, which may prevent the rule from being applied to the area where the test script is located.
Finally, the default location of Apache configuration files has changed between Apache 1.2 and 1.3.
You should verify that the file you added the AddType line to is the one that is actually being loaded.
You can try to insert a terrible syntax error in the httpd.conf file or make some other change of this nature - you will see if the file is loaded correctly.
It reports the use of --activate-module = src / modules / php4 / libphp4.a, but this file does not exist; that's why I changed it to --activate-module = src / modules / php4 / libmodphp4.a and it doesn't work?
What's going on?
Note that the libphp4.a file does not exist.
It is created by the Apache server process!
When I try to build Apache with PHP as a static module using --activate-module = src / modules / php4 / libphp4.a, it reports that my compiler is not ANSI compliant.
This is a misleading error message that was removed in later versions.
When I try to compile PHP with the --with-apxs parameter, I get mysterious error messages.
Three things need to be checked.
First, because when Apache creates an apxs script in Perl, it sometimes terminates the compilation without the corresponding variables.
Find the apxs script (try the 'which apxs' command, sometimes in / usr / local / apache / bin / apxs or / usr / sbin / apxs).
Open it and check the lines like these:
my $ CFG_CFLAGS_SHLIB = ''; # replaced by Makefile.tmpl my $ CFG_LD_SHLIB = ''; # replaced by Makefile.tmpl my $ CFG_LDFLAGS_SHLIB = ''; # replaced with Makefile.tmpl
my $ CFG_CFLAGS_SHLIB = '-fpic -DSHARED_MODULE'; # substituted via Makefile.tmpl my $ CFG_LD_SHLIB = 'gcc'; # replaced by Makefile.tmpl my $ CFG_LDFLAGS_SHLIB = q (-shared); # replaced with Makefile.tmpl
my $ CFG_LIBEXECDIR = 'modules'; # replaced by APACI install
my $ CFG_LIBEXECDIR = '/ usr / lib / apache'; # replaced by APACI install
During 'make', I get errors in microtime, and a lot of 'RUSAGE_' stuff.
During the 'make' portion of installation, if you encounter problems that look similar to this:
Your system is damaged.
You must repair the files in / usr / include by installing the glibc-devel package that belongs to your glibc.
It has absolutely nothing to do with PHP.
You can get proof by this simple test:
I want to upgrade my PHP.
Where can I find the shape of the line. / configure that was used to build the existing PHP installation?
When you look in the config.nice file in the source tree of the current PHP installation.
If it is not available, simply run the script
Installation
Using PHP
PHP can be used on Win32 platforms to access COM and DCOM objects.
I compiled a DLL for some calculations.
Is there a way to run this library under PHP?
If it is a simple DLL library, it is not yet possible to run it from PHP.
However, if this library contains a COM server, you can access it if it implements the IDispatch interface.
What does 'Unsupported variant type: xxxx (0xxxxx)' mean?
There are dozens of VARIANT types and their combinations.
Most of them are already supported, but several of them have yet to be implemented.
Fields are not fully supported.
Only one-dimensional indexed arrays can be exchanged between PHP and COM.
If you find other types that are not supported, please report them as a bug (if they have not already been reported) and provide as much information as you can about them.
Is it possible to manipulate visual objects in PHP?
In general, however, because PHP is most commonly used as a web scripting language, it runs in a web server environment, and therefore visual objects do not appear on the server's desktop.
If you use PHP for application scripting, eg together with PHP-GTK, there are no restrictions on accessing and manipulating visual objects using COM.
Can I store COM objects in a session?
You can't.
COM instances are treated as resources and are therefore only available in the context of a single script.
How can I catch COM errors?
At the moment it is not possible to catch COM errors except for the methods provided by PHP itself (@, track_errors, ...), however we are thinking about how to implement it.
Can I generate DLLs from PHP scripts, similar to Perl?
No, unfortunately such a tool is not available in PHP.
What does 'Unable to obtain IDispatch interface for CLSID {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}' mean?
This error can have several causes:
the CLSID value is incorrect
the required DLL is missing
the required component does not implement the IDispatch interface
How can I run a COM object from a remote server?
Exactly how you launch local objects.
You only need to use the IP address of the remote machine as the second parameter of the COM constructor.
Make sure com.allow_dcom = true is set in the php.ini file.
'DCOM is disabled in C: \ path ... \ scriptname.php on line 6', what should I do?
Edit the php.ini file - set com.allow_dcom = true there.
It is possible to load an ActiveX object on the page, resp. to manipulate it, using PHP?
It has nothing to do with PHP.
ActiveX objects are loaded on the client side when requested by an HTML document.
It has no connection with the PHP script and therefore no direct interaction on the server side is possible.
Is it possible to get a running instance of a component?
This is possible with the help of "monikers".
If you want to get multiple references to the same instance, you can create this instance as follows:
This will create a new instance if no running instance is available, resp. returns a handle to the running instance.
Is there a way to handle an event sent from a COM object?
Not yet.
I have problems trying to invoke a COM object method that exposes more than one interface.
What should I do?
The answer is as simple as it is unsatisfactory.
You can't say exactly, but you probably can't do anything.
If anyone has specific information about this issue, please write here.
When PHP works with COM, what about COM +?
COM + extends the COM framework for component management over MTS and MSMQ, but it's nothing special for PHP to have to support such components.
If PHP can manipulate COM objects, can you imagine using MTS to manage component resources along with PHP?
PHP alone cannot handle transactions yet.
Therefore, when an error occurs, no rollback is initiated.
If you use components that support transactions, you will need to implement your own transaction management mechanism.
PHP and HTML
PHP and other languages
This section addresses frequently asked questions about the relationship between PHP and databases.
Yes, PHP today can access virtually any available database.
I heard that you can access Microsoft SQL Server from PHP.
How?
On Windows machines, you can easily use the built-in ODBC support and the correct ODBC driver.
On Unix machines, you can use the Sybase-CT driver to access Microsoft SQL Servers because these protocols are (at least for the most part) compatible.
Sybase has prepared a free version of the necessary libraries for Linux.
For other Unix systems, you must contact Sybase to obtain the correct libraries.
See also the answer to the next question.
Can I access Microsoft Access databases?
Yes.
If you are running Windows 9x / Me or NT / 2000, you already have all the necessary tools - you can use ODBC and ODBC drivers for Microsoft Access databases.
If you use PHP on Unix and want to communicate with MS Access databases running on Windows, you will need ODBC drivers for Unix.
OpenLink Software has Unix drivers for ODBC that work here.
There is a pilot program where you can download a trial copy that has an unlimited trial period; prices for the commercial version with support start at $ 675.
Another alternative is to use a SQL server that has ODBC drivers for Windows and use it to store data that you can then access from Microsoft Access (using ODBC) and PHP (using built-in drivers), or use a file format that Access i understands. PHP (eg ordinary files or dBase databases).
At this point, Tim Hayes of OpenLink software writes:
Using another database as an intermediate format is not a good idea if you can use ODBC from PHP directly on your database - eg using drivers from OpenLink software.
When you need to use the intermediate format, OpenLink has now released Virtuoso (virtual database engine) for WinNT, Linux and other Unix platforms.
Please visit our website and download it for free.
One proven option is to use MySQL and its ODBC drivers for Windows and database synchronization.
Steve Lawrence writes:
Install on your MySQL platform according to the enclosed instructions.
You can get the latest version at www.mysql.com (download from the nearest mirror!).
No special configuration is required, except that when installing the database and configuring the user account, you should add% or the name of the Windows computer on which you want MySQL to run in the "host" field.
Make a note of the server name, username, and password.
Download the MyODBC driver for Windows from the MySQL site.
The latest version is myodbc-2_50_19-win95.zip (NT version also available, as well as source code).
Install it on a Windows computer.
You can test the function using the included utilities.
Create a user or system dsn in the ODBC administrator located in Control Panel.
Choose the dsn name, enter the computer name, password, port, etc. for the MySQL database configured in step 1.
Install a full installation of Access to ensure that all add-ons are available; you will need at least ODBC support and linked table management.
And now the funniest!
Create a new database in Access.
Right-click in the tables window and select "Link Tables", or under "File" menu, select "Load External Data" and then "Link Tables".
When the dialog opens, select the ODBC files.
Choose the system dsn and the dsn name created in step 3.
Select the table to link, press "OK" and that's it!
You can now open the spreadsheet and add / delete / edit data on your MySQL server!
You can also create queries, import / export tables to MySQL, create forms and reports, etc.
Tips and tricks:
You can create tables in Access, export them to MySQL, and then link them back.
This speeds up table design.
When you create tables in Access, you must have a primary key defined to write to the table.
Make sure you have created the primary key in MySQL before connecting to Access.
If you change a table in MySQL, you must reattach it to Access.
Go to tools add-ins linked table manager, cruise to your ODBC DSN, and select the table to re-link from there. you can also move your dsn source around there, just hit the always prompt for new location checkbox before pressing ok.
I upgraded to PHP 4 and MySQL now reports "Warning:
What's happening?
Most likely, PHP 4 was compiled with the '--with-mysql' option without specifying the MySQL path.
This means that PHP uses its built-in client library.
If your system is running an application like PHP 3 (like the Apache module running in parallel) or auth-mysql, it uses different versions of MySQL clients, so there is a conflict between two different versions of these clients.
Recompiling PHP 4 with adding the path to MySQL to the parameter, '--with-mysql = / your / path / to / mysql', will usually solve this problem.
After installing shared MySQL support, Apache crashes the moment it loads libphp4.so.
Can this be solved?
This happens when MySQL libraries are mounted using pthreads.
Verify this using "ldd".
If so, download the MySQL package and compile the source files, or recompile the files from the RPM package and remove the switch that turns on the client thread code.
One of these ways should solve the problem.
Then recompile PHP with the new MySQL libraries.
Why am I getting an error that looks something like this: "Warning:
0 is not a MySQL result index in file on line x "or" Warning:
You are trying to use a result identifier that is 0.
Zero indicates that your query failed for some reason.
After submitting the query, you must check for errors before attempting to use the returned result identifier.
The correct way to do this is described in the following code:
Getting PHP
This section addresses general questions about PHP: what it is and what it does.
What is PHP?
From the cover of the manual:
PHP is a scripting language embedded in HTML.
Much of its syntax is borrowed from C, Java and Perl with several PHP-specific resources added.
The goal of the language is to allow web developers to write dynamically generated pages faster.
A nice introduction to PHP by Stig Sæther Bakken can be found here on the Zend website.
Many PHP conference materials are also freely available.
What does PHP stand for?
PHP stands for PHP: Hypertext Preprocessor
Many people may be confused that the first word of an acronym is also an acronym.
This type of abbreviation is called a recursive acronym.
Curious people can visit the Free On-Line Dictionary of Computing for more information on recursive acronyms.
What is the relationship between the versions?
PHP / FI 2.0 is an early and no longer supported version of PHP.
PHP 3 is a successor to PHP / FI 2.0 and is much better.
PHP 4 is still the latest generation of PHP and has a Zend engine under the hood.
Can I run multiple versions of PHP at the same time?
Take a look at the INSTALL file that comes with distributing PHP 4 source files.
Also read the relevant appendix.
What are the differences between PHP 3 and PHP 4?
There are several articles written about this by the authors of PHP 4.
Here is a list of some of the more important new features:
Advanced API module
Generalized compilation process under UNIX
A generic interface for web servers that also supports multithreaded servers
Improved syntax highlighter
Native HTTP sessions support
Output buffering support
Stronger configuration system
I think I found a mistake!
Who should I tell?
You should visit the PHP Bug Database to make sure that the bug you find is no longer in the list of known bugs.
If you can't find it there, use the bug report form.
It is important to use the error database instead of sending a message to the distribution list, because the error will be assigned its number and you will then be able to return here later to check the status of the error.
You can find the error database at http://bugs.php.net/.
FAQ: Frequently Asked Questions
E-mail conferences (mailing lists)
General information
PHP and HTML have a lot in common:
PHP generates HTML, and HTML has information that will be sent to PHP.
And in the URL?
There are several situations for which coding is important.
Assuming you have string $ data that contains a string that you have unencrypted and want to send, you need to address the following relevant issues:
HTML interpretation.
If you specify a random (generic) string, you must enclose it in quotation marks and process it with the htmlspecialchars () function (to remove / convert special HTML characters).
URL: consists of several parts.
If you want your data to be interpreted as a single item, you must encode it using urlencode ().
Example 51-1.
Hidden HTML form element
It is a mistake to use urlencode () for $ data, because browsers themselves provide data processing identical to the urlencode () function.
All popular browsers do this correctly.
GET or POST).
However, you will only notice this in the case of GETs, because POST requests are usually hidden.
Example 51-2.
Data to edit by the user
The data is displayed in the browser as intended because the browser will correctly interpret the special symbols.
After sending, either by GET or POST, the data will be encoded in the urlencode way for transmission and then directly decoded in PHP.
So you don't need to do any encoding / decoding manually at all, everything is done automatically.
Example 51-3.
Inside the URL
? php echo "a href = \" ". htmlspecialchars (" / nexpage.php? stage = 23 data = ". urlencode ($ data))." \ "\ n" ;?
In this case, you are already creating a GET request, so you need to encode the data manually using urlencode ().
You must also apply htmlspecialchars () to the entire URL, because the URL is the value of the HTML attribute here.
In this case, the browser first removes the special characters and then processes the URL.
PHP will properly understand the URL being sent because you encoded the data with urlencoded ().
You may notice that the symbol in the URL is replaced by an amp ;.
Although most browsers fix it. if you forget it, it is not always possible.
So if your URL is not dynamic, you must use htmlspecialchars ().
I'm trying to use the tag input type = "image", but the variables $ foo.x and $ foo.y are not available.
Where are they?
When you submit the form, you can use the image as a tag instead of the standard button
Because $ foo.x and $ foo.y are invalid variable names in PHP, they are automatically converted to $ foo_x and $ foo_y.
Ie. dots are replaced by underscores.
How do I create an array in an HTML form?
To place the results of your form submission in an array, name the input, select, or textarea elements as follows:
Field key specification is optional in HTML.
If you do not specify the keys, the field will be filled in according to the order of the elements in the form.
Our first example contains keys 0, 1, 2 and 3.
See also Functions for working with arrays and Variables from outside PHP.
How do I get all the data from an HTML element for multiple selection?
The multiple-selection tag in the HTML construct allows users to select multiple items from a list.
These items are sent to the form handler.
Be aware that if you use JavaScript, adding [] to an element's name can cause problems when trying to reference an element by its name.
Then use the numeric identification of the element, or enclose the variable name in apostrophes and use it as an index in the element array, for example:
PHP and COM
This section addresses frequently asked questions about how to install PHP.
PHP is available for most OS (basically except MacOS over OSX) and most web servers.
Follow the instructions in the INSTALL file in the appropriate distribution to install PHP.
Windows users should also read the install.txt file.
There is also a file with various tricks for Windows - you can find it here.
Where should the php.ini file be stored?
On UNIX, it should be in the / usr / local / lib directory by default.
Many people will want to change this at compile time with the --with-config-file-path parameter.
For example, you could set it up like this:
Under Windows, the php.ini file is implicitly located in the Windows directory.
UNIX:
I installed PHP, but every time I load a document, I get a 'Document Contains No Data' message!
This probably means that PHP has a problem and is crashing.
Check the error log to see if this is the case, and then try to reproduce the problem with a small test.
If you know how to use 'gdb', it will be very helpful if you can provide a backtrace with your error report.
This makes it easier for developers to locate the problem.
If you're using PHP as an Apache module, try something like:
Stop the httpd processes
Then load the URL where the problem occurred into your browser
If you get a core dump (PHP crashes), gdb should let you know
type: bt
You should attach the obtained backtrace to the error report.
This should be sent to http://bugs.php.net/
If your script uses regular expression functions (ereg () and others), you should make sure that you have compiled PHP and Apache with the same regular expression package.
This should happen automatically with PHP and Apache 1.3.x.
I installed PHP from RPM packages, but Apache does not process PHP pages!
What is this all about?
Assuming both Apache and PHP were installed from RPM packages, you will need to "uncomment" or add some (or all) of the following lines to the http.conf file:
# Extra Modules AddModule mod_php.c AddModule mod_php3.c AddModule mod_perl.c # Extra Modules LoadModule php_module modules / mod_php.so LoadModule php3_module modules / libphp3.so / * for PHP 3 * / LoadModule php4_module modules / libphp4.so / * for PHP 4 * / LoadModule perl_module modules / libperl.so
AddType application / x-httpd-php3 .php3 / * for PHP 3 * / AddType application / x-httpd-php .php / * for PHP 4 * /
I installed PHP 3 from RPM packages, but it doesn't compile with the database support I need!
Due to the way PHP 3 was built, it is not easy to build a complete flexible RPM package with PHP.
The problem is solved in PHP 4.
For PHP 3, we now recommend using the mechanism described in the INSTALL.REDHAT file in the PHP distribution.
If you insist on using the RPM version of PHP 3, read on ...
RPM packers are configured to create RPM packages for installation without database support to simplify installations and because RPM uses the / usr / directory instead of the standard / usr / local /.
You must tell the RPM file the spec that the database supports and the top-level directory location of the database server.
This example explains the process of adding support for the popular MySQL database server, for installing PHP as a module in Apache.
Of course, all this information can be modified for any database server that supports PHP.
For this example, we will assume that you have installed MySQL and Apache fully from RPM packages.
First remove mod_php3:
Then take the RPM source package and run it, NOT --rebuild
Edit the file / usr / src / redhat / SPECS / mod_php3.spec
In the% build section, add the database support you want and set the path.
For MySQL you would add
After these changes are made, compile the package as follows:
Then install the package:
I added an Apache patch to the FrontPage Extension and PHP suddenly stopped working.
Is PHP incompatible with FrontPage Extension for Apache?
No, PHP works well with FrontPage Extension.
The problem is that the FrontPage patch modifies some of the Apache structures that PHP relies on.
Recompiling PHP (using 'make clean; make') after installing the FP patch should solve the problem.
UNIX / Windows:
I installed PHP, but when I try to load the PHP script file into my browser, only a blank screen appears.
In the browser, select the 'view source' function, you will probably see the source code of your PHP script.
This means that the server does not send the script for interpretation.
The error is somewhere in the server configuration - it is better to double check the configuration according to the PHP installation instructions.
I have installed PHP and when I want to load a PHP file into the browser, I get a "500 Internal Server Error".
An error occurred while trying to start PHP.
To see a more detailed error message, from the command line, go to the directory with the PHP file (under Windows php.exe) and run php -i.
If an error occurs while running PHP, a corresponding error message will be displayed telling you what to do next.
If you get a screen full of HTML code (output of the phpinfo () function), then PHP works and your problem may be related to the server configuration, which then needs to be checked well.
Some operating systems:
I installed PHP without errors, but now when I try to start Apache, I get errors about undefined symbols:
This currently has nothing to do with PHP, but with MySQL client libraries.
Some need --with-zlib, others don't.
This is also covered in the MySQL FAQ.
I installed PHP, but I get an error when loading the page into the browser:
This error message means that no data can come from PHP.
If you get a screen full of HTML code (output of the phpinfo () function), PHP works.
If PHP is running on the command line, try again from the browser.
If that still doesn't work, it may be one of the following reasons:
Setting access rights to the script file, php.exe, php4ts.dll, php.ini, or any PHP extension you are trying to load is such that the anonymous Internet user ISUR_ machinename does not have access to them.
The script file does not exist (or is not where you think it is, relative to the site root).
Note that on IIS, you can catch this error by checking the 'check file exists' option when setting up script services in Internet Services Manager.
If the script does not exist, the server returns a 404 error.
Another advantage is that IIS performs all necessary NTLanMan-based authentication on the script file.
I followed all the instructions, but PHP and IIS still refuse to work together!
Make sure that every user who needs to run PHP scripts has the rights to run php.exe!
IIS uses an anonymous user, which is added when IIS is installed.
This user needs rights to php.exe.
Also, each authenticated user will need the rights to run php.exe.
And IIS4 you have to say that PHP is a scripting engine.
Database issues
Assembly (compilation) problems
PHP is the best language for web programming, but what about other languages?
ASP is not really a language as such, it is an acronym for Active Server Pages, the languages ​​currently used to program ASP are Visual Basic Script and JScript.
The biggest disadvantage of ASP is that it is a proprietary system that is used natively only on Microsoft Internet Information Server (IIS).
This limits its availability to Win32-based servers.
There are several projects that allow ASP to run in other environments and servers:
InstantASP from Halcyon (commercial), Chili! Soft ASP from Chili! Soft (commercial) and OpenASP from ActiveScripting.org (free).
ASP is said to be slower and more cumbersome, as well as less stable.
Among the advantages of ASP is that it primarily uses VBScript, which is relatively easy to grasp if you already know how to program in Visual Basic.
ASP support is also turned on by default on IIS, so it's easy to start and run.
The components built into ASP are really limited, so if you need to use "advanced" elements, such as interacting with FTP servers, you need to buy additional components.
Is there a converter from ASP to PHP?
Yes, one of the most frequently mentioned is asp2php.
PHP is often said to be faster and more efficient for complex programming tasks and testing new ideas.
PHP is generally mentioned as more stable and less resource intensive.
Cold Fusion has better error handling, database abstraction, and data parsing, although database abstraction is addressed in PHP 4.
Another thing that is described as a powerful Cold Fusion tool is its excellent search engine, but with the proviso that the search engine is not something that should be part of a scripting language for the web.
PHP runs on most existing platforms; Cold Fusion is only available on Win32, Solaris, Linux and HP / UX.
Cold Fusion has a good IDE and is generally easier to get started, while PHP requires more programming knowledge.
Cold Fusion is designed for non-programmers, while PHP is for programmers.
Sheldon was sent to a PHP mailing list.
You will find a copy here.
The biggest advantage of PHP over Perl is that PHP was designed for scripting for the web, while Perl's goal was to do many more things, and it can therefore be very complicated.
The flexibility / complexity of Perl makes it easy to write code that will be difficult for another author to read.
PHP has a less confusing and stricter format without losing flexibility.
Unlike Perl, PHP is easier to integrate into existing HTML code.
PHP includes many of the "good" Perl functionality: constructs, syntax, etc., without the complexity that Perl can bring.
Perl is a well-tried and "true language" that was available in the late 80's, but PHP is maturing fast.
Transition from PHP 2 to PHP 3
This section discusses how you can contact the PHP community.
Email conferences are the best way.
Note translator: Czech does not have an adequate term for "mailing list".
Because the terms "e-mail conference" or "conference" are commonly used, I will use them here as well, although this is not the best solution.
Are there any e-mail conferences for PHP?
There are many conferences for various matters.
You can find a complete list of these conferences on our Support page.
Most conferences belong to the php-general class, ie general PHP issues.
You do not have to insert anything special in the subject of the message or its body.
You can unsubscribe by sending a message to php-general-unsubscribe@lists.php.net.
You can also log in or out using the web interface on the Support page.
Are there other communities?
There are countless of them all over the world.
For example, we have links to some IRC servers and conferences in foreign languages ​​- on the Support page.
Help!
I can't log in / out of the conference!
If you're having trouble signing in or out of a php-general conference, it may be because its software can't evaluate the correct email address to use.
If your address is joeblow@example.com , you can send a login request to php-general-subscribe-joeblow=example.com@lists.php.net , resp. unsubscribe at php-general-unsubscribe-joeblow=example.com@lists.php.net.
Use similar addresses for other conferences.
Is there an archive of conferences?
Yes, you can find a list of archives on the Support page.
Conference contributions are also archived as news services (NNTP protocol).
The server of this service is available at news: //news.php.net/.
There is also an experimental web interface for the news server at http://news.php.net
What can I ask at the conference?
As PHP is becoming more popular day by day, traffic at the php-general conference has grown and now there are 150-200 posts per day.
Because of this, it is in everyone's best interest to use this conference as a last resort after looking elsewhere.
Before sending anything to the conference, please refer to the FAQ and the manual to see if you can find the answer there.
If you do not find it, check out the conference archives (see above).
If you have problems installing or configuring PHP, please read all enclosed documentation and README files.
If you still can't find anything to help you, you're more than welcome to the conference.
What information should I attach to the conference paper?
Posts like "PHP doesn't want me to work!
Help me!
What's wrong with me? "They are absolutely useless.
If you have problems running and running PHP, you need to write what operating system you are running it on, what version of PHP it is, how you got it (precompiled package, CVS, RPM, etc.), what you did with it, where it got stuck , and an exact error message.
This is exactly the same for other problems.
You should include information about what you did, where it got stuck, what you were trying to do with it, and if possible, an exact error message.
If you have problems with the source code, you need to include the piece of code that doesn't work.
Don't add more code than necessary!
The post would be harder to read and many people would skip it.
If you are not sure how much information you have to include in the report, it is better to add more than less.
Another important thing to keep in mind is to summarize the problem in the subject of the report.
Most readers will ignore the "HELP!" Or "What's the problem?"
PHP has a long history:
Legendary PHP 1.0, PHP / FI, PHP 3.0 and PHP 4.0.
Transition from PHP3 to PHP4
PHP 4 was designed to be as compatible with older versions as possible, while losing some functionality.
If you are really unsure about compatibility, you should install PHP 4 in a test environment and run scripts there.
See also the relevant appendix to this manual.
Incompatible features?
Although PHP 4 is a completely rewritten PHP engine, there are very few features that have changed, and only the more exotic ones.
Transition from PHP 2 to PHP 3?
PHP / FI 2.0 is no longer supported.
Please refer to the corresponding section of the manual for information on switching from PHP / FI 2.0.
If you are still using PHP 2, we strongly recommend that you upgrade directly to PHP 4.
Transition from PHP 3 to PHP 4
There may be issues that we cannot place in any other category.
You can find them here.
What happened to the pop-ups on the website?
Can I get such a code?
The yellow pop-ups on the old pages were really "good enough", but very difficult to maintain (especially when some companies seem to enjoy making changes to the way each new version of the browser works).
All code from previous versions of the site is still available via CVS.
In addition, the latest version of shared.inc (contains all JavaScript and DHTML for popups) is available here.
Can I work with manuals compressed with bz2 in Windows?
If you do not have an archiving tool for working with bz2 files, download the command line tool from RedHat.
Win2k SP2 users should download the latest version 1.0.2, other Windows users should download version 1.00.
After downloading, rename the executable file to bzip2.exe.
It is advantageous to move it to the directory in the path settings, e.g.
C: \ Windows (where C is the disk where Windows is installed).
Note: "lang" represents your language and "x" the selected format, eg pdf.
To extract the php_manual_lang.x.bz2 file, follow these steps:
open a command prompt window
navigate to the folder where the downloaded php_manual_lang.x.bz2 file is stored
run bzip2 -d php_manual_lang.x.bz2, extract php_manual_lang.x to the same folder
If you downloaded php_manual_lang.tar.bz2 containing multiple HTML files, the procedure is the same.
The only difference is that you receive the php_manual_lang.tar file.
The tar format is known to be handled by common Windows archiving programs such as WinZip.
If you do not want to use the command line tool, you can try the free Stuffit Expander software available for any operating system.
If you have WinRAR, you can also easily decompress bz2 files with it.
If you use Windows Commander, the plugin for bz2 is available for free directly on the Windows Commander website.
Appendices
This section provides details on the location of the PHP download and operating system issues.
Where can I get PHP?
You can download PHP from any point that is part of a network of PHP servers.
You can find them at http://www.php.net.
You can also use anonymous CVS access to get the absolute latest version of the source files.
For more information, visit http://cvs.php.net.
Are precompiled binary versions available?
We only distribute precompiled versions for Windows systems, as we are not able to compile PHP for all major Linux / UNIX platforms with all extension combinations.
Also note that many Linux distributions today include PHP.
You can download binaries for Windows from our Download page, for binaries for Linux visit the Linux distribution site.
Where can I get the libraries needed to compile some optional PHP extensions?
Libraries marked with an * (asterisk) are not thread safe and should not be used with PHP as a module for multithreaded servers under Windows (IIS, Netscape).
It doesn't matter in UNIX.
LDAP (unix).
LDAP * (unix).
LDAP (unix / win):
How do I make these libraries work?
You must follow the instructions provided with the library.
Some libraries are automatically detected when you run the 'configure' script for PHP (eg the GD library), others you must activate with the '--with-EXTENSION' parameter for 'configure'.
For a list of these parameters, run 'configure --help'.
I got the latest version of PHP source code from the CVS repository, what do I need to compile on Windows?
First of all you need to have Microsoft Visual C ++ version 6 (MSVC ++ 5 is also sufficient, but we use version 6) and you will need some supporting files.
See the section on compiling PHP under Windows.
Where can I find the Browser Capabilities File?
It is a browscap.ini file at http: / /www.garykeith.com / browsers / downloads.asp.
This section summarizes the most common errors you may encounter when writing PHP scripts.
pre? php echo "This should be the first line." ;? ? php echo "This should show up on a new line." ;? / pre
I would like to write a generic PHP script that can process data from any form.
How do I know which POST variables are available?
Make sure you have track_vars enabled in the php.ini file As of PHP 4.0.3, this option is always enabled.
If so, some associative arrays are created, the most important of which is $ HTTP_POST_VARS.
So to write a generic script to handle POST variables, you'll need something like this:
foreach ($ HTTP_POST_VARS as $ var = $ value) {echo "$ var = $ value br \ n";}
I need to convert all apostrophes (') to backslashes followed by apostrophes.
How can this be done using a regular expression?
First, look at the addslashes () function.
It does exactly what you need.
You should also look at the magic_quotes_gpc directive in the php.ini file.
When I type the following code, the output prints in the wrong order:
To use the results of your function in an expression (such as a join with another string in the example above), you must return the value (using return), not print () (using echo ()).
Hey, what happened to my line breaks?
In PHP, a block of code ends with either "?" Or "? \ N" (where \ n is a newline).
So in the example above, the sentences will be listed on a single line, because PHP omits line breaks after the end of the block.
This means that you must add separate line breaks for each block of PHP code to print a single line break.
Why does PHP do that?
When formatting normal HTML, this usually simplifies life because you don't want line breaks, but you want to create extremely long lines or otherwise pollute the source code.
I received a 'Warning:
The header (), set_cookie (), and session functions must add headers to the output.
Functions will do this if PHP runs as an Apache module.
The following code snippet displays all the headers in the request:
I need to access the request header directly.
How to do it?
The getallheaders () function does this if PHP runs as a module in Apache.
When I try to authenticate with IIS, I get 'No Input file specified'.
The IIS security model is on it.
This is a problem common to all CGI programs running under IIS. The solution is to create an ordinary HTML file (unpaired PHP) as an input page to an authenticated directory.
Then a META tag is used to redirect you to a PHP page or a link to a manual transition.
PHP then handles the authentication correctly.
This is not a problem with the ISAPI module.
Other NT Web servers are not affected.
For more information, see http://support.microsoft.com/support/kb/articles/q160/4/2asp.
My PHP script works on IE and Lynx, but in Netscape some of the output disappears.
When I turn on "View Source", I see content in IE, not in Netscape.
Netscape is stricter about HTML tags (eg tables) than IE.
Checking HTML output using an HTML validator such as validator.w3.org can be helpful.
For example, a missing / table causes the above problem.
Both IE and Lynx also ignore any null (\ 0) characters in the HTML stream, Netscape does not.
The best way to verify this is to compile the command line version of PHP (known as the CGI version) and run the script from the command line.
On * NIXes, redirect it to and search for the characters \ 0.
Under Windows, you need to find an editor or other program that allows you to view binaries.
When Netscape sees a null character in a file, it typically does not display anything else, although IE and Lynx do.
What are the prerequisites for mixing XML and PHP?
It's complaining about my? Xml tags!
You must disable short tags in the php.ini file by setting short_tags to 0 or using the appropriate Apache directive.
You can also use the File section for selective settings.
How can I use PHP with FrontPage or another HTML editor that insists on moving my code?
One of the easiest ways is to allow the use of ASP tags in PHP code.
This allows you to use ASP-style delimiters (% and%).
Some popular HTML editors work with (at the moment) smarter.
To enable ASP tags, you must set the asp_tags variable in the php.ini file or use the appropriate Apache directive.
Where can I find a complete list of available preset variables, and why is this not documented in the PHP documentation?
The best method is to embed? Phpinfo () ;? and load it into the browser.
Information of all kinds about the installed PHP is displayed, including a list of environment variables and special variables set by the HTTP server.
This list really cannot be documented in the PHP documentation because it varies from server to server.
I'm trying to access one of the standard CGI variables (such as $ DOCUMENT_ROOT or $ HTTP_REFERER) in a user-defined function, and it can't find it.
What is wrong?
Environment variables are normal global variables, so you must either declare them in the function as global variables (for example, using "global $ DOCUMENT_ROOT;") or use an array of global variables (for example, "$ GLOBALS [" DOCUMENT_ROOT "]").
Table 23-1.
Table 23-2.
Table 23-3.
Example 23-1.
Example 23-2.
Safe mode
Function reference
The following text applies to version 3.0.7 and higher.
The connection status is monitored internally in PHP.
There are three possible states:
0 - NORMAL
1 - ABORTED
2 - TIMEOUT (timed out)
During normal running of the PHP script, the active state is NORMAL.
If the client disconnects, the ABORTED flag is set.
The remote client typically disconnects when the user presses the STOP button.
When the timeout is reached (see set_time_limit ()), the TIMEOUT status flag is set.
You can decide if you want the client to disconnect cause your script to terminate prematurely.
Sometimes it is useful to let the scripts run, even if there is no remote browser to receive the output.
However, the default behavior is for the script to terminate when the remote client disconnects.
This behavior can be changed through the ignore_user_abort configuration directive in php3.ini, the corresponding php3_ignore_user_abort directive in the Apache .conf file, or the ignore_user_abort () function.
If you do not instruct PHP to ignore the user disconnect and the user disconnects, your script will terminate.
The exception is if you have a register_shutdown_function () using an exception.
In this case, if the remote user presses the STOP button, the next time the script tries to send output, PHP detects that the connection has been dropped and calls the function registered for execution at the end of the script.
This function is also called at the end of a script run that normally ends, so if you want to do something else after the connection is dropped, you can use connection_aborted ().
This function returns TRUE if the connection was canceled.
Your script may also terminate the built-in timer.
The default timeout is 30 seconds.
This can be changed by the max_execution_time directive in phpš.ini or the corresponding php3_max_execution_time directive in the Apahe .conf file, or by calling the set_time_limit () function.
When the time counter expires, the script terminates, and as in the above case of user disconnection, if a function is executed to execute at the end of the script, it is called.
Inside this function, you can check if its call caused the time counter to expire by calling the connection_timeout () function.
This function returns TRUE if the call to the function registered for execution at the end of the script caused the time counter to expire.
A noteworthy fact is that the ABORTED and TIMEOUT states can be active at the same time.
This is possible if you instruct PHP to ignore user disconnections.
PHP will still know that the user broke the connection, but the script will continue to run.
If it then reaches the timeout, it will terminate, and your function will be called to execute when the script terminates, if it exists.
At this point, you will find that both connection_timeout () and connection_aborted () return TRUE.
You can check both states with a single call to the connection_status () function.
This function returns a bit array of active states.
So, for example, if both of these states are active, it returns 3.
Using remote files
Persistent database connections
PHP transparently supports HTTP cookies.
Cookies are a mechanism for storing data in a remote browser and thus tracking or identifying returning users.
You can set cookies using the setcookie () function.
Cookies are part of the HTTP header, so setcookie () must be called before sending output to the browser.
All cookies received from the client automatically become a PHP variable just like GET and POST data.
To assign multiple values ​​to a single cookie, add [] to the end of the cookie name.
See the setcookie () function for more details.
HTTP authentication and PHP
File upload processing
Chapter 18.
MAX_FILE_SIZE cannot specify a file size larger than that set by upload_max_filesize in the PHP configuration.
By default, this is 2 MB.
If the memory limit is on, a larger memory_limit value may be required.
Make sure that the memory_limit value is large enough.
If the set value max_execution_time is too small, the script execution time may exceed it.
Make sure that the max_execution_time value is large enough.
Make sure the post_max_size value is large enough.
Failure to verify which file is being processed may mean that users may be able to access sensitive information in other directories.
Given this phenomenon, CERN httpd will not support file uploads.
Uploading multiple files
PHP allows you to process file uploads from any RFC-1867 compliant browser (which includes, but is not limited to).
This capability allows people to upload both text and binary files.
With PHP authentication and file manipulation capabilities, you have full control over who can upload and what to do with the uploaded file.
Remember that PHP also supports PUT uploads as used in Netscape Composer and the W3C Amaya Editor.
For more details, see PUT Method Support.
The file upload screen can be a special form that looks like this:
Example 18-1.
File upload form
form enctype = "multipart / form-data" action = "_ URL_" method = "post" input type = "hidden" name = "MAX_FILE_SIZE" value = "1000" Send this file: input name = "userfile" type = "file "input type =" submit "value =" Send File "/ form
Warning
MAX_FILE_SIZE is for informational purposes only.
It's easy to get around it.
So don't expect the browser to behave the way you want it to.
Of course, setting the maximum size in PHP cannot be fooled.
The variables defined for uploaded files vary depending on the PHP version and configuration.
If the track_vars option is active, the $ HTTP_POST_FILES / $ _FILES field will be initialized.
Finally, related variables can be initialized as global if the register_globals option is turned on.
After a successful upload, the following variables will be defined in the target script:
For PHP 4.1.0 and later, $ _FILES can be used instead of $ HTTP_POST_FILES. $ _FILES is always a global variable, so the global specification for $ _FILES should not be used.
$ HTTP_POST_FILES / $ _FILES contains information about the uploaded file.
The contents of $ HTTP_POST_FILES are as follows (note that it is assumed to use the name of the uploaded file 'userfile' as in the example above):
The original file name on the client computer.
MIME file type if the browser provides this information (eg "image / gif").
Temporary file name under which the uploaded file was saved to the server.
PHP 4.1.0 and later support the abbreviated $ _FILES variable name.
PHP 3 does not support $ HTTP_POST_FILES.
Contents of variables in a situation where the register_globals variable is enabled by the settings in the php.ini file (note that it is assumed to use the name of the uploaded file 'userfile' as in the example above):
$ userfile - Temporary file name under which the uploaded file was saved to the server.
$ userfile_name - The original file name or path on the sending system.
$ userfile_type - MIME file type if the browser provides this information (eg "image / gif").
Setting register_globals = On is not recommended for security and performance reasons.
By default, files are stored in the system directory for temporary files, unless otherwise specified by the upload_tmp_dir directive in the php.ini file.
The system directory for temporary files can be changed by setting the TMPDIR environment variable in the environment where PHP is running.
Setup using putenv () from a PHP script will not work.
This environment variable can also be used to ensure that all other operations work with uploaded files.
File upload verification
? php // In PHP 4.1.0 and later, $ _FILES should be used instead of $ HTTP_POST_FILES. if (is_uploaded_file ($ HTTP_POST_FILES ['userfile'] ['tmp_name'])) {copy ($ HTTP_POST_FILES ['userfile'] ['tmp_name'], "/ place / to / put / uploaded / file");} else {echo "Possible file upload attack.
Filename: ". $ HTTP_POST_FILES ['userfile'] ['name'];} / * ... or ... * / move_uploaded_file ($ HTTP_POST_FILES ['userfile'] ['tmp_name']," / place / to / put / uploaded / file ") ;?
A PHP script that accepts uploaded files should implement all the logic for determining what should be done with the uploaded file.
For example, you can use the variable $ HTTP_POST_FILES ['userfile'] ['size'] to discard files that are too small or large.
You could also use the $ HTTP_POST_FILES ['userfile'] ['type'] variable to filter files by MIME data type.
Regardless of the solution, the file should be deleted or moved elsewhere.
The file will be automatically deleted from the temporary directory at the end of the script if it has not been moved or renamed.
Common pitfalls
Multiple files can be uploaded using different name names for the input file field.
It is also possible to upload multiple files at once and have the information automatically organized in the fields.
In this case, you must use the same syntax in the HTML form as for multiple selections and check boxes.
Support for uploading multiple files was added in version 3.0.10.
Example 18-3.
If the above form is submitted, the fields $ HTTP_POST_FILES ['userfile'], $ HTTP_POST_FILES ['userfile'] ['name'], and $ HTTP_POST_FILES ['userfile'] ['size'] If the above form is submitted, the fields $ HTTP_POST_FILES ['userfile'], $ HTTP_POST_FILES ['userfile'] ['name'], and $ HTTP_POST_FILES ['userfile'] ['size'] will be initialized (both $ _FILES in PHP 4.1.0 and later, and $ HTTP_POST_VARS in PHP 3.
If the register_globals setting is active, global variables for uploaded files are also initialized).
Each will be a numerically indexed array of matching values ​​for the uploaded files.
For example, suppose you send files named /home/test/review.html and /home/test/xwp.out.
In that case, $ HTTP_POST_FILES ['userfile'] ['name'] [0] would contain the value review.html and $ HTTP_POST_FILES ['userfile'] ['name'] [1] the value xwp.out.
Similarly, $ HTTP_POST_FILES ['userfile'] ['size'] [0] would contain the size of review.html, etc.
$ HTTP_POST_FILES ['userfile'] ['name'] [0], $ HTTP_POST_FILES ['userfile'] ['tmp_name'] [0], $ HTTP_POST_FILES ['userfile'] ['size'] [0] and $ HTTP_POST_FILES ['userfile'] ['type'] [0] will also be set.
PUT method support
PHP provides support for the HTTP PUT method used by clients such as Netscape Composer or W3C Amaya.
PUT requests are much simpler than file uploads and look something like this:
Of course, it's not a good idea for Apache or PHP to automatically let anyone overwrite any files in the tree.
So, to process such a request, you must first tell your web server that you want to process the request with a specific PHP script.
For the Apache server, this is done with the Script directive.
It can be located anywhere in the Apache configuration file. Directory and Virtualhost blocks are common.
PUT script / put.php
This tells the Apache server to send all PUT requests to some context-friendly URI to the put.php script.
This of course assumes that you have PHP enabled for the .php extension and PHP is active.
In the put.php file you could then write something like:
This should copy the file to the location requested by the remote client.
You may want to perform some user authentication and / or authentication before making this copy.
The only usable trick is that PHP saves the transferred file to a temporary directory, similar to using the POST method.
When the script finishes, the temporary file will be deleted.
So your PHP skipt must copy the file elsewhere to process PUT requests.
The file name in the temporary location is stored in the $ PHP_PUT_FILENAME variable and the desired target file name in the $ REQUEST_URI variable (may vary for non-Apache servers).
This destination name is the only thing the client has specified.
You don't have to listen to him.
For example, you could copy all uploaded files to a special upload directory.
Another occurrence of references
HTTP authentication resources are accessible in PHP only if PHP runs as an Apache module, therefore they are not accessible in the CGI version.
In a PHP script running under the Apache module, the header () function can be used to send an "Authentication Required" message to the client browser, which will display a dialog box for entering a username and password.
Once the user enters the username and password, the URL containing this PHP script is called again with the variables $ PHP_AUTH_USER, $ PHP_AUTH_PW and $ PHP_AUTH_TYPE containing the username, password and authentication type.
Currently only "Basic" authentication is supported.
The following code snippet can be used as an example of requesting user authentication on a page:
Example 16-1.
HTTP Authentication example
? php if (! isset ($ PHP_AUTH_USER)) {Header ("WWW-Authenticate:
Basic realm = \ "My Realm \" "); Header (" HTTP / 1.0 401 Unauthorized "); echo" Text to be sent when the user presses the Cancel button \ n "; exit;} else {echo" Hello $ PHP_AUTH_USER .
P "; echo" You entered $ PHP_AUTH_PW as the password.
Instead of printing $ PHP_AUTH_USER and $ PHP_AUTH_PW, you might want to verify the name and password you entered.
For example, by querying the database or by searching for a user in a dbm file.
Beware of Internet Explorer error browsers.
They seem to be very picky about the order of the headers.
Sending the WWW-Authenticate header before the HTTP / 1.0 401 header seems to be busy.
To prevent scripts that reveal passwords on pages authenticated by one of the traditional external mechanisms, PHP_AUTH variables are not created if external authentication is enabled for that page.
In this case, you can use the $ REMOTE_USER variable to identify the externally authenticated user.
Note, however, that the above does not prevent password theft from authenticated URLs by someone who controls an unauthenticated URL on the same server.
Both Netscape and Internet Explorer flush the current realm's authentication cache after receiving a 401 response code.
So you can basically "log out" the user.
Some people use this to "expire" a login or create a logout button.
Example 16-2.
HTTP authentication example requiring a new name and password
? php function authenticate () {Header ("WWW-Authenticate:
Basic realm = \ "Test Authentication System \" "); Header (" HTTP / 1.0 401 Unauthorized "); echo" You must enter a valid ID and password to access this resource \ n "; exit;} if (! Isset ($ PHP_AUTH_USER) _BAR_ _BAR_ ($ SeenBefore == 1! Strcmp ($ OldAuth, $ PHP_AUTH_USER))) {authenticate ();} else {echo "Welcome: $ PHP_AUTH_USER BR"; echo "Old: $ OldAuth"; echo "FORM ACTION = \ "$ PHP_SELF \" METHOD = POST \ n "; echo" INPUT TYPE = HIDDEN NAME = \ "SeenBefore \" VALUE = \ "1 \" \ n "; echo" INPUT TYPE = HIDDEN NAME = \ "OldAuth \ "VALUE = \" $ PHP_AUTH_USER \ "\ n"; echo "INPUT TYPE = Submit VALUE = \" Re Authenticate \ "\ n"; echo "/ FORM \ n";}?
HTTP Basic authentication does not require this behavior, so you should never rely on it.
Experiments with Lynx have shown that Lynx does not empty the credentials after receiving response code 401, so pressing back and forward will show the requested resource again (unless the data requirements have changed).
Also note that this feature does not work when using IIS server and CGI version of PHP due to IIS limitations.
Properties
Persistent connections are SQL connections that do not close at the end of a script.
When requesting a persistent connection, PHP first checks to see if an identical connection no longer exists (which has remained open before) - and uses it if it exists.
If it does not exist, PHP will open it. An "identical" connection is a connection that was opened with the same server, username, and password (if specified).
There are other extensions that create persistent connections, such as IMAP Extensions.
People who are not thoroughly familiar with the way web servers work and distribute the burden may think of persistent connections as something they are not.
In particular, they do not allow the opening of "user sessions" on the same SQL connection, they do not allow In particular, they do not allow the opening of "user sessions" on the same SQL connection, they do not allow efficient transaction creation, and they do not allow a lot of other things.
Even to be really and thoroughly clear, lasting connections don't give you any functionality that wouldn't be possible with their perpetual counterparts.
Why?
This is due to the way web servers work.
There are three ways your web server can use PHP to generate websites.
The first method is to use PHP as a CGI "wrapper".
In this mode, one instance of the PHP interpreter is created and destroyed for each request (per PHP page) on your web server.
Because it is destroyed after the request is serviced, all resources it obtains (such as a connection to the database server) are closed when it is destroyed.
In this case, trying to use persistent connections will not get you anything - it just won't last.
The second, and most popular, method is to run PHP as a module in a multiprocess web server, a set that currently includes only Apache.
A multiprocess web server typically has one process (parents) that manages a group of processes (their children) that do their own job - serving sites.
Every request that comes from a client is served by one of the children who is not currently serving another client.
This means that when the same client makes another request to the same server, it can be serviced by a different child process than the first one.
Persistent connections ensure that each child process only has to log in to your SQL server the first time a page that uses such a connection is submitted.
When another page requires a connection to SQL Server, it can use the connection that this child has opened before.
The last method is to use PHP as a plug-in in a multithreaded web server.
Currently, PHP 4 has this support for ISAPI, WSAPI, and NSAPI (on Windows), which allows you to use PHP as a plug-in on multithreaded servers such as Netscape FastTrack (iPlanet), Microsoft Internet Information Server (IIS), and O'Reilly's WebSite. For.
The behavior is the same as in the multiprocess model described earlier.
SAPI support is not available in PHP 3.
If persistent connections do not provide any added functionality, what are they good for?
The answer to this question is very simple - efficiency.
Persistent connections are good if creating a connection with your SQL server is highly overhead.
The real amount of this overhead depends on many factors.
For example, what type of database is it, if it resides on the same computer as your web server, how busy the machine on which your SQL server is running, and so on.
The bottom line is that if the connection overhead is high, lasting connections will noticeably help you.
It allows a child process to connect only once in its entire lifecycle instead of each page processing that requires a connection to the SQL server.
This means that each child who has opened a persistent connection will have its own persistent connection to the server.
For example, if you have 20 child processes that ran a script that opened a persistent connection to your SQL server, you have 20 independent connections to the SQL server, one for each child.
Note, however, that this can have disadvantages if you use a database with a limited number of connections that exceeds persistent child connections.
If your database has a limit of 16 concurrent connections, and attempts to connect 17 child processes at a busy time, one will fail.
If you have bugs in your scripts that prevent connections from closing (such as endless loops), a database with only 32 connections will soon be flooded.
Check your database documentation for information on handling abandoned or idle connections.
Here are some additional objections that have settled in mind while using persistent connections.
One is that if you are using locked tables on a persistent connection and a script cannot release the lock for any reason, then the next script that uses the same connection will most likely be permanently blocked and you may need to restart the http server or database server each time.
Furthermore, in the case of using transactions, the transaction block is transferred to another script using the same connection, if its execution ends before the transaction block.
In either case, you can use register_shutdown_function () to register and easily clear the function to unlock tables or roll back a running transaction.
The best way to avoid this problem is not to use persistent joins altogether in scripts that lock tables or use transactions (you can still use them in many other places).
Important summary.
Permanent connections have been designed to match one-to-one normal connections.
This means that you should always be able to replace persistent connections with non-persistent ones without changing the way your script works.
This may (and probably will) affect the effectiveness of this script, but not its behavior!
Also: fbsql_pconnect (), ibase_pconnect (), ifx_pconnect (), imap_popen (), ingres_pconnect (), msql_pconnect (), mssql_pconnect (), mysql_pconnect (), OCIPLogon (), odbc_pconnect (), Oraopen (p) , pg_pconnect () and sybase_pconnect ().
Connection handling
Safe mode
If you enable "URL fopen wrapper" support when configuring PHP (it is enabled by default, unless you explicitly specify the --disable-url-fopen-wrapper flag for configuration (version 4.0.3), or (for newer versions) set allow_url_fopen in php. ini on off), you can specify HTTP or FTP URLs in most function calls that expect a filename (including require () and include ()) as an argument.
For example, you can open a file on a remote Web server, separate the data you need from the output, and then use that data in a database query, or simply incorporate it into the output in a style that matches the rest of your Web site.
Example 19-1.
Get the name of the remote page
? php $ file = fopen ("http: //www.php.net/", "r"); if (! $ file) {echo "p Unable to open remote file. \ n"; exit;} while (! feof ($ file)) {$ line = fgets ($ file, 1024); / * This will only work if the tags and title are on the same line * / if (eregi ("title (. *) / Title", $ line, $ out)) {$ title = $ out [1]; break;}} fclose ($ file) ;?
If you connect as a user with sufficient rights and the file no longer exists, you can also save the data via FTP.
If you want to connect as a user other than 'anonymous', you must provide a username (and possibly a password) in the URL, eg 'ftp: // user: password@ftp.example.com/path/to/file '. (You can use the same syntax to access files over HTTP that require Basic authentication.)
Example 19-2.
Store data on a remote server
? php $ file = fopen ("ftp: //ftp.php.net/incoming/outputfile", "w"); if (! $ file) {echo "p Unable to open remote file for writing. \ n"; exit;} / * Write data. * / fputs ($ file, "$ HTTP_USER_AGENT \ n"); fclose ($ file);
From the example above, you might want to use this technique to write to a remote log, but as mentioned above, you can only write to a new file using the fopen () URL wrapper.
If you are interested in distributed logging, take a look at syslog ().
PHP Safe Mode is an attempt to address the security of shared servers.
It is architecturally incorrect to try to solve this problem at the PHP level, but because web server and operating system level solutions are not very realistic, many people, especially ISPs, now use safe mode.
Configuration directives that control safe mode:
safe_mode = Off open_basedir = safe_mode_exec_dir = safe_mode_allowed_env_vars = PHP_ safe_mode_protected_env_vars = LD_LIBRARY_PATH disable_functions =
If safe_mode is enabled, PHP checks to see if the owner of the running script is the owner of the file to be manipulated.
If you set the open_basedir directory instead of safe_mode, then all file operations will be restricted to the specified directory.
For example (Apache example httpd.conf):
You can also turn off individual functions.
If we add this to the php.ini file:
Table 22-1.
Function
dbmopen ()
dbase_open ()
filepro ()
filepro_rowcount ()
Checks that the files / directories you are working with have the same UID as the running script.
sql_safe_mode restrictions, (! = safe mode)
Checks that the directory in which you are working has the same UID as the running script.
Obeys the safe_mode_protected_env_vars and safe_mode_allowed_env_vars ini-directives.
See also putenv documentation ()
move_uploaded_file ()
chdir ()
dl ()
backtick operator
shell_exec () (functional equivalent of backticks)
These functions are deactivated in safe-mode.
You can only run programs inside the safe_mode_exec_dir directory.
For practical reasons, it is currently not possible to have components in the path to the program file ...
passthru ()
rename ()
unlink ()
copy ()
Checks that the directory in which you are working has the same UID as the running script. (for source and target)
chgrp ()
chown ()
chmod ()
Additionally, you cannot set the SUID, SGID, and sticky bit
link ()
Checks that the directory in which you are working has the same UID as the running script. (note: only the target is tested)
In safe mode, headers beginning with 'authorization' (regardless of case) will not be returned.
Warning: this does not work with the aol-server implementation of getallheaders ()!
??
Using PHP from the command line
Apache-specific features
Example 1. abs () example
This feature is not implemented on Windows platforms.
Returns a backslash string before the characters listed in the charlist parameter.
It adds \ n, \ r, etc. similarly to C, characters with an ASCII code lower than 32 and higher than 126 are converted to an octal representation.
If you choose to escap the characters 0, a, b, f, n, r, tav, they will be converted to \ 0, \ a, \ b, \ f, \ n, \ r, \ ta \ v.
In PHP \ 0 (NULL), \ r (carriage return), \ n (newline) and \ t (tab) are predefined escape sequences, while in C all of these are predefined escape sequences.
You can specify a range in the charlist, eg "\ 0 .. \ 37", which would escap all characters with an ASCII code between 0 and 31.
Sample addcslashes ()
$ escaped = addcslashes ($ not_escaped, "\ 0 .. \ 37! @ \ 177 .. \ 377");
If you specify a character sequence in the charlist parameter, make sure you know which other characters are between the characters listed at the beginning and end of the range.
echo addcslashes ('foo []', 'A..z'); // Output: \ f \ o \ o \ [\] // All uppercase and lowercase characters will be escaped // ... but so will the [\] ^ _ `and any tabs, line // feeds, carriage returns, etc.
echo addcslashes ("zoo ['.']", 'z..A'); // Output: \ zoo ['\.']
See also: stripcslashes (), stripslashes (), htmlspecialchars (), htmlspecialchars () and quotemeta ().
Functions for working with strings
Returns a backslash string before characters that would be problematic in database queries, and so on.
These characters are a single quotation mark ('), a double quotation mark ("), a backslash (\), and a NUL (NULL byte).
See also: stripslashes (), htmlspecialchars () and quotemeta ().
This function performs a partial URI request.
It only goes so far as to obtain all the important information about a given resource and return that information in class.
The properties of this class are:
apache_note () is an Apache-specific function that gets and sets values ​​in the request notes table.
Returns the current value of note_name when called with a single argument.
When called with two arguments, it sets the value of note_name to note_value, and returns the previous value of note_name.
Example 1. apache_request_headers () Example
This function is not yet documented, only a list of arguments is available.
Example 1. array_change_key_case () example
Field functions
Example 1. array_chunk () example
array_count_values ​​() returns an array that uses input values ​​as keys and their input frequencies as values.
Sample array_count_values ​​()
$ array = array (1, "hello", 1, "world", "hello"); array_count_values ​​($ array); // returns array (1 = 2, "hello" = 2, "world" = 1)
Example 1. array_diff_assoc () example
array_diff () returns an array containing all the values ​​from array1 that do not occur in any of the other arguments.
The keys are preserved.
Array_diff () sample
$ array1 = array ("a" = "green", "red", "blue"); $ array2 = array ("b" = "green", "yellow", "red"); $ result = array_diff ($ array1, $ array2);
$ result contains array ("blue");
See also: array_intersect ().
Example 1. array_fill () example
Example 1. array_filter () example
array_flip () an array with swapped keys and values.
Array_flip () sample
Returns an array of arguments.
An argument can be assigned to arguments using the = operator.
The index can be a string or a number.
If the index is omitted, a numeric index starting at 0 is automatically generated.
If the index is an integer, the next index generated will be the highest integer index + 1.
Note: if two identical indexes are defined, the first will be overwritten by the last.
The following example demonstrates how to create a two-dimensional array, how to specify keys in associative arrays, and how to skip numeric indexes in normal arrays.
Array sample ()
Auto index and array ()
This example creates a field numbered from 1.
Example 3.
Index starting with 1 with array ()
See also: list ().
Example 1. array_intersect_assoc () example
array_intersect () returns an array containing all the values ​​from array1 that occur in all arguments.
Array_intersect () example
$ result contains array ("a" = "green", "red");
See also: array_diff ().
Example 1. array_key_exists () example
array_keys () returns keys, both numeric and text, from the input field.
If the optional search_value argument is present, it returns only the keys of that value.
Otherwise, it returns all the keys from the input field.
Sample array_keys ()
$ array = array (0 = 100, "color" = "red"); array_keys ($ array); // returns array (0, "color") $ array = array ("blue", "red", "green", "blue", "blue"); array_keys ($ array, "blue"); // returns array (0, 3, 4) $ array = array ("color" = array ("blue", "red", "green"), "size" = array ("small", "medium", " large ")); array_keys ($ array); // returns array ("color", "size")
This feature was added in PHP 4, below is the implementation for those who still use PHP 3.
Implementation of array_keys () for PHP 3 users
function array_keys ($ arr, $ term = "") {$ t = array (); while (list ($ k, $ v) = each ($ arr)) {if ($ term $ v! = $ term) continue; $ t [] = $ k;} return $ t;}
See also: array_values ​​().
Example 1. array_map () example
Example 2. array_map () - using more arrays
array_merge () merges the elements of two or more arrays together so that the values ​​of each array are appended to the end of the previous one.
Returns the resulting field.
If the input fields have the same text key, the later value overwrites the earlier value.
However, if they have the same numeric key, the later value will not overwrite the original one, but will be appended to it.
Array_merge () sample
$ array1 = array ("color" = "red", 2, 4); $ array2 = array ("a", "b", "color" = "green", "shape" = "trapezoid", 4); array_merge ($ array1, $ array2);
The resulting array will be an array ("color" = "green", 2, 4, "a", "b", "shape" = "trapezoid", 4).
See also: array_merge_recursive ().
array_merge_recursive () merges the elements of two or more arrays so that the array values ​​are appended to the end of the previous array.
If the input fields contain the same text key, the values ​​of these keys are recursively merged into the field so that if one of the values ​​is the field itself, this function also merges it with the corresponding item from the next field.
However, if these fields have the same numeric key, the later value will not overwrite the earlier one, but will be appended.
Array_merge_recursive () sample
The resulting array will be array ("color" = array ("favorite" = array ("red", "green"), "blue"), 5, 10).
See also: array_merge ().
array_multisort () can be used to sort several arrays at once or to sort a multidimensional array XXX according to one of more dimensions.
Maintains key associations during sorting.
Input fields are manipulated as columns of a table to be sorted by rows - this is reminiscent of the functionality of the ORDER BY SQL clause.
The first field is the one according to which it will be sorted. The rows (values) in this field that compare the same are sorted by the next input array, and so on.
The argument structure of this function is a bit unusual, but flexible.
The first argument must be an array.
Each additional argument can be either a field or one of the following lists:
Symptoms of sorting direction:
SORT_ASC - sort ascending
SORT_DESC - sort descending
Symptoms of sorting type:
SORT_REGULAR - compare items normally
SORT_NUMERIC - compare items numerically
SORT_STRING - compare items as strings
You can specify one flag of each type after each field.
The sort flags specified after each field apply only to this field - for other fields they are reset to the default SORT_ASC and SORT_REGULAR.
Returns TRUE on success and FALSE on failure.
Sort multiple fields
In this example, after sorting, the first field will contain 10, "a", 100, 100.
The second field will contain 1, 1, 2, "3".
The items of the second field corresponding to the identical items in the first field (100 and 100) were also sorted.
Multidimensional array sorting
In this example, after sorting, the first field will contain 10, 100, 100, "a" (sorted ascending as strings) and the second field will contain 1, 3, "2", 1 (sorted as numbers, descending).
array_pad () returns a copy of the input field padded with pad_value.
If pad_size is positive, the field is padded to the right, if negative, to the left.
If the absolute value of pad_size is less than or equal to the input size, the padding will not occur.
Array_pad () sample
$ input = array (12, 10, 9); $ result = array_pad ($ input, 5, 0); // result is array (12, 10, 9, 0, 0) $ result = array_pad ($ input, -7, -1); // result is array (-1, -1, -1, -1, 12, 10, 9) $ result = array_pad ($ input, 2, "noop"); // not completed
array_pop () removes and returns the last value of the array array, truncating it by one element.
Array_pop () sample
$ stack = array ("orange", "apple", "raspberry"); $ fruit = array_pop ($ stack);
$ stack now has only two elements: "orange" and "apple", and $ fruit contains "raspberry".
See also: array_push (), array_shift () and array_unshift ().
array_push () appends the passed variables to the end of the array.
The length of the array increases by the number of variables added.
The effect is the same as:
Returns the new number of elements in the array.
Array_push () sample
$ stack = array (1, 2); array_push ($ stack, "+", 3);
1, 2, "+" and 3.
See also: array_pop (), array_shift (), and array_unshift ().
array_rand () is quite useful when you want to randomly select one or more values ​​from an array.
Its default value is 1.
If you select only one item, array_rand () returns the key of the random item.
Otherwise, it returns a key field of randomly selected items.
This way you can randomly select values ​​and keys.
Be sure to initialize the random number generator using srand ().
Sample array_rand ()
srand ((double) microtime () * 10000000); $ input = array ("Neo", "Morpheus", "Trinity", "Cypher", "Tank"); $ rand_keys = array_rand ($ input, 2); print $ input [$ rand_keys [0]]. "\ n"; print $ input [$ rand_keys [1]]. "\ n";
Example 1. array_reduce () example
Example 1. array_reverse () example
$ input = array ("php", 4.0, array ("green", "red")); $ result = array_reverse ($ input); $ result_keyed = array_reverse ($ input, true);
$ result now contains array (array ("green", "red"), 4.0, "php").
But $ result2 [0] is still "php".
The second argument was added in PHP 4.0.3.
This function can return a Boolean value of FALSE, but also a non-Boolean value corresponding to a FALSE rating, such as 0 or "". Please read the Boolean section for more information.
Use the === operator to test the return value of this function.
array_shift () returns the first array entry and removes it, truncating the array by one element and moving the others down.
Array_shift () sample
$ args = array ("-v", "-f"); $ opt = array_shift ($ args);
$ args now has one element: "-f" and $ opt is "-v".
See also: array_unshift (), array_push () and array_pop ().
array_slice () returns a sequence of array elements specified by the offset and length arguments.
If the offset is positive, this sequence starts the offset of the items from the beginning of the array.
If the offset is negative, this sequence starts as many items from the end of the array.
If length is positive, this length will contain so many elements.
If length is negative, this sequence ends with as many elements from the end of the array.
Array_slice sample ()
See also: array_splice ().
array_splice () removes the input array elements specified by the offset and length arguments, and optionally replaces them with the optional replacement array (array) arguments.
If the offset is positive, this deleted part starts the offset of the items from the beginning of the array.
If the offset is negative, as many items start from the end of the array.
If you omit length, array_splice () removes everything from the offset. If you omit length, array_splice () removes everything from the offset to the end of the array.
If length is negative, the end of the deleted part will be just as many elements from the end of the array.
Tip: use length count ($ input) to remove all elements from offset to end of array with the currently specified replacement argument.
If you specify a replacement field, the deleted elements are replaced by the elements of that field.
If the offset and length arguments are defined so that nothing is removed, the elements of the replacement array are inserted at the location specified by the offset argument.
Tip: if the replacement is only one value, you don't need to place it in array (), unless you really want this entry to be an array.
The following calls are equivalent:
array_push ($ input, $ x, $ y) array_splice ($ input, count ($ input), 0, array ($ x, $ y)) array_pop ($ input) array_splice ($ input, -1) array_shift ($ input ) array_splice ($ input, 0, 1) array_unshift ($ input, $ x, $ y) array_splice ($ input, 0, 0, array ($ x, $ y)) $ a [$ x] = $ y array_splice ( $ input, $ x, 1, $ y)
Returns an array of deleted elements.
Array_splice () samples
$ input = array ("red", "green", "blue", "yellow"); array_splice ($ input, 2); // $ input is now array ("red", "green") array_splice ($ input, 1, -1); // $ input is now array ("red", "yellow") array_splice ($ input, 1, count ($ input), "orange"); // $ input is now array ("red", "orange") array_splice ($ input, -1, 1, array ("black", "maroon")); // $ input is now array ("red", "green", // "blue", "black", "maroon")
See also: array_slice ().
Example 1. array_sum () examples
array_unique () accepts an array and returns a new array without duplicate values.
Sample array_unique ()
$ input = array ("a" = "green", "red", "b" = "green", "blue", "red"); $ result = array_unique ($ input);
$ result now contains an array ("a" = "green", "red", "blue") ;.
array_unshift () appends the passed elements to the beginning of the array.
All elements are added as a whole, ie the added elements retain their order.
returns the new number of elements in the array.
Array_unshift () example
$ queue = array ("p1", "p3"); array_unshift ($ queue, "p4", "p5", "p6");
$ queue will have 5 elements: "p4", "p5", "p6", "p1" and "p3".
See also: array_shift (), array_push () and array_pop ().
array_values ​​() returns all values ​​of the input array.
Sample array_values ​​()
$ array = array ("size" = "XL", "color" = "gold"); array_values ​​($ array); // returns array ("XL", "gold")
This feature was added in PHP 4, followed by implementations for those who still use PHP 3.
Implementation of array_values ​​() for PHP 3 users
function array_values ​​($ arr) {$ t = array (); while (list ($ k, $ v) = each ($ arr)) {$ t [] = $ v; return $ t;}}
Applies the func function to all elements of the arr field.
The function is passed a value as the first argument and a key as the second.
If the userdata argument is present, the user function will be passed as the third argument.
If func requires more than two or three arguments (depending on userdata), a warning is generated for each func call from array_walk ().
These warnings can be suppressed by adding the '@' character before calling array_walk () or by using error_reporting ().
If func needs to work directly with a given field, the first func argument must be passed by reference.
All changes to these values ​​are then reflected directly in the arr.
The second and third func arguments were added in PHP 4.0.
Array_walk () sample
$ fruits = array ("d" = "lemon", "a" = "orange", "b" = "banana", "c" = "apple"); function test_alter ($ item1, $ key, $ prefix) {$ item1 = "$ prefix: $ item1";} function test_print ($ item2, $ key) {echo "$ key. $ item2 br \ n";} array_walk ( $ fruits, 'test_print'); reset ($ fruits); array_walk ($ fruits, 'test_alter', 'fruit'); reset ($ fruits); array_walk ($ fruits, 'test_print');
See also: each () and list ().
arsort () sorts the array so that the array indexes maintain correlations with the elements with which they are associated.
This is especially useful when sorting associative arrays where the order of the elements is significant.
Sample arsort ()
This sample shows:
fruits [a] = orange fruits [d] = lemon fruits [b] = banana fruits [c] = apple
The fruit was sorted in alphabetical order, and the indices associated with each element were preserved.
You can modify the sorting behavior using the optional sort_flags argument, see sort () for details.
See also: asort (), rsort (), ksort (), and sort ().
ascii2ebcdic () is an Apache-specific function available only on EBCDIC-based operating systems (OS / 390, BS2000).
Translates (binary safely) a string in ASCII encoding ascii_str to its equivalent EBCDIC representation, and returns the result.
See also reverse function ebcdic2ascii ()
asort () sorts arrays so that the indexes retain corelations with the elements to which they are associated.
This is especially useful when sorting associative arrays for which the order of the elements is significant.
Assortment sample ()
fruits [c] = apple fruits [b] = banana fruits [d] = lemon fruits [a] = orange
The fruit was sorted alphabetically and the indices associated with each element were preserved.
See also: arsort (), rsort (), ksort (), and sort ().
aspell_check () checks the spelling of the word and returns TRUE if the spelling is correct and FALSE if it is not.
Example 1. aspell_check ()
$ aspell_link = aspell_new ("english"); if (aspell_check ($ aspell_link, "testt")) {echo "This is a valid spelling";} else {echo "Sorry, bad spelling";}
aspell_check_raw () checks the spelling of a word without changing its case or trying to truncate it in any way, and returns TRUE if the spelling is correct and FALSE if it is not.
Example 1. aspell_check_raw ()
$ aspell_link = aspell_new ("english"); if (aspell_check_raw ($ aspell_link, "test")) {echo "This is a valid spelling";} else {echo "Sorry, bad spelling";}
Aspell features
aspell_new () opens a new dictionary, and returns a connection identifier to that dictionary usable with other aspell functions.
Example 1. aspell_new ()
$ aspell_link = aspell_new ("english");
aspell_suggest () returns a field of possible spellings of the word.
Example 1. aspell_suggest ()
$ aspell_link = aspell_new ("english"); if (! aspell_check ($ aspell_link, "test")) {$ suggestions = aspell_suggest ($ aspell_link, "test"); for ($ i = 0; $ i count ($ suggestions); $ i ++) {echo "Possible spelling:". $ suggestions [$ i]. "br";}}
BCMath function for calculations with arbitrary precision
assert () verifies the passed assertion and takes the appropriate action if the result is FALSE.
If an assertion string is passed, it is evaluated by the assert () function as PHP code.
The benefits of string assertion are less overhead when statement checking is turned off, and messages containing an assertion statement when statement fails.
Statement checking should only be used to debug scripts.
You can use them to check for conditions that should always be TRUE, which otherwise indicate some programming errors, or to check for the existence of certain properties, such as functions included in extensions, or certain system limits and properties.
Statements should not be used for routine operations such as checking input parameters.
As a basic rule, the weight code should work correctly if the statement check is not activated.
The behavior of the assert () function can be configured through the assert_options () or .ini directives described on the manual page of this function.
Using the assert_options () function, you can set various control options for the assert () function, or just get their current settings.
Table 1.
Choices of statements
choice
this parameter
default value
description
turns on assert () evaluation
creates a PHP warning for each failed statement
terminates the execution of the skip if the statement fails
turns off error_reporting during statement expression evaluation
a user function that is called for each failed statement
assert_options () returns the original option setting, or FALSE on error.
PHP choice information
base64_decode () decodes encoded_data and returns the original data.
The returned data can be binary
See also: base64_encode (), RFC 2045 section 6.8.
base64_encode () returns base64 encoded data.
This encoding is designed to allow binary data to survive transport on non-8-bit transport layers, such as email bodies.
Base64-encoded data takes up about 33% more space than the original data.
See also: base64_decode (), chunk_split (), RFC-2045 section 6.8.
Example 1. base_convert ()
Accepts a string containing the path to the file, returns the file name.
On Windows, both a slash (/) and a backslash (\) can be used as a path separator.
In other environments, this is a normal slash (/).
$ path = '/ home / httpd / html / index.php3'; $ file = basename ($ path); // $ file has the value "index.php3"
See also dirname ()
Filesystem functions
Adds the left operand to the right operand and returns the sum in the string.
The optional scale argument is used to specify the number of decimal places in the result.
See also bcsub ().
Compares the left operand with the right operand and returns the result as an integer.
The optional scale argument is used to specify the number of decimal places used in the comparison.
The return value is 0 if both operands are equal.
If the left operand is greater than the right operand, the return value is +1, and if the left operand is less than the right operand, the return value is -1.
Divides the left operand argument with the right operand argument and returns the result.
See also bcmul ().
Returns the modulus of the left operand argument using the modulus argument.
See also bcdiv ().
Multiplies the left operand argument by the right operand argument and returns the result.
Exponentiate x to y.
See also bcsqrt ().
This function sets the default scale for all subsequent calls to bc math functions that do not explicitly specify a precision scale.
Returns the square root of the operand argument.
See also bcpow ().
Subtracts the right operand argument from the left operand argument and returns the result in a string.
See also bcadd ().
Bzip2 compression function
Returns an ASCII string containing the hexadecimal representation of p.
The conversion takes place in bytes, the upper syllable first.
Also pack () and unpack ().
GNU Gettext
The bindtextdomain () function sets the path for the domain.
Closes the bzip2 file referenced by bz.
Returns TRUE on success, FALSE on failure.
The file pointer must be valid and must point to a file successfully opened with bzopen ().
See also bzopen ().
bzcompress () compresses the source string and returns it as data obtained using the bzip2 algorithm.
The default value of blocksize is 4.
The optional workfactor parameter determines how the compression mechanism behaves in the case of the worst, very repetitive, input data.
It can take values ​​between 0 and 250; 0 is a special case, 30 is the default value.
The generated output is always the same regardless of the workfactor.
Example 1. bzcompress () Example
? php $ str = "test data"; $ bzstr = bzcompress ($ str, 9); print ($ bzstr) ;?
See also bzdecompress ().
bzdecompress () decompresses a source string containing data compressed using the bzip2 algorithm, and returns it.
If the optional small parameter is TRUE, an alternative decompression algorithm with lower memory requirements is used (maximum memory requirements drop to about 2300 KB), but at about half the speed.
See the bzip2 documentation for more information.
Example 1. bzdecompress ()
? php $ start_str = "Isn't this an honest face?"; $ bzstr = bzcompress ($ start_str); print ("Compressed string:"); print ($ bzstr); print ("\ n br \ n"); $ str = bzdecompress ($ bzstr); print ("Uncompressed string:"); print ($ str); print ("\ n br \ n") ;?
See also bzcompress ().
Returns the error number of any bzip2 error according to the file pointer bz.
See also bzerror () and bzerrstr ().
Returns the error number and error string (description) in the associative field for any bzip2 error according to the file pointer bz.
Example - bzerror ()
See also bzerrno () and bzerrstr ().
Returns an error string (description) for any bzip2 error according to the file pointer bz.
See also bzerrno () and bzerror ().
Forces the writing of all buffered data for the file pointer bz.
See also bzread () and bzwrite ().
The mode parameter has a similar meaning to the fopen () function (`r 'for read,` w' for write, etc.).
If the opening fails, the function returns FALSE, otherwise it returns a pointer (descriptor) to the newly opened file.
Example - bzopen ()
? php $ bz = bzopen ("/ tmp / foo.bz2", "r"); $ decompressed_file = bzread ($ bz, filesize ("/ tmp / foo.bz2")); bzclose ($ bz); print ("The contents of the file / tmp / foo.bz2 are:"); print ("\ n br \ n"); print ($ decompressed_file);
See also bzclose ().
bzread () reads at most length bytes from the bzip2 file referenced by bz. The reading ends when the length (uncompressed) bytes are read or the end of the file is reached, whichever comes first.
If the optional length parameter is not specified, the bzread () function reads 1024 (uncompressed) bytes at a time.
Example - bzread ()
See also bzwrite () and bzopen ().
bzwrite () writes the contents of the data string to the bzip2 file referenced by bz.
If the optional length parameter is present, writing ends when length (uncompressed) bytes are written or the end of the string is reached, whichever comes first.
Example bzwrite ()
? php $ str = "uncompressed data"; $ bz = bzopen ("/ tmp / foo.bz2", "w"); bzwrite ($ bz, $ str, strlen ($ str)); bzclose ($ bz) ;?
See also bzread () and bzopen ().
Calendar functions
Functions for working with functions
Invokes the user-defined function specified by the function_name argument.
Consider the following example:
Functions for working with classes / objects
An example of usage is below, where we define a class, create an object and use call_user_method () to indirectly call its print_info method.
See also call_user_func ().
CCVS API Function
Example 1. ceil () example
Changes the current PHP directory to a directory.
If the directory could not be changed, it returns FALSE, otherwise TRUE.
Directory functions
Returns TRUE if the given date is valid; in other cases FALSE.
Validity is verified on a date composed of values ​​in arguments.
The date is considered valid if:
year is between 1 and 32767 inclusive
month is between 1 and 12 inclusive
Day day is within the allowed number of days for the given month.
Leap years are taken into account.
See also mktime () and strtotime ().
Date and time functions
Searches DNS for type records matching the host name.
Returns TRUE if it finds any records and FALSE if it finds nothing or an error occurs.
type can be one of the following:
A, MX, NS, SOA, PTR, CNAME, or ANY.
The default is MX.
The host can be both an IP address (in "dot" notation) and a machine name.
See also getmxrr (), gethostbyaddr (), gethostbyname (), gethostbynamel (), and the named (8) man page.
Network functions
It will try to set the filename file to group.
Returns TRUE on success; otherwise FALSE.
This feature does not work on Windows systems.
It will try to change the mode of file filename to mode.
Note: mode is not automatically considered an octal value, so strings (like "g + w") will not work properly.
To ensure the expected behavior, you must add zero (0) to the beginning of the mode:
chmod ("/ somedir / somefile", 755); // decimal number; apparently incorrect chmod ("/ somedir / somefile", "u + rwx, go + rx"); // string; wrong chmod ("/ somedir / somefile", 0755); // octal; correct mode value
Returns TRUE on success, otherwise FALSE.
See also chown () and chgrp ().
This feature does not work on Windows systems
Returns the passed string without non-printable characters (including line breaks) at the end.
Only the superuser can change the owner of the file.
Returns a single-character string containing the character specified by the ascii argument.
Sample chr ()
$ str = chr (27); / * appends escape character to the end $ str * / / * This is usually more useful * / $ str = sprintf ("String ends with escape character:% c", 27);
Returns TRUE on success, FALSE on failure.
It can be used to divide a string into smaller parts, which can be useful, for example, in aligning the output from base64_encode with the semantics of RFC 2045.
Each chunklen (default 76) characters inserts the string end (default "\ r \ n").
Returns a new string, the original remains unchanged.
Sample chunk_split ()
# format $ data using RFC 2045 semantics $ new_string = chunk_split (base64_encode ($ data));
This feature was added in 3.0.6.
This function returns TRUE if class_name is defined, otherwise FALSE.
Therefore, the result of the last call of all status functions (see list below) is stored for use in the next such call using the same file name.
If you want to force a new status check, for example, if a file is checked many times and may change or disappear, use this function to release the results of the last call from memory.
This value is cached only while the script is running.
Affected functions: stat (), lstat (), file_exists (), is_writable (), is_readable (), is_executable (), is_file (), is_dir (), is_link (), filectime (), fileatime (), filemtime () , fileinode (), filegroup (), fileowner (), filesize (), filetype (), and fileperms ().
Closes the stream from the directory specified in dir_handle.
The stream must come from the opendir () function.
closelog () closes the descriptor used to write to the system log.
Using closelog () is optional.
See also define_syslog_variables (), syslog () and openlog ().
Returns the property value of the COM component referenced by com_object.
Returns FALSE on error.
com_invoke () calls the COM method of the component referenced by com_object.
If an error occurs, it returns FALSE; on success, it returns the return value of the function_name method.
com_load () creates a new COM component and returns a reference to it.
Returns FALSE on failure.
compact () accepts a variable number of arguments.
Each argument can be either a string containing a variable name or an array of variable names.
This field can also contain a field of variable names; compact () processes them recursively.
For each of the strings, compact () looks up a variable with that name in the active symbol table and adds it to the resulting field so that the name of that variable becomes the key and the contents of that variable become the value of that key.
In short, it does the exact opposite of what extract () does.
Returns an array containing all of these variables.
Strings that do not contain valid variable names are skipped.
Sample compact ()
$ result will be array ("event" = "SIGGRAPH", "city" = "San Francisco", "state" = "CA").
See also: extract ().
This function is an alias to com_get ().
This function is an alias to com_set ().
Sets the value of the COM property of the component referenced by com_object.
Returns TRUE if the client disconnected.
For a complete explanation, see the description in Connection Handling in the Properties chapter.
Mixed functions
Returns the connection state bit field.
Example 1. constant () example
This function converts a given string from one Cyrillic character set to another.
The from and these arguments are individual characters that represent the source and destination Cyrillic character set.
Supported types are:
Makes a copy of the file.
Returns TRUE if the copy was successful, otherwise FALSE.
Copy copy ()
See also rename ().
Counts the number of occurrences of all byte values ​​(0..255) in a string and returns them in various ways.
The optional Mode argument has a default value of 0.
Depending on the mode, count_chars () returns one of the following options:
0 - field with keys formed by byte values ​​and values ​​formed by the frequency of each byte.
1 - same as 0, but returns only byte values ​​with a frequency greater than zero.
2 - same as 0, but returns only byte values ​​with a frequency equal to zero.
3 - returns a string containing all used byte values.
4 - returns a string containing all unused byte values.
Returns the number of elements in var, which is typically an array (since everything else has one element).
Returns 0 if var is not initialized.
count () returns 0 for variables that are not initialized, but also returns 0 for variables that contain an empty field.
Use isset () to find out if the variable in question exists.
$ a [0] = 1; $ a [1] = 3; $ a [2] = 5; $ result = count ($ a); // $ result == 3
See also: sizeof (), isset () and is_array ().
This function is EXPERIMENTAL.
The behavior of this feature, its name, and everything else documented here may change WITHOUT NOTICE in future versions of PHP.
Take this into account and use this feature at your own risk.
Functions for working with CURL, Client URL Library
Generates a 32-bit polynomial checksum for p.
It is usually used to check the integrity of transmitted data.
See also: md5 ().
Creates an anonymous function from the passed arguments, and returns the unique name of this function. args is usually passed as a string in single quotes, and we also recommend this for code.
The reason for single quotes is to protect variable names from parsing; if you use double quotes, you will need to unscap variable names, such as \ $ avar.
You can use this function (for example) to create a function from data collected at runtime:
Create an anonymous function using create_function ()
$ newfunc = create_function ('$ a, $ b', 'return "ln ($ a) + ln ($ b) =" .log ($ a * $ b);'); echo "New anonymous function: $ newfunc \ n"; echo $ newfunc (2, M_E). "\ n"; // output // New anonymous function: lambda_1 // ln (2) + ln (2.718281828459) = 1.6931471805599
Create a general processing function using create_function ()
function process ($ var1, $ var2, $ farr) {for ($ f = 0; $ f count ($ farr); $ f ++) echo $ farr [$ f] ($ var1, $ var2). "\ n" ;} // create a bunch of math functions $ f1 = 'if ($ a = 0) {return "b * a ^ 2 =". $ b * sqrt ($ a);} else {return false;}'; $ f2 = "return \" min (b ^ 2 + a, a ^ 2, b) = \ ". min (\ $ a * \ $ a + \ $ b, \ $ b * \ $ b + \ $ a); "; $ f3 = 'if ($ a 0 $ b! = 0) {return "ln (a) / b =" .log ($ a) / $ b;} else {return false;}'; $ farr = array (create_function ('$ x, $ y', 'return "some trig:". (sin ($ x) + $ x * cos ($ y));'), create_function ('$ x, $ y ',' return "a hypotenuse:" .sqrt ($ x * $ x + $ y * $ y); '), create_function (' $ a, $ b ', $ f1), create_function (' $ a, $ b ', $ f2), create_function (' $ a, $ b ', $ f3)); echo "\ nUsing the first array of anonymous functions \ n"; echo "
Use of anonymous functions as callback functions
crypt () encrypts the string using the standard Unix DES encryption method or an alternative algorithm available in the operating system.
The arguments are the encryption string and the optional two-character salt string on which the encryption is based.
See your Unix man page for your crypt function for more information.
If no salt is specified, PHP will randomly generate it.
Some operating systems support multiple types of encryption.
Sometimes standard DES encryption is replaced by an MD5-based encryption algorithm.
The encryption type is chosen according to the salt argument.
PHP will detect the crypt capabilities when installing and will accept salt for other types of encryption.
In the absence of a salt, PHP will automatically generate a standard two-character DES salt, and if the default encryption type on the system is MD5, it will generate a random MD5-compatible salt.
PHP creates a CRYPT_SALT_LENGTH constant that tells you if a regular two-character salt or a longer 12-character MD5 salt is appropriate for your system.
If you use the provided salt, you should be aware that it is generated only once.
If you call this function recursively, it can affect appearance and security.
For standard DES encryption, crypt () returns salt as the first two characters of the output.
It also uses only the first eight characters of str, so longer strings that start with eight of the same characters will generate the same result (when the same salt is used).
On systems where the crypt () () function supports multiple types of encryption, the following constants are set to 0 or 1, depending on whether the type is available:
CRYPT_STD_DES - Standard DES Encryption with Two-Character SALT
CRYPT_EXT_DES - Extended DES encryption with nine-character SALT
CRYPT_MD5 - MD5 encryption with 12-character SALT starting with $ 1 $
CRYPT_BLOWFISH - Advanced DES encryption with 16-character SALT starting with $ 2 $
There is no decrypt function because crypt () uses a one-way algorithm.
Example 1. crypt () example
? php $ password = crypt ("MePrvniHeslo"); # we will generate a salt # You might run into problems with the full result of crypt () as a salt for # password comparison if different encryption algorithms are used. (As mentioned above, standard DES encryption uses a two-character salt, but MD5 # encryption uses a 12-character. if (crypt ($ username, $ password) == $ password) {echo "Password verified!";}?
Also md5 () and Mcrypt commands.
This function closes the CURL session and frees all resources.
The CURL handle, ch, is also deleted.
You should call this function after initializing the CURL session and setting all its parameters.
Its purpose is to perform a predefined CURL session (specified by the ch argument).
curl_init () initiates a new session and returns a CURL handle for use with the curl_setopt (), curl_exec (), and curl_close () functions.
If the optional url argument is present, CURLOPT_URL is set to the value of this argument.
You can also do this manually, using the curl_setopt () function.
Initializing a new CURL session and downloading a web page
? php $ ch = curl_init (); curl_setopt ($ ch, CURLOPT_URL, "http: //www.zend.com/"); curl_setopt ($ ch, CURLOPT_HEADER, 0); curl_exec ($ ch); curl_close ($ ch) ;?
See also: curl_close (), curl_setopt ()
curl_setopt () sets CURL session parameters ch. option is the parameter you want to set and value is the value to which the option is to be set.
The value argument should contain an integer for the following option argument values:
This parameter should include the size of the uploaded file for uploads.
If you want CURL to report everything that happens, set this parameter to a non-zero value.
If you want the output to contain headers, set this parameter to a non-zero value.
If PHP does not display a CURL transfer progress meter, set this parameter to a non-zero value.
PHP automatically sets this parameter to a non-zero value, the change is only suitable for debugging purposes.
If you do not want the output body to be included in the output, set this parameter to a non-zero value.
If you want PHP to silently terminate the transfer after receiving an HTTP server code greater than 300, set this parameter to a non-zero value.
The default behavior is to ignore the return code and return the page normally.
If you want to prepare PHP for upload, set this parameter to a non-zero value.
If you want PHP to perform a normal HTTP POST request, set this parameter to a non-zero value.
This is a common application / x-www-from-urlencoded POST request that is mostly used for HTML forms.
If you want PHP to list the file names in the FTP directory, set this parameter to a non-zero value.
If you want PHP to append the upload to its contents instead of overwriting the remote file, set this parameter to a non-zero value.
If PHP has in your ~. / netrc file to search for your username and password for the server you are connecting to.
If PHP is to redirect any "Location:" headers returned by the server. (Note: recursive, PHP will redirect for all "Location:" headers it accepts.)
If you want to upload a file using the HTTP PUT method, set this parameter to a non-zero value.
The uploaded file must be specified by the CURLOPT_INFILE and CURLOPT_INFILESIZE parameters.
If you want PHP to be completely silent about CURL functions, set this parameter to a non-zero value.
An integer specifying the maximum time in seconds that CURL functions can take.
Integer specifying the minimum baud rate in bytes per second.
If the transfer rate falls below this limit for CURLOPT_LOW_SPEED_TIME seconds, PHP terminates the transfer.
Integer specifying the time in seconds.
If the transfer rate drops below CURLOPT_LOW_SPEED_LIMIT for this time, PHP will cancel the transfer.
An integer specifying the offset in bytes at which the transfer is to begin.
Integer specifying which SSL version (2 or 3) to use.
By default, PHP will try to determine the version itself, but in some cases it is necessary to determine the version manually.
Defining the CURLOPT_TIMEVALUE behavior.
This parameter can take either the values ​​TIMECOND_IFMODSINCE or TIMECOND_ISUNMODSINCE.
Works only for HTTP transmissions.
Integer specifying the number of seconds since January 1, 1970.
This time is used according to the CURLOPT_TIMEVALUE interval, the default is TIMECOND_IFMODSINCE.
The value argument should contain a string for the following option argument values:
This is the URL that PHP should download.
You can also set this parameter when initializing a CURL session using the curl_init () function.
CURLOPT_USERPWD: A string of the form [username]: [password] to use when connecting.
CURLOPT_PROXYUSERPWD: A string of [username]: [password] to use when connecting to an HTTP proxy.
The HTTP transfers also support several intervals, seperated with commas as in XY, NM.
CURLOPT_POSTFIELDS: A string containing the complete data to be sent in the HTTP POST request.
CURLOPT_REFERER: A string containing a "referer" header for use in an HTTP request.
CURLOPT_USERAGENT: A string containing the "user-agent" header for use in the HTTP request.
CURLOPT_FTPPORT: The string used to obtain the IP address for the FTP "POST" instruction.
The POST instruction tells the server to connect to the given IP address.
This string can contain the IP address, hostname, and network interface name (under UNIX) or '-' (the system default IP address will be used).
CURLOPT_COOKIE: A string containing the cookie to be sent in the HTTP header of this transmission.
CURLOPT_SSLCERT: A string containing the name of the certificate PEM file.
CURLOPT_SSLCERTPASSWD: A string containing the password required to use the CURLOPT_SSLCERT certificate.
CURLOPT_COOKIEFILE: A string containing the name of the file containing the cookie data.
The cookie file can be either in Netscape format or contain HTTP headers.
CURLOPT_CUSTOMREQUEST: The string to use in the HTTP request instead of GET or HEAD.
This is useful for DELETE or other, more obscure HTTP requests.
Use only if your server supports this command.
The following parameters expect the descriptor returned by fopen ():
The file in which to place the CURL transfer output.
The default is STDOUT.
The file that contains the CURL transfer input.
The file to which the output headers are to be written.
The file to which errors should be written instead of STDERR.
curl_version () returns a string containing the CURL version used.
Cybercash payment features
Each field has an internal pointer to its "current" element, which initializes to the first element inserted into that field.
current () returns the element that this internal pointer is pointing to.
This indicator does not change in any way.
If this internal pointer points to the end of the list of elements, current () returns FALSE.
If this field contains empty elements (0 or "", empty string), this function also returns FALSE for these elements.
Therefore, it is impossible to use current () to determine if you are really at the end of the field.
See also: end (), next (), prev () and reset ().
this function returns an associative array with an "errcode" element, and if "errcode" is FALSE, "outbuff" (string), "outLth" (long), and "macbuff" (string).
This function returns an associative array with an "errcode" element, and if "errcode" is FALSE, "outbuff" (string), "outLth" (long) and "macbuff" (string).
Returns a string formatted according to the given format string using the given integer timestamp or the current local time (if no timestamp is specified).
The valid range for the time stamp is typically from Friday 13/12/1901 20:45:54 GMT to Tuesday 19/01/2038 03:14:07 GMT. (These values ​​correspond to the minimum and maximum values ​​of a 32-bit signed integer).
On Windows, this range is limited to the period 1.1.1970 to 19.1.2038.
You can use the strtotime () function to generate a timestamp from a string representing a date.
In addition, some databases have functions that convert their data formats to timestamps (eg the UNIX_TIMESTAMP function in MySQL).
The following characters can be used in the format string:
and - "am" or "pm"
A - "AM" or "PM"
B - Internet Time Swatch ("at")
d - day of the month, 2 digits with leading zeros, "01" to "31"
D - day of the week, text, 3 letters, eg "Fri"
F - month, text, long name, eg "January"
g - hour, 12-hour format without leading zeros, "1" to "12"
G - hour, 24-hour format without leading zeros, "0" to "23"
h - hour, 12-hour format, "01" to "12"
H - hour, 24-hour format, "00" to "23"
i - minutes, "00" to "59"
I (capital i) - "1" for daylight saving time, otherwise "0"
j - day of the month without leading zeros, eg "1" to "31"
l (small 'L') - day of the week, text, long name, eg "Friday"
L - truth value determining whether the leap year is "0" or "1"
m - month, "01" to "12"
M - month, text, 3 letters, eg "Jan"
n - month without leading zeros, "1" to "12"
O - deviation from Greenwich Mean Time in hours, eg "+0200"
r - date formatted according to RFC 822, eg "Thu, 21 Dec 2000 16:01:07 +0200" (added in PHP 4.0.4)
s - seconds, "00" to "59"
S - English serial number suffix for the day of the month, 2 characters, "st", "nd", "rd" or "th"
t - number of days in a given month, "28" to "31"
T - time zone set on the server, eg "EST" or "MDT"
U - seconds from Unix Epoch (1.1.1970 00:00:00 GMT)
w - day of the week, numerically, "0" (Sunday) to "6" (Saturday)
W - number of weeks in the year according to ISO-8601, week starts on Monday (added in PHP 4.1.0)
Y - year, 4 digits, eg "1999"
y - year, 2 digits, eg "99"
z - day of the year, "0" to "365"
Z - time shift in seconds ("-43200" to "43200").
The offset has a negative value for time zones west of UTC, and positive for east.
Example - date ()
echo date ("l dS of FY h: i: s A"); echo "July 1, 2000 is on a". date ("l", mktime (0,0,0,7,1,2000));
You can protect recognized characters in the format string from being processed by a backslash.
If a backslash character already has a special meaning, you must add another backslash before it.
Protect characters in the date () function
echo date ("l \\ t \ h \ e jS"); // prints something like 'Saturday the 8th'
It is possible to use date () and mktime () together to find data in the future or in the past.
Example - date () and mktime ()
$ tomorrow = mktime (0,0,0, date ("m"), date ("d") + 1, date ("Y")); $ lastmonth = mktime (0,0,0, date ("m") - 1, date ("d"), date ("Y")); $ nextyear = mktime (0,0,0, date ("m"), date ("d"), date ("Y") + 1);
This can be more reliable than simply adding or subtracting seconds in a day or month (due to daylight saving time).
Some examples of formatting with date ().
Remember that you should prepend a backslash to all other characters, because those that have special meaning now will cause unexpected results, and others may be given meaning in future versions of PHP.
In all such cases, you must also use apostrophes (to delimit the string) to prevent characters like \ n in line breaks.
Example 4.
Date () formatting
/ * Today is March 10, 2001, 5:16:18 PM * / $ today = date ("F j, Y, g: i a"); // March 10, 2001, 5:16 pm $ today = date ("mdy"); // 03.10.01 $ today = date ("j, n, Y"); // 10, 3, 2001 $ today = date ("Ymd"); // 20010310 $ today = date ('his, jmy, it is w Day z'); // 05-16-17, 10-03-01, 1631 1618 6 Fripm01 $ today = date ('\ i \ t \ i \ s \ t \ h \ e jS \ d \ a \ y.'); // It is the 10th day. $ today = date ("DM j G: i: s T Y"); // Sat Mar 10 15:16:08 MST 2001 $ today = date ('H: m: s \ m \ i \ s \ \ m \ o \ n \ t \ h'); // 17:03:17 m is month $ today = date ("H: i: s"); // 17:16:17
The setlocale () and strftime () functions must be used to format data in other languages.
See also getlastmod (), gmdate (), mktime (), strftime () and time ().
DBM Function
Unlocks and closes the specified database.
Deletes the key value from the database.
If this key does not exist in the database, it returns FALSE.
Returns TRUE if there is a value associated with the key.
Returns the value associated with the key.
Note:
No order is guaranteed because the database can be created using a hash table, which does not guarantee any sorting.
Adds a value with the specified key to the database.
Returns -1 if the database was opened read-only, 0 if the insert was successful, and 1 if the specified key already exists. (Use dbmreplace () to replace the value.)
Returns the key following the key.
All key / value pairs in the DBM database can be obtained by calling dbmfirstkey () followed by a sequential call to dbmnextkey ().
Getting all key / value pairs in the DBM database
The first argument is the name of the DBM file (full path) to open, the second argument is one of "r" (read-only), "n" (new, implies read / write, and will probably delete the existing database of the same name), "c" (create, implies read / write, and does not delete an existing database of the same name) or "w" (read / write).
On success, it returns an identifier that is passed to other DBM functions success, otherwise FALSE.
If you are using NDBM, NDBM actually creates the files file.dir and file.pag.
GDBM uses only one file, as well as internal flatfile support, and Berkeley DB creates a filename.db file.
In addition to possibly locking the files with its own DBM library, PHP performs its own file locking.
PHP does not have .lck files that it creates.
It uses these files as fixed inodes on which to perform file locking.
For more information on DBM files, see your Unix man page, or download GNU GDBM.
Replaces the value associated with the specified key in the database.
If this key does not exist in the database, it adds it.
Example 1. dbx_close () example
Example 1. dbx_compare () example
Example 1. dbx_connect () example
Example 1. dbx_error () example
Example 1. dbx_escape_string () example
Example 2. lists each field's name and type
Example 3. outputs the content of data property into HTML table
Example 1. dbx_sort () example
This feature allows you to change the current domain for a single message lookup.
It also allows you to specify a category.
Example 1. debug_backtrace () example
Disables the internal PHP debugger.
Development is still underway on the debugger.
Enables the internal PHP debugger with a connection to the address.
Returns TRUE if a named constant given by the name argument has been defined, otherwise FALSE.
Constant control
? php if (defined ("CONSTANT")) {// the name of the constant should be in quotation marks echo CONSTANT; //}?
See also define () and the Constants section.
Defines a named constant that is similar to a variable except that:
The constants do not have a dollar sign ('$') in front of the name;
Constants are available from anywhere, regardless of the scope rules of the variables;
Constants can only take scalar values.
An optional third case_insensitive argument is also available.
If set to 1, the constant will be defined as case-insensitive.
The default behavior is case-sensitive; i.e.
CONSTANT and Constant represent different values.
? php define ("CONSTANT", "Hello world."); echo CONSTANT; // the output is "Hello world."?
define () returns TRUE on success and FALSE on error.
See also defined () and the Constants section.
Initializes all constants used in system protocol functions.
See also openlog (), syslog () and closelog ().
This is a fake entry in the manual that should help people looking for unlink () or unset () in the wrong place.
See also unlink () (delete files), unset () (delete variables).
The dgettext () function allows you to change the current domain for a single message lookup.
? php $ filename = '/ path / to / data-file'; $ file = fopen ($ filename, 'r') or die ("failed to open file ($ filename)") ;?
It accepts a string containing the path to the file and returns the directory name.
On Windows, both a slash (/) and a backslash (\) can be used as a report separator.
On other systems, it is a slash (/).
Example dirname ()
$ path = "/ etc / passwd"; $ file = dirname ($ path); // $ file contains "/ etc"
See also basename ()
Example 1. disk_free_space () example
$ df = diskfreespace ("/"); // $ df contains the number of bytes // available on "/"
Example 1. disk_total_space () example
Loads the PHP extension defined in the library.
See also extension_dir configuration directive.
Table 2.
DOM XML function
Returns the current key / value pair from the array array and moves the array's internal pointer.
This pair is returned as an array of four elements with keys 0, 1, key and value.
The 0 and key elements contain the key name of this array element, and 1 and value contain the value.
If the field's internal pointer points beyond the end of that field, each () returns FALSE.
Samples of each ()
$ bar now contains the following key / pair value:
each () is usually used with list () to pass through the field, eg $ HTTP_POST_VARS:
Pass $ HTTP_POST_VARS using each ()
echo "Values ​​sent by POST method: br"; reset ($ HTTP_POST_VARS); while (list ($ key, $ val) = each ($ HTTP_POST_VARS)) {echo "$ key = $ val br";}
After each (), the internal array pointer moves to the next array element or remains on the last array element when it reaches the end.
See also: key (), list (), current (), reset (), next () and prev ().
Returns the UNIX timestamp corresponding to Easter midnight in the given year.
Warning:
Sample easter_date ()
325 AD as the Sunday after the first full moon which falls on or after the vernal equinox.
The equinox is always assumed to be on March 21, so the calculation is reduced to determine the date of the full moon and the date of the following Sunday.
The algorithm used here was first used around 532 by Dionysius Exigue.
In the Julian calendar (for the years before 1753), a simple nineteen-year cycle was used to monitor the phases of the Moon.
In the Gregorian calendar (for the years after 1753 - designed by Clavius ​​and Lily and introduced by Pope Gregory XIII in October 1582, in Britain and its colonies in September 1752) two factors are added to refine this cycle.
(The code is based on the C program by Simon Kershaw, webmaster@ely.anglican.org )
To calculate Easter before 1970 or after 2037, see easter_days ().
Returns the number of days from March 21 to Easter in a given year.
The default year is the current year.
The date of Easter was defined by the Council of Nice in
See also: easter_date ().
ebcdic2ascii () is an Apache-specific function available only on EBCDIC-based operating systems (OS / 390, BS2000).
Translates (binary safely) the EBCDIC encoded ascii_str encoding to its equivalent ASCII representation, and returns the result.
See also reverse ascii2ebcdic () function
Prints all parameters.
echo () isn't actually a function (it's a language construct), so you don't have to use parentheses.
Indeed, if you needed to print more than one parameter, you couldn't even use parentheses at all.
Therefore, you cannot use echo () for a variable function either, but you can use the print () function instead.
Sample echo ()
? php echo "Hello world"; echo "This takes several lines.
Line breaks are also printed "; echo" This takes \ nseveral lines.
Line breaks are \ nprinted as well. "; Echo" Special characters preceded by backslashes can also be used in a string \ "like this \". "; // Variables can also be used inside a command echo $ foo =" foobar "; $ bar =" barbaz "; echo" foo is $ foo "; / / foo is foobar / / Use single quotes to write the name of the variable, not its value echo 'foo is $ foo'; / / foo is $ foo / / If you do not need to print additional characters, you can only specify the variable names echo $ foo; // foobar echo $ foo, $ bar; // foobarbarbaz echo END This uses "document" syntax for multiline output with embedded $ variables.
Note that the semicolon ending string must be at the beginning of a new line (without spaces or tabs).
END; // Because echo is not a function, is the following code invalid ($ some_var)? echo ('true'): echo ('false'); // However this example will work ($ some_var)? print ('true'): print ('false'); // print is the function echo $ some_var? 'true': 'false'; // command must you specify before?
echo () also has an abbreviated syntax, where only the equals sign can be used after the opening php tag.
I have? = $ Foo? foo.
This abbreviated syntax will only work if abbreviated opening php tags are enabled; short_open_tag is set to "on".
See also: print (), printf () and flush ().
end () moves the inner pointer of the array to its last element and returns that element.
See also: current (), each (), end (), next (), and reset ().
Example 1. ereg () Example
Example 1. eregi () example
Example 1. ereg_replace () Example
Example 2. ereg_replace () Example
Table 1. error_log () log types
Example 1. error_log () examples
Example 1. error_reporting () examples
Table 1. error_reporting () level constants and bit values
EscapeShellArg () appends single quotes to the beginning and end of the string and quotes / escapes all occurrences of single quotes, so you can pass this string directly to the shell function, taking this as a safe argument.
This function should be used to trap individual arguments intended for shell functions coming from user input.
Shell functions including exec (), system () and backtick operator.
Standard use:
system ("ls" .EscapeShellArg ($ dir))
See also exec (), popen (), system (), and backtick operator.
Program Execution Function
EscapeShellCmd () captures all characters in the string that could be used to exploit a shell command to execute arbitrary commands.
This function should be used to ensure that all data coming from user input is escaped before being passed to the exec () or system () function or the backtick operator.
$ e = EscapeShellCmd ($ userinput); system ("echo $ e"); // here we don't care if there are spaces in $ e = EscapeShellCmd ($ filename); system ("touch \" / tmp / $ f \ "; ls -l \" / tmp / $ f \ ""); // and yes here, so we'll use quotes
See also escapeshellarg (), exec (), popen (), system (), and backtick operator.
eval () evaluates the string passed in code_str as PHP code.
Among other things, it can be used to store code in a text column of a database for later execution.
There are several factors to keep in mind when using eval ().
Remember that the string passed must be valid PHP code, including things like semicolon-terminated expressions so that the parser does not die on the line after eval (), and proper escaping in code_str.
Also keep in mind that the values ​​assigned to the variables in eval () will remain in the main script.
The return statement immediately terminates the evaluation of the passed string.
In PHP 4, you can use return to return a value that becomes the result of the eval () function, while in PHP 3, eval () of type void returned nothing.
Example 1. eval () example - a simple combination of texts
The above example will show:
exec () executes the passed command, but does not print anything.
It only returns the last line of the output of the command.
If you need to execute a command and have all the data from that command passed directly without any intervention, use the PassThru () function.
If the array argument is present, the passed array is populated with all lines of output of the command.
If this field already contains some elements, exec () appends this output to the end of this field.
If you do not want this function to append elements to the end of the field, call this field unset () before passing it to the exec () function.
If the return_var argument is present next to the array argument, the return value of the executed statement is written to this variable.
If you want to use user input data in this function, you should use EscapeShellCmd () to ensure that users do not manipulate the system into executing any commands.
If you start a program with this function and want to run it in the background, you must ensure that the output from this program is redirected to a file or other output stream, otherwise PHP will hang until the end of the program.
See also system (), PassThru (), popen (), EscapeShellCmd (), and the backtick operator.
Example 1. exif_read_data () example
Also the size of an embedded thumbnail is returned in THUMBNAIL subarray and the function exif_read_data () can return thumbnails in TIFF format.
Example 1. exif_thumbnail () example
This language construct terminates script parsing.
Returns no value.
See also die ().
Returns an array of strings, each of which is part of a string argument created by dividing it at the boundaries formed by the separator string.
If a limit is defined, the returned field will contain a maximum limit of elements, and the last element will contain the rest of the string.
If the separator is an empty string (""), explode () returns FALSE.
If the separator contains a value that is not contained in the string, then explode () returns an array containing the entire string.
The limit argument was added in PHP 4.0.1
Explosion sample ()
$ pizza = "piece1 piece2 piece3 piece4 piece5 piece6"; $ pieces = explode ("", $ pizza); $ data = "foo: *: 1023: 1000 :: / home / foo: / bin / sh"; list ($ user, $ pass, $ uid, $ gid, $ gecos, $ home, $ shell) = explode (":", $ data);
Although implode () can accept arguments in both possible orders for historical reasons, explode () cannot.
You must make sure that the separator argument precedes the string argument.
See also: preg_split (), spliti (), split () and implode ().
Returns TRUE if the extension identified by the name argument is loaded.
You can see the names of the various extensions by using phpinfo ().
See also phpinfo ().
This feature was added in PHP 3.0.10.
This function is used to import variables from an array into the active symbol table.
Accepts arrays var_array; creates the names of the variables from the keys and the values ​​of the variables from the values.
Creates one variable from each key / value pair (with respect to the extract_type and prefix arguments).
As of PHP 4.0.5, this function returns the number of extracted variables.
extract () verifies that all keys form valid variable names and also that they do not conflict with variables existing in the active symbol table.
The way invalid / numeric keys and collisions are handled depends on the extract_type.
It can have one of the following values.
If there is a collision, overwrite the existing variable.
If there is a collision, do not overwrite the existing variable.
If there is a collision, prefix the name of the new variable.
Prefix all variable names.
As of PHP 4.0.5, this includes numeric indexes.
Prefix prefix Provide only invalid / numeric variable names with prefix prefixes.
This flag was added in PHP 4.0.5.
The default extract_type is EXTR_OVERWRITE.
Note: prefix is ​​required only if extract_type is EXTR_PREFIX_SAME, EXTR_PREFIX_ALL or EXTR_PREFIX_INVALID.
If the resulting name (incl. Prefix) is not a valid variable name, it is not imported into the symbol table.
extract () returns the number of variables successfully imported into the symbol table.
A possible use of extract () is to import variables into a symbol table from the associative array returned by wddx_deserialize ().
Extract () sample
? php / * Suppose $ var_array is the array returned from wddx_deserialize * / $ size = "large"; $ var_array = array ("color" = "blue", "size" = "medium", "shape" = "sphere"); extract ($ var_array, EXTR_PREFIX_SAME, "wddx"); print "$ color, $ size, $ shape, $ wddx_size \ n" ;?
The above example prints:
$ size was not overwritten because EXTR_PREFIX_SAME was specified, so the $ wddx_size variable was created.
If EXTR_SKIP were specified, $ wddx_size would not be created either.
EXTR_OVERWRITE would override $ size to "medium", and EXTR_PREFIX_ALL would create new variables named $ wddx_color, $ wddx_size, and $ wddx_shape.
For PHP versions lower than 4.0.5, you must use an associative array.
See also: compact ().
ezmlm_hash () Calculates the hash value needed to store EZMLM mailing lists in a MySQL database.
Hash calculation and user login
$ user = " kris@koehntopp.de "; $ hash = ezmlm_hash ($ user); $ query = sprintf ("INSERT INTO sample VALUES (% s, '% s')", $ hash, $ user); $ db - query ($ query); // used database interface PHPLIB
Mail functions
Example 1. fbsql_close () example
Example 1. fbsql_connect () example
Example 1. fbsql_create_blob () example
Example 1. fbsql_create_clob () example
Example 1. fbsql_create_db () example
Example 1. fbsql_data_seek () example
Example 1. fbsql_fetch_array () example
Example 1. fbsql_fetch_assoc () example
Example 1. fbsql_fetch_field () example
Example 1. fbsql_fetch_object () example
Example 1. fbsql_field_name () example
Example 1. fbsql_field_type () example
Example 1. fbsql_list_dbs () example
Example 1. fbsql_list_fields () example
Example 1. fbsql_next_result () example
Example 1. fbsql_num_rows () example
Example 1. fbsql_query () example
Example 2. fbsql_query () example
Example 1. fbsql_read_blob () example
Example 1. fbsql_read_clob () example
Example 1. fbsql_tablename () example
filePro function
The file that fp points to closes.
Returns TRUE on success and FALSE on failure.
The file descriptor must be valid, and must point to a file successfully opened with fopen () or fsockopen ().
% FDF-1.2% âăĎÓ 1 0 obj / FDF / JavaScript / Doc [(PlusOne) (function PlusOne \ (x \) \ r {\ r return x + 1; \ r} \ r)] endobj trailer / Root 1 0 R %% EOF
% FDF-1.2% âăĎÓ 1 0 obj / FDF / Fields 2 0 R endobj 2 0 obj [/ T (foo) / V (bar)] endobj trailer / Root 1 0 R %% EOF
Returns TRUE if the end of file (EOF) or error occurred, otherwise FALSE.
The file descriptor must be valid and point to a file successfully opened with fopen (), popen (), or fsockopen ().
The function forces the immediate writing of all data stored in the output buffer to the file referenced by the fp descriptor.
Returns TRUE on success, otherwise FALSE.
Returns a string containing a single character read from the file referenced by the fp descriptor.
If the end of file (EOF) is, it returns FALSE.
See also fread (), fopen (), popen (), fsockopen (), and fgets ().
Similar to fgets () except. that fgetcsv () parses the read line according to CSV format and returns a field containing the obtained values.
The delimiter is a comma unless you specify another delimiter as an optional third parameter.
Fp must be a valid file descriptor successfully opened with fopen (), popen (), or fsockopen ()
The length must be greater than the longest line in the file (excluding the end-of-line character).
fgetcsv () returns FALSE on error including end-of-file (EOF).
NB
An empty line in a CSV file will be returned as a field with a single NULL field without being evaluated as an error.
Example 1. fgetcsv () example - Reading and printing an entire CVS file
$ row = 1; $ fp = fopen ("test.csv", "r"); while ($ data = fgetcsv ($ fp, 1000, ",")) {$ num = count ($ data); print "p $ num fields in line $ row: br"; $ row ++; for ($ c = 0; $ c $ num; $ c ++) {print $ data [$ c]. "br";}} fclose ($ fp);
Returns a line of length max - 1 byte read from the file. The reading ends if a length of 1 byte has been read, the end of line or the end of the file has occurred (whichever comes first).
Returns FALSE when an error occurs.
The most common pitfalls:
People who have used the 'C' semantics of the fgets function should be aware of the difference in how the end of file is returned.
A simple example:
Example 1. Reading a file line by line
$ fd = fopen ("/ tmp / inputfile.txt", "r"); while (! feof ($ fd)) {$ buffer = fgets ($ fd, 4096); echo $ buffer;} fclose ($ fd);
See also fread (), fopen (), popen (), fgetc (), fsockopen (), and socket_set_timeout ().
Identical to fgets (), but HTML and PHP tags are removed from the read text.
As an optional third parameter, you can specify tags that will not be deleted.
See also fgets (), fopen (), fsockopen (), popen (), and strip_tags ().
Returns the time of the last file access, on error FALSE. The time is returned as a Unix timestamp.
The result of this function is cached.
For more information, see clearstatcache ().
The atime (last access time) of a file usually changes when reading data blocks from the file.
This can have a significant negative effect on system performance if the application accesses a large number of files or directories.
Some Unix filesystems may have atime disabled to increase performance for such applications; such are USENET news spools.
Then this function is irrelevant.
Returns the last modification time of the file inode, on error FALSE. Time is returned as a Unix timestamp.
On most Unix filesystems, a file is considered changed if the data in Inode is changed, ie access rights, owner, group or other metadata are written to Inode. filemtime () (this is what you want to use when you want to create a "Last Modified" entry on a web page) and fileatime ().
On some Unixes, ctime is considered the file creation time.
It is a mistake.
On most Unix filesystems, there is no time to create Unix files.
Returns TRUE if the file specified by filename exists, otherwise FALSE.
file_exists () does not work on remote files; the file to be authenticated must be accessible through the server's filesystem.
This feature is binary safe.
With this feature, you can use the URL as the file name if the "fopen wrappers" option is enabled.
See the fopen () function for more details.
Returns the group ID of the file owner, on error FALSE.
The group ID is in numeric form, use posix_getgrgid () to get the group name.
Identical to readfile (), however, the file is returned as an array.
Each field element corresponds to one line in the file, including the end-of-line character.
You can use the optional second parameter and set it to "1" if you also want to search for the file in include_path.
? php // load a web page into the box and print it $ fcontents = file ('http: //www.php.net'); while (list ($ line_num, $ line) = each ($ fcontents)) {echo "b Line $ line_num: / b". htmlspecialchars ($ line). "br \ n";} // load web page into string $ fcontents = join ('', file ('http: //www.php.net')) ;?
See also readfile (), fopen (), fsockopen (), and popen ().
Returns the inode of the file number, on error FALSE.
Returns the time the file was last modified, with a FALSE error. Time is returned as a Unix timestamp.
This function returns the time when the data blocks were written, ie the time of the last change of the file content.
Use the date () function on the result of this function to obtain a formatted date format for use on Web pages.
Returns the user ID (UID) that owns the file; on error FALSE.
The value is in numeric form, use the posix_getpwuid () function to get the username.
Returns access rights to a file on FALSE error.
Returns the number of fields (columns) in an open filePro database.
See also filepro ().
Returns the column name corresponding to field_number.
Returns the edit type of the column corresponding to field_number.
Returns the width of the column corresponding to field_number.
Reads and verifies the map file and saves the number of columns and info.
There is no locking, so you should avoid modifying your filePro database if it can be opened in PHP.
Returns data from the specified location in the database.
Returns the number of rows in an open filePro database.
Returns the file size on FALSE error.
Returns the file type.
Possible values ​​are fifo, char, dir, block, link, file and unknown.
PHP supports a "portable" way of locking entire files based on a single "advisory" principle (ie all accessing programs must use the same locking system, otherwise it will not work).
flock () works on the fp descriptor, which must belong to an open file. operation is one of the following values:
To obtain a shared lock (read), set the operation to LOCK_SH (resp.
1 in versions up to PHP 4.0.1).
To obtain an exclusive lock (write), set operation to LOCK_EX (resp.
To release the lock (shared or exclusive), set operation to LOCK_UN (resp.
If you do not want the flock () function to block during locking, add LOCK_NB (4 for PHP 4.0.1 versions) to the operation.
flock () allows a simple read / write model that can be used theoretically on all platforms (including most Unixes and probably Windows).
The optional third argument is set to TRUE if the lock should block (EWOULDBLOCK errno condition).
flock () returns TRUE on success, FALSE on error (eg when a lock cannot be created).
On most operating systems, the flock () function is implemented at the process level.
When using a multithreaded server API (such as ISAPI), you cannot rely on file protection against other PHP scripts running in parallel threads of the same server instance!
Example 1. floor () example
Flushes PHP output buffers and any backend that PHP uses (CGI, web server, etc.) Sends all previous output to the user's browser.
Some servers, especially on Win32, buffer output until the script runs, regardless of flush (), and then send browser output.
The browser can also buffer its input before displaying.
For example, Netscape buffers text until it receives the end of a line or the beginning of a tag, and does not display the table until / table gets the outer table.
Output Control function
If filename If filename starts with "http: / /" (uppercase or lowercase), an HTTP 1.0 connection to the appropriate server is opened and a descriptor pointing to the beginning of the document body is returned.
If it does not handle HTTP redirection, you must insert a trailing slash after the directory name.
When filename starts with "ftp: / /" (upper or lower case), an FTP session is opened to the appropriate server and a descriptor is returned to the required file.
If the server does not support passive FTP communication mode, it will fail.
When filename is either "php: // stdin", "php: // stdout", or "php: // stderr", standard input / output (stdio) will be opened. (This applies from PHP 3.0.13; earlier versions must use names like "/ dev / stdin" or "/ dev / fd / 0".)
When filename starts with anything else, an ordinary file (from the filesystem) will be opened and its descriptor returned.
If the opening fails, the function returns FALSE.
mode can be any of the following:
'r' - Open read-only; sets the pointer to the beginning of the file.
'r +' - Open for reading and writing; sets the pointer to the beginning of the file.
'w' - Open for writing only; sets the pointer to the beginning of the file and truncates the file to zero length.
If the file does not exist, it will try to create it.
'w +' - Open for reading and writing; sets the pointer to the beginning of the file and truncates the file to zero length.
'a' - Open for writing only; sets the pointer to the end of the file, if the file does not exist, it will try to create it.
'a +' -Open for reading and writing; sets the pointer to the end of the file.
You can use the optional third parameter and set it to "1" if you also want to search for the file in include_path.
Example 1. fopen () example
$ fp = fopen ("/ home / rasmus / file.txt", "r"); $ fp = fopen ("/ home / rasmus / file.gif", "wb"); $ fp = fopen ("http: //www.php.net/", "r"); $ fp = fopen ("ftp: // user: password@example.com ", "w");
If you have problems reading and writing to files and you are using PHP as a module to the server, be sure to ensure that the files and directories you use are accessible to the server process.
On Windows, you must exclude all backslashes in the file path specification or use regular slashes (forward) slashes.
$ fp = fopen ("c: \\ data \\ info.txt", "r");
See also fclose (), fsockopen (), socket_set_timeout (), and popen ().
Reads until the end of the file specified by the descriptor is reached and overwrites the read into standard output.
If an error occurs, the fpassthru () function returns FALSE.
When the fpassthru () function finishes reading, it closes the file (the fp descriptor thus loses its meaning).
If you want to print the contents of the file to standard output (stdout), you can use the readfile () function, which saves you from calling the fopen () function.
See also readfile (), fopen (), popen (), and fsockopen ()
Example 1. sprintf (): zero-padded integers
Example 2. sprintf (): formatting currency
The fputs () function is an alias to fwrite () and is therefore completely identical to it.
Note that the length parameter is optional and if not specified, the entire string is written.
fread () reads at most length bytes from the file specified by the fp descriptor. The read ends if the length bytes are read or the end of the file is reached (whichever comes first).
// load the contents of the file into the string $ filename = "/ usr / local / something.txt"; $ fd = fopen ($ filename, "r"); $ contents = fread ($ fd, filesize ($ filename)); fclose ($ fd);
See also fwrite (), fopen (), fsockopen (), popen (), fgets (), fgetss (), fscanf (), file (), and fpassthru ().
Converts a date from the French Republican calendar to the Julian Day Count.
These routines convert only dates from 1 to 14 (Gregorian dates September 22, 1792 to September 22, 1806).
This more than adequately covers the period for which this calendar has been used.
The fscanf () function is similar to sscanf (), but reads from the specified handle file and interprets the input data according to the specified format.
If the function has only two parameters, the parsed values ​​will be returned as an array.
Otherwise, when optional parameters are used, the function returns a number of assigned values.
Optional parameters must be inserted by reference.
Example 1. fscanf () Example
$ fp = fopen ("users.txt", "r"); while ($ userinfo = fscanf ($ fp, "% s \ t% s \ t% s \ n")) {list ($ name, $ profession, $ countrycode) = $ userinfo; // ... do something with values} fclose ($ fp);
Example 2. users.txt
See also fread (), fgets (), fgetss (), sscanf (), printf (), and sprintf ().
The new position, measured by the number of bytes from the beginning of the file, is obtained by adding the offset value to the position specified by whence, the value of which is defined:
SEEK_SET - Set the position equal to the byte offset.
SEEK_CUR - Set the position to the current plus the number of bytes in offset.
SEEK_END - Set to end of file plus offset bytes.
If the whence parameter is not specified, SEEK_SET is used.
Returns 0 on success, otherwise -1.
Note: moving beyond the end of the file is not considered an error.
Cannot be applied to the file descriptor returned by fopen () if the format "http: / /" or "ftp: / /" was used.
The whence argument was added after PHP 4.0 RC1.
See also ftell () and rewind ().
Initiates a streaming connection in the Internet (AF_INET, using TCP or UDP) or Unix (AF_UNIX) domain.
For the Internet domain, TCP opens the channel to the hostname machine on the port port. in this case, the hostname can be a fully qualified domain name or IP address.
For UDP connections, you must explicitly specify the protocol by prefixing 'udp: //' with the hostname.
In a Unix domain, the hostname used as the socket path port must then be set to 0.
The optional timeout parameter can be used to set the timeout for the connect system call.
As of PHP 4.3.0, if you have compiled PHP with OpenSSL support, you can precede 'hosts' with 'ssl: //' or 'tls: //' to use an SSL or TSL connection to a remote machine over TCP / IP.
fsockopen () returns a file descriptor that can be used with other file functions (such as fgets (), fgetss (), fputs (), fclose (), and feof ()).
If the call fails, the function returns FALSE, and if the optional parameters errno and errstr are present, they will be set to the current error level in the connect () system call.
If the return value in errno is 0 and the function returned FALSE, it means that the error occurred before calling connect ().
This is most often due to a problem initializing the socket.
Note that the errno and errstr arguments are always passed by reference.
Depending on the environment, a Unix domain or an optional timeout parameter may not be available.
The socket opens in blocking mode by default.
Example 1. fsockopen () Example
Using UDP connections
? php $ fp = fsockopen ("udp: //127.0.0.1", 13, $ errno, $ errstr); if (! $ fp) {echo "ERROR: $ errno - $ errstr br \ n";} else {fwrite ($ fp, "\ n"); echo fread ($ fp, 26); fclose ($ fp);}?
The timeout parameter would be introduced in PHP 3.0.9 and UDP support in PHP 4.
Collects statistics of the open file specified by the fp descriptor.
This function is similar to the stat () function, but works with a descriptor, not a file name.
Returns a file statistics field with the following elements:
See clearstatcache () for more details.
Returns the position in the file referenced by the fp descriptor; typically offset in the stream.
If an error occurs, it returns FALSE.
See also fopen (), popen (), fseek () and rewind ().
Functions for working with traffic lights and shared memory
Example 1. ftp_get_option () example
Example 1. ftp_nb_get () example
Example 1. ftp_nb_put () example
Example 1. ftp_put () example
Example 1. ftp_set_option () example
Takes the file specified by fp and shortens it to size.
Returns TRUE on success and FALSE on error.
Returns the argument that is at the arg_num -th position in the argument list of the user-defined function.
Function arguments are counted from zero. func_get_arg () generates a warning when called outside the function definition.
If arg_num is greater than the number of arguments actually passed, it generates a warning and returns FALSE.
func_get_arg () can be used in conjunction with func_num_args () and func_get_args () to create user-defined functions that accept a variable number of arguments.
This feature was added in PHP 4.
Returns an array whose element is the corresponding argument list entry of the current user-defined function. func_get_args () generates a warning when called outside the function definition.
func_get_args () can be used in conjunction with func_num_args () and func_get_arg () to create user-defined functions that accept variable number arguments.
Returns the number of arguments passed to the current user-defined function. func_num_args () generates a warning when called outside the function definition. definition.
Verifies the presence of the function_name function in the list of defined functions.
If the function exists, it returns TRUE, otherwise FALSE.
See also method_exists ().
fwrite () writes the contents of string to the file specified by fp.
If there is a length argument, the write ends when the length bytes are written or when the end of the string is reached, whichever comes first.
Note: if the length argument is given, the magic_quotes_runtime option in the configuration will be ignored and no slashes will be removed from the string.
See also fread (), fopen (), fsockopen (), popen (), and fputs ().
This function returns an associative array of all HTTP headers in the current request.
You can also get the value of common CGI variables by reading them from the environment, which works whether you use PHP as Apache mode or not.
Use phpinfo () to see a list of all system variables defined in this way.
Example 1. getallheaders () Example
$ headers = getallheaders (); while (list ($ header, $ value) = each ($ headers)) {echo "$ header: $ value br \ n";}
This example displays all the headers of the current request.
get_browser () attempts to determine the capabilities of the user's browser.
This is accomplished by searching for browser information in the browscap.ini file.
By default, $ HTTP_USER_AGENT is used; however, you can change this (ie look up information about another browser) by passing the optional user_agent argument.
The information is returned as an object that contains various data elements that represent, for example, the major and minor version numbers and the ID string; TRUE / false property values ​​such as support for frames, JavaScript and cookies, etc.
Although browscap.ini contains information about many browsers, the timeliness of the database depends on user updates.
The file format is relatively easy to understand.
The following example shows how all the information obtained about the user's browser could be listed.
Example 1. get_browser () example
? php function list_array ($ array) {while (list ($ key, $ value) = each ($ array)) {$ str. = "b $ key: / b $ value br \ n";} return $ str; } echo "$ HTTP_USER_AGENT hr \ n"; $ browser = get_browser (); echo list_array ((array) $ browser) ;?
The output from the above script would look something like this:
Mozilla / 4.5 [en] (X11; U; Linux 2.2.9 i586) hr b browser_name_pattern: / b Mozilla / 4 \ .5. * Br b parent: / b Netscape 4.0 br b platform: / b Unknown br b majorver: / b 4 br b minorver: / b 5 br b browser: / b Netscape br b version: / b 4 br b frames: / b 1 br b tables: / b 1 br b cookies: / b 1 br b backgroundsounds: / b br b vbscript: / b br b javascript: / b 1 br b javaapplets: / b 1 br b activexcontrols: / b br b beta: / b br b crawler: / b br b authenticodeupdate: / b br b msn: / b no
For this to work, the browscap directive in your configuration file must point to a valid location in the browscap.ini file.
For more information (including the locations where you can get the browscap.ini file), see the PHP FAQ at http://www.php.net/FAQ.php.
Returns the current value of the PHP configuration variable specified by the varname argument, or FALSE if an error occurs.
It does not return the configuration values ​​set during PHP compilation and does not read the Apache configuration file (using the php3_configuration_option directives).
To determine if your system uses a configuration file, try to obtain the value of the cfg_file_path configuration option.
If available, a configuration file is used.
This function returns the name of the class that is the object instance.
See also get_parent_class (), is_subclass_of ()
This function returns an array of method names defined for the class specified by the class_name argument.
See also get_class_vars (), get_object_vars ()
This function returns an array of default properties of class class_name.
See also get_class_methods (), get_object_vars ()
Returns the owner name of the current PHP script.
See also getmyuid (), getmypid (), getmyinode (), and getlastmod ().
Returns the current working directory.
Returns an associative array containing date (time) information in the timestamp argument or the current local time (if no argument is present), such as the following elements:
"seconds"
"minutes"
"hours"
"mday" - day of the month
"wday" - day of the week, numerically: from 0 (Sunday) to 6 (Saturday)
"mon" - month, numerically
"year" - year, numerically
"yday" - day of the year, numerically; eg "299"
"weekday" - day of the week, text, full name; eg "Friday"
"month" - month, text, full name; eg "January"
Example - getdate ()
This function returns an array of class names defined in the current script.
In PHP 4.0.1pl2, three more classes are returned at the beginning of the array: stdClass (defined in Zend / zend.c), OverloadedTestClass (defined in ext / standard / basic_functions.c) and Directory (defined in ext / standard / dir.c ).
Returns the value of the system variable varname, or FALSE on error.
$ ip = getenv ("REMOTE_ADDR"); // gets the user's IP address
You can view a list of all system variables using phpinfo ().
You will find the meaning of many of them in the CGI specification, especially on the page about system variables.
This function does not work in ISAPI mode.
This function returns the names of all functions defined in the module specified by the module_name argument.
For example, the following lines
See also: get_loaded_extensions ()
If an error occurs, it returns ip_address.
See also gethostbyname ().
Returns the IP address of the computer on the Internet specified by the hostname.
See also gethostbyaddr ().
Returns a list of IP addresses that correspond to the computer on the Internet specified by the hostname.
See also gethostbyname (), gethostbyaddr (), checkdnsrr (), getmxrr (), and the named (8) man page.
get_html_translation_table () returns a translation table that is used internally in the htmlspecialchars () and htmlentities () functions.
Two new constants (HTML_ENTITIES, HTML_SPECIALCHARS) allow you to specify which table you want.
And as with the htmlspecialchars () and htmlentities () functions, you can optionally specify the quote_style you are working with.
The default value is ENT_COMPAT mode.
See the description of these modes at htmlspecialchars ().
Example of a translation table
$ trans = get_html_translation_table (HTML_ENTITIES); $ str = "Hello Woman Krämer"; $ encoded = strtr ($ str, $ trans);
The great thing is that you can use array_flip () to change the translation direction.
See also: htmlspecialchars (), htmlentities (), strtr (), and array_flip ().
Example 1. getimagesize (file)
Example 2. getimagesize (URL)
Example 3. getimagesize () and MIME types
Example 4. getimagesize () returning IPTC
This function returns an associative array of all file names that were loaded into the script using include_once ().
The indexes of this field are the names of the files used in include_once () without the ".php" extension.
As of PHP 4.0.1pl2, this feature assumes that the files in include_once end in ".php", other extensions do not work.
See also: require_once (), include_once (), get_required_files ()
Returns the last time the current page was modified.
The return value is a Unix timestamp, suitable as input for date ().
Example 1. getlastmod () example
// outputs eg 'Last modified:
March 04 1998 20:43:59. ' echo "Last modified:" .date ("F d YH: i: s.", getlastmod ());
See also date (), getmyuid (), get_current_user (), getmyinode (), and getmypid ().
This function returns the names of all modules (extensions) compiled and loaded into the PHP interpreter.
For example, the following line
print_r (get_loaded_extensions ());
Array ([0] = xml [1] = wddx [2] = standard [3] = session [4] = posix [5] = pgsql [6] = pcre [7] = gd [8] = ftp [9] = db [10] = Calendar [11] = bcmath)
See also: get_extension_funcs ().
Returns the current active magic_quotes_gpc setting. (0 for off, 1 for on).
See also get_magic_quotes_runtime (), set_magic_quotes_runtime ().
Returns the currently active magic_quotes_runtime setting. (0 for off, 1 for on).
See also get_magic_quotes_gpc (), set_magic_quotes_runtime ().
Searches DNS for MX records matching hostname.
Returns TRUE if it finds any records; FALSE if nothing is found or an error occurs.
The list of MX records is returned in the mxhosts field.
If the weight field is also specified, it will be filled with the obtained information about the weights of individual Mail Exchangers.
See also checkdnsrr (), gethostbyname (), gethostbynamel (), gethostbyaddr (), and the named (8) man page.
Returns the inode of the current script, or FALSE on error.
See also getmyuid (), get_current_user (), getmypid (), and getlastmod ().
This feature is not supported on Windows systems.
Returns the process ID of the current PHP process, or FALSE on error.
Process IDs are not unique and are therefore a weak source of entropy.
We do not recommend using PIDs in security-dependent environments.
See also getmyuid (), get_current_user (), getmyinode (), and getlastmod ().
Returns the user ID of the current script, or FALSE on error.
See also getmypid (), get_current_user (), getmyinode (), and getlastmod ().
This function returns an associative array of defined properties of the object obj.
Variables declared in a class that is an instance of an instance that has not been assigned a value are not included in the returned field.
Using get_object_vars ()
? php class Point2D {var $ x, $ y; var $ label; function Point2D ($ x, $ y) {$ this - x = $ x; $ this - y = $ y;} function setLabel ($ label) {$ this - label = $ label;} function getPoint () {return array ("x" = $ this - x, "y" = $ this - y , "label" = $ this-label);}} $ p1 = new Point2D (1.233, 3.445); print_r (get_object_vars ($ p1)); // "$ label" is declared but not defined // Array // (// [x] = 1.233 // [y] = 3.445 //) $ p1 - setLabel ("point # 1"); print_r (get_object_vars ($ p1)); // Array // (// [=] = 1.233 // [y] = 3.445 // [label] = point # 1 //)?
See also get_class_methods (), get_class_vars ()
This function returns the name of the parent class of the object obj.
See also get_class (), is_subclass_of ()
getprotobyname () returns the protocol number according to its name (parameter name), as specified in / etc / protocols.
See also: getprotobynumber ().
getprotobynumber () returns the protocol name according to its number (parameter number), as specified in / etc / protocols.
See also: getprotobyname ().
This function returns an associative array of all file names that were loaded into the running script using require_once ().
The following example
? php require_once ("local.php"); require_once (".. / inc / global.php"); for ($ i = 1; $ i 5; $ i ++) include "util". $ i. "php"; echo "Required_once files \ n"; print_r (get_required_files ()); echo "Included_once files \ n"; print_r (get_included_files ()) ;?
See also: require_once (), include_once (), get_included_files ()
This is the interface to that getrusage (2).
Returns an associative array containing all the data returned by the system call.
If who is 1, getrusage is called with RUSAGE_CHILDREN.
All items are accessible through their documented names.
Getrusage example
$ dat = getrusage (); echo $ dat ["ru_nswap"]; # number of swaps echo $ dat ["ru_majflt"]; # number of page faults echo $ dat ["ru_utime.tv_sec"]; # used user time (seconds) echo $ data ["ru_utime.tv_usec"]; # used user time (microseconds)
Based on the / etc / services file, the protocol is either "tcp" or "udp" (lower case).
See also: getservbyport ().
getservbyport () returns an Internet service according to the port and protocol parameters as specified in / etc / services. protocol is "tcp" or "udp" (lowercase).
See also: getservbyname ().
This function returns the translated string if it finds it in the translation table, or the passed string if it does not find it.
You can use an underscore as an alias for this function.
Example 1. gettext () -check
? php // Set language to German putenv ("LANG = de"); // Specify location of translation tables bindtextdomain ("myPHPApp", ". / Locale"); // Choose domain textdomain ("myPHPApp"); // Print a test message print (gettext ("Welcome to my PHP Application"));
This is the interface to calling gettimeofday (2).
Returns an associative array containing the data returned by this system call.
"sec" - seconds
"usec" - microseconds
"minuteswest" - minutes west of Greenwich
"dsttime" - type of daylight saving time correction
Identical to the date () function except that the return time is Greenwich Mean Time (GMT).
For example, when running in Finland (GMT +0200), the first line below shows "Jan 01 1998 00:00:00", while the second line "Dec 31 1997 22:00:00".
Example - gmdate ()
See also date (), mktime (), gmmktime (), and strftime ().
Identical to mktime (), except that the parameters represent the date / time in GMT.
HTTP function
It behaves the same as strftime (), but the time returned is in Greenwich Mean Time (GMT).
For example, when run at EST time (Eastern Standard Time, GMT -0500), the first line prints "Dec 31 1998 20:00:00" below, while the second displays "Jan 01 1999 01:00:00".
Example 1. gmstrftime () example
See also strftime ().
The valid range of the Gregorian calendar is 4714 BC to 9999 AD
Although this software handles data up to 4714 BC, such use probably doesn't make sense.
The Gregorian calendar was not established until October 15, 1582 (October 5, 1582 according to the Julian calendar).
Some countries adopted it much later, Greece in
Most European states used the Julian calendar before the Gregorian calendar.
Example 1. gzopen () Example
The header () function is used at the beginning of an HTML file to send HTTP headers.
For more information on HTTP headers, see HTTP 1.1 Specifications.
Remember that the header () function must be called before any normal output is sent, either by normal HTML tags or from PHP.
A very common mistake is to load code using include () or auto_prepend and have blank lines in that code, which causes the output to be sent before calling the header () function.
There are two special cases of calling the header () function.
The first is the "Location" header.
It not only sends the browser header, but also returns the REDIRECT status code to Apachi.
From the script writer's point of view, this shouldn't be important, but it's important for people who understand the insides of Apache.
header ("Location: http: //www.php.net"); / * Redirect browser to PHP web site * / exit; / * Make sure the next code does not execute after redirection. * /
The second special case is all headers starting with "HTTP /" (case does not matter).
For example, if your Apache 404 ErrorDocument directive points to a PHP script, it wouldn't matter if it actually generated a 404.
The first thing you should do in this script will be:
header ("HTTP / 1.0 404 Not Found");
PHP scripts often generate dynamic HTML that must not be cached by the user's browser or by any proxies between the server and the user's browser.
Many proxies and clients can be forced to turn off caching with help
header ("Expires:
Mon, 26 Jul 1997 05:00:00 GMT "); / / past date header (" Last-Modified: ". Gmdate (" D, d MYH: i: s ")." GMT "); / / always modified header ("Cache-Control: no-cache, must-revalidate"); // HTTP / 1.1 header ("Pragma: no-cache"); // HTTP / 1.0
See also headers_sent ()
This function returns TRUE if HTTP headers have already been sent, otherwise FALSE.
See also header ()
This function is similar to hebrev () except that it converts line breaks (\ n) to "br \ n".
The optional argument max_chars_per_line indicates the maximum number of characters per line of output.
The function tries not to break words.
See also: hebrev ().
See also: hebrevc ().
Example 1. hexdec () example
The highlight_file () function prints the highlighted syntax of the code contained in the filename using the colors defined in the syntax highlighter built into PHP.
Returns TRUE on success, otherwise FALSE (PHP 4).
Creating a syntax-highlighting URL
To create a URL that highlights the syntax of any script you pass to it, we'll use the "ForceType" Apache directive to create a nice URL formula, and use the highlight_file () function to print a nice-looking code listing.
Add the following to your httpd.conf:
And then create a file named "source" and place it in your web root directory.
HTML HEAD TITLE View Source / TITLE / HEAD BODY BGCOLOR = "white"? Php $ script = getenv ("PATH_TRANSLATED"); if (! $ script) {echo "BR B ERROR:
Script name required! / B BR ";} else {if (ereg (" (\. Php_BAR _ \. Inc) $ ", $ script)) {echo" H1 File source: $ PATH_INFO / H1 \ n HR \ n "; highlight_file ($ script );} else {echo "H1 ERROR:
Only .php or .inc files are allowed! / H1 ";}} echo" HR Processed: ".date (" Y / M / d H: i: s ", time ()) ;? / BODY / HTML
You can then use a URL like the one below to display the colored version of the script located in "/path/to/script.php" on your site.
See also highlight_string (), show_source ().
The highlight_string () function prints a color-highlighted version of str using the colors defined in the syntax highlighter built into PHP.
See also highlight_file (), show_source ().
This function is identical to htmlspecialchars (), except that all characters that have corresponding entities are converted to HTML entities.
Like htmlspecialchars (), it accepts an optional second argument that indicates what should happen to single and double quotes.
ENT_COMPAT (default) converts only double quotes, ENT_QUOTES converts double and single quotes, and ENT_NOQUOTES leaves both single and double quotes without conversion.
Currently, ISO-8859-1 is used as the default character set.
An optional second argument was added in PHP 3.0.17 and PHP 4.0.3.
Like htmlspecialchars (), you can use the third parameter to set the character set to use when converting a string.
This third parameter was added in PHP 4.1.0.
There is no feedback function.
Anyway, you can create your own.
Reverse htmlentities ()
? php function unhtmlentities ($ string) {$ trans_tbl = get_html_translation_table (HTML_ENTITIES); $ trans_tbl = array_flip ($ trans_tbl); return strtr ($ string, $ trans_tbl);}?
See also: htmlspecialchars () and nl2br ().
Some characters have a special meaning in HTML, and if they are to retain their normal meaning, they should be represented by HTML entities.
This function returns the string in which some of these conversions occurred; the translations that are most useful in everyday web programming are performed.
If you require the translation of all HTML character entities, use htmlentities ().
This feature is useful if you want to protect yourself against possible HTML in user-supplied text, such as guestbook or newsgroup applications.
The optional second argument, quote_style, specifies what should happen to single and double quotes.
The default mode, ENT_COMPAT, is a backward compatible mode, converting only double quotes and leaving single quotes untranslated.
If you enter ENT_QUOTES, single and double quotes are translated, and if you enter ENT_NOQUOTES, both types remain untranslated.
The following translations occur:
'' (ampersand) becomes 'amp;'
'"' (double quotes) becomes 'quot;' when ENT_NOQUOTES is not set.
'' '(single quotation mark) becomes' # 039; 'only when ENT_QUOTES is set.
'' (less than) becomes 'lt;'
'' (greater than) becomes 'gt;'
Sample htmlspecialchars ()
Note: this function only performs the above translations.
For a complete translation of entities, see htmlentities ().
See also: htmlentities () and nl2br ().
Example 1. modifying an attribute
Example 2. adding a completely new attribute
Example 3. modifying Title attribute
Example 4. modifying Title attribute
Example 5. removing attribute
Example 1. ibase_connect () example
Example 1. iconv_get_encoding () example:
Example 1. iconv () example:
Example 1. iconv_set_encoding () example:
This feature sets whether disconnecting the client should cause the script to terminate.
Returns the previous setting, and when called without an argument does not change the current setting, it only returns it.
For a complete explanation, see the description in the Connection Handling section in the Properties chapter
The PHP version of Windows does not currently support remote file access for this feature, even when the allow_url_fopen option is active.
Example 1. imagesetstyle () example
Example 1. imagettftext () example
Example 1. imagetypes
Example 1. image_type_to_mime_type (file)
Example 1. imap_append () example
Example 1. imap_createmailbox () example
Example 1. imap_delete () Example
Example 1. imap_fetch_overview () example
Table 3.
Example 1. imap_getmailboxes () example
Example 1. imap_get_quota () example
Example 2. imap_get_quota () 4.3 or greater example
Example 1. imap_get_quotaroot () example
Example 1. imap_list () example
Example 1. imap_mailboxmsginfo () example
Example 1. imap_mail_compose () example
Example 1. imap_mime_header_decode () example
Example 1. imap_open () example
Example 1. imap_rfc822_parse_adrlist () example
Example 1. imap_rfc822_write_address () example
Example 1. imap_setflag_full () example
Example 1. imap_set_quota () example
Example 1. imap_status () example
Returns a string containing a string representation of all the elements of the array in the original order with the string glue between every two elements.
Implode sample ()
$ colon_separated = implode (":", $ array);
However, for consistency with explode (), it is recommended that you use a documented sequence of arguments.
See also: explode (), join () and split ().
He looks for a haystack needle and if he finds it, he returns TRUE, otherwise FALSE.
If the third argument is strict TRUE, in_array () also checks the needle type in the haystack.
Example in_array ()
$ os = array ("Mac", "NT", "Irix", "Linux"); if (in_array ("Irix", $ os)) {print "Got Irix";}
Example in_array () with strict argument
// Output will be:
The include () construct inserts and evaluates the specified file.
The description below also applies to require ().
The two constructs are exactly the same, except for how they handle errors. include () produces a Warning, while require () ends with a Fatal Error.
In other words, use require () if you want processing to stop when a file is missing. include () In other words, use require () if you want processing to stop when a file is missing. include () does not behave this way, the script will continue uninterrupted.
Also, make sure that you have the include_path setting in order.
If a file is inserted, then the code in it inherits the context of the variable. If the file is inserted, then the code in it inherits the context of the variable in the line where it was inserted.
All variables available on this line of the calling file will (from now on) also be available on the called file.
Example 12-3.
Basic example - - include ()
vars.php? php $ color = 'green'; $ fruit = 'apple'; test.php? php echo "I see $ color $ fruit"; // I see include 'vars.php'; echo "I see $ color $ fruit"; // Do I see a green apple?
If the insert occurs inside a function in the calling file, then all the code contained in the called file will behave as if it were defined within that function - that is, within the context of the function variables.
Example 12-4.
Inserting within functions
? php function foo () {global $ color; include 'vars.php'; echo "I see $ color $ fruit";} / * vars.php is in the context of foo (), so * * $ fruit is NOT available outside this context. * * Conversely, $ color IS because it is declared * * global. * / foo (); // I see a green apple echo "I see $ color $ fruit"; // I see green?
When inserting a file, parsing goes from PHP mode to HTML mode at the beginning of the file and returns to PHP mode at the end.
For this reason, the executed PHP code in the embedded file must be enclosed between a valid start and end PHP tag.
If "URL fopen wrappers" are enabled in PHP (which is the default), you can specify a file to embed using a URL (via HTTP) instead of a local location.
If the test server interprets the requested file as PHP code, the variables can be referenced using the request URL string as in an HTTP GET.
This is not exactly the same as inserting a file with inheriting the context of variables from the parent file; the script runs on the remote server and the result is then pasted into the local script.
Example 12-5. include () over HTTP
? php / * This example assumes that www.example.com is configured to parse * * .php files and not .txt files.
Thus, 'works' here means that * the * variables $ foo and $ bar are available inside the embedded file. * /// Does not work; file.txt was not processed as www.example.com as PHP include 'http: //www.example.com / file.txt? foo = 1 bar = 2'; // Does not work; looks for the file 'file.php? foo = 1 bar = 2' in the local file system. include 'file.php? foo = 1 bar = 2'; // It works. include 'http: //www.example.com/file.php? foo = 1 bar = 2'; $ foo = 1; $ bar = 2; include 'file.txt'; // It works. include 'file.php'; // It works.?
Because include () and require () are special language constructs, if they are executed conditionally, you must enclose them in a block.
Example 12-6. include () and conditional blocks
? php // This is WRONG and (as mentioned) it won't work. if ($ condition) include $ file; else include $ other; // This is RIGHT. if ($ condition) {include $ file;} else {include $ other;}?
Return service:
Inside the inserted file, you can execute a return () construct to end the execution of the file and return it to the calling script.
It is therefore possible to return values ​​from embedded files.
You can take the value of the include call as if it were a normal function.
In PHP 3, a return must not appear inside a block unless it is a functional block; however, then return () applies to this function and not to the entire file.
Example 12-7. include () a construct return ()
return.php? php $ var = 'PHP'; return $ var ;? noreturn.php? php $ var = 'PHP' ;? testreturns.php? php $ foo = include 'return.php'; echo $ foo; // prints 'PHP' $ bar = include 'noreturn.php'; echo $ bar; // prints 1?
$ bar is 1 because the include statement was successful.
Note the difference between the above examples.
The former uses return () in the embedded file, the latter does not.
Other ways to assign a file value to a variable are the fopen (), file (), and use include () functions together with output control functions.
See also require (), require_once (), include_once (), readfile (), virtual (), and include_path.
The include_once () construct inserts and evaluates the specified file during script execution.
Therefore, it behaves similarly to include (), with the difference that if the code from the file was previously inserted into the script, it will not be inserted again.
As the name suggests, it will be inserted just once.
The include_once () statement should be used in cases where the same file could be inserted and evaluated more than once during script execution, and you want to ensure just one insertion (you must avoid redefining functions, reassigning values, and so on).
For examples of using require_once () and include_once (), see the PEAR code included in the latest PHP source distributions.
The include_once () command was added in PHP 4.0.1pl2.
See also include (), require (), require_once (), get_required_files (), get_included_files (), readfile (), and virtual ().
Example 1. ingres_connect () example
Example 2. ingres_connect () example using default link
Example 1. ingres_fetch_array () example
Example 1. ingres_fetch_object () example
Example 1. ingres_fetch_row () example
Example 1. ingres_query () example
Changes the value of the configuration option, returns FALSE on failure, and the previous value of the configuration option on success.
This is the alias of ini_set ()
See also ini_get (), ini_restore (), ini_set ()
Returns the value of the configuration option on success, FALSE on failure.
See also ini_alter (), ini_restore (), ini_set ()
Resets the configuration option to its original value.
See also ini_alter (), ini_get (), ini_set ()
See also ini_alter (), ini_get (), ini_restore ()
The ip2long () function generates a network IPv4 address from the standard Internet format (dotted numbers).
Example 1. ip2long () Example
? php $ ip = gethostbyname ("www.example.com"); $ out = "The following URLs are equivalent: br \ n"; $ out. = "http: / /www.example.com /, http: / /".$ip." /, and http: / /".sprintf("%u",ip2long($ip)). " / br \ n "; echo $ out ;?
Because an integer in PHP contains a sign and many IP addresses come out as negative, you must always use the sprintf () or printf () functions with the% u formatter to get the correct (non-negative) value.
IP address display
See also: long2ip ()
Example 1. ircg_fetch_error_msg () example
Returns TRUE if the file exists and is a directory.
See also is_file () and is_link ().
Returns TRUE if the file exists and is executable
Returns TRUE if the file exists and is a regular file
See also is_dir () and is_link ().
Returns TRUE if the file exists and is a symbolic link.
See also is_dir () and is_file ().
Returns TRUE if the file exists and can be read from it.
Keep in mind that PHP can access a file with the rights of a web server (usually 'nobody').
Safe mode limitations are not taken into account.
See also is_writable ().
This function returns TRUE if the obj object is an instance of a class that is a superclass subclass, otherwise FALSE.
See also get_class (), get_parent_class ()
This feature is only available on PHP 3 versions 3.0.16 and PHP 4 versions 4.0.2.
Returns TRUE if a file named filename was uploaded using HTTP POST.
This is useful to make sure that an undisciplined user has not tried to modify the script to work with files it should not work with - for example / etc / passwd.
This type of test is especially important if the action on the uploaded files can make their contents available to the user or other users of the system.
See also move_uploaded_file (), and the Handling file uploads section for an example of ease of use.
Returns TRUE if the file exists and can be written to.
The filename argument can be a directory name, then it is determined whether the directory is writable.
See also is_readable ().
Returns the day of the week.
Returns a string or an integer, depending on the mode.
Calendar weekly fashions
Mode
Returns the day number as an integer (0 = sunday, 1 = monday, etc)
Returns a string containing the name of the day of the week (English Gregorian)
Returns a string containing the abbreviated name of the day of the week (English Gregorian)
Returns a string containing the name of the month. mode determines which calendar to convert Julian Day Count to and what type of name to return.
Calendar modes
Gregorian - abbreviated
Gregorian
Julian - abbreviated
Julian
Jewish
Converts Julian Day Count to French Republican Calendar.
Converts a Julian Day Count to a string containing a Gregorian date in "month / day / year" format.
Converts Julian Day Count to Jewish calendar.
Converts a Julian Day Count to a string containing the Julian date in "month / day / year" format.
jdtounix () returns the UNIX timestamp corresponding to the Julian Day Count given in jday or FALSE if jday is outside the UNIX era (Gregorian years between 1970 and 2037, or 2440588 = jday = 2465342)
This feature was added in PHP 4 RC2.
Applicable scope Although this software handles dates up to year 1 (3761 BC), such use probably does not make sense.
The Jewish calendar has been used for several thousand years, but initially there was no formula to determine the beginning of the month.
The new moon began when the new moon was first seen.
The join () function is an alias to implode (), and is the same in all respects.
See also: explode (), implode () and split ().
The valid range for the Julian calendar is 4713 BC to 9999 AD
Although this software handles data up to 4713 BC, such use probably doesn't make sense.
This calendar was created in 46 BC, but the details did not stabilize until at least 8 AD, and possibly until the end of the 4th century.
Moreover, the beginning of the year varied from culture to culture - not all of them accepted January as the first month of the year.
key () returns the index of the current array element.
See also: current () and next ().
Sorts fields in descending order by key, preserving index associations.
This is especially useful when working with associative arrays.
Example 1. krsort () example
$ fruits = array ("d" = "lemon", "a" = "orange", "b" = "banana", "c" = "apple"); krsort ($ fruits); reset ($ fruits); while (list ($ key, $ val) = each ($ fruits)) {echo "$ key - $ val \ n";}
This sample prints:
fruits [d] = lemon fruits [c] = apple fruits [b] = banana fruits [a] = orange
Sort properties can be modified using the optional sort_flags argument, see sort () for details.
See also: asort (), arsort (), ksort (), sort (), natsort (), and rsort ().
Sorts arrays by keys while maintaining index associations.
Example 1. ksort () example
$ fruits = array ("d" = "lemon", "a" = "orange", "b" = "banana", "c" = "apple"); ksort ($ fruits); reset ($ fruits); while (list ($ key, $ val) = each ($ fruits)) {echo "$ key - $ val \ n";}
fruits [a] = orange fruits [b] = banana fruits [c] = apple fruits [d] = lemon
See also: asort (), arsort (), sort (), natsort (), and rsort ().
The second argument was added in PHP 4.
Returns TRUE on success, FALSE on failure. on error.
This function returns XXX Levenshtein-Distance between passed strings, or -1 if the length of one of the passed strings exceeds the 255-character limit (255 should be more than enough for routine comparisons, and no one in their right mind will do genetic analysis in PHP).
Levenshtein distance is defined as the minimum number of characters that you must replace, insert, or delete to change str1 to str2.
The complexity of this algorithm is O (m * n), where we have the lengths str1 and str2 (quite decent compared to similar_text (), which is O (max (n, m) ** 3), but still expensive).
In its simplest form, this function only takes two strings as arguments and counts the number of insertions, replacements, and deletions needed to transform str1 to str2.
The second option adopts three additional arguments that define the cost of insert, replace, and delete operations.
This variant is more general and adaptable than the first variant, but not as powerful.
The third option (not yet implemented) will be the most general and adaptable, but also the slowest alternative.
It will call a user function that determines the cost of all possible operations.
This custom function will be called with the following arguments:
operation to be performed: 'I', 'R' or 'D'
original character in string 1
original character in string 2
position in the chain 1
position in the chain 2
characters remaining in string 1
characters remaining in string 2
This approach offers the possibility to take into account the importance of certain symbols (characters) and / or differences between them, or even the context in which they occur when determining the cost of insertion, modification or deletion, but at the cost of losing all CPU registry usage optimizations and XXX cache misses. which have been incorporated into the previous two variants.
See also: soundex (), similar_text (), and metaphone ().
link () creates a hard link.
See also symlink () for creating symbolic links and readlink () along with linkinfo ().
linkinfo () returns the st_dev field entry of the UNIX C stat structure obtained by the lstat system call.
Returns 0 if FALSE.
See also symlink (), link (), and readlink ().
Like array (), list () Like array (), list () is not actually a function, but a language construct.
Used to assign values ​​to multiple variables in a single operation.
Sample worksheet ()
table tr th Employee name / th th Salary / th / tr? php $ result = mysql ($ conn, "SELECT id, name, salary FROM employees"); while (list ($ id, $ name, $ salary) = mysql_fetch_row ($ result)) {print ("tr \ n". "td a href = \" info.php3? id = $ id \ "$ name / a / td \ n "." td $ salary / td \ n "." / tr \ n ");}? / table
See also: each () and array ().
Example 1. localeconv () example
The localtime () function returns a field structurally identical to the return value of the call in C.
The first argument of the localtime () function is a timestamp; if not given, the current time is used.
The second argument localtime () is is_associative, which (by setting it to zero) signals that the returned field is an ordinary, numerically indexed field.
If the argument is set to 1, then localtime () returns an associative array containing all the elements of the structure returned by the corresponding function call in C.
The key names for this field are as follows:
"tm_sec" - second
"tm_min" - minute
"tm_hour" - hour
"tm_mday" - day of the month
"tm_mon" - month of the year, starting from 0 (January)
"tm_year" - years from 1900
"tm_wday" - day of the week
"tm_yday" - day of the year
"tm_isdst" - daylight saving time applies
The long2ip () function generates an Internet address in dotted format (eg aaa.bbb.ccc.ddd) from a numeric representation of the address.
See also: ip2long ()
Collects statistics about a file or symbolic link identified by the name filename.
This function is identical to the stat () function, except that the filename parameter is a symbolic link - - then information about the link is returned, not the file it points to.
This function truncates unprintable characters from the beginning of the string and returns the truncated string.
The nonprintable characters that are currently being removed are: "\ n", "\ r", "\ t", "\ v", "\ 0", and a single space.
See also: chop (), rtrim () and trim ().
mail () automatically emails the message specified in the message to the recipient specified in it.
You can specify multiple recipients by adding a comma between the addresses in it.
Sending an email.
mail (" rasmus@lerdorf.on.ca ", "My Subject", "Line 1 \ nLine 2 \ nLine 3");
If the fourth argument is passed, its value is inserted at the end of the headers.
This is usually used to add extra headers.
Multiple headers are separated by line spacing.
Sending an email with extra headers.
mail (" nobody@aol.com ", "subject", $ message, "From: webmaster @ $ SERVER_NAME \ nReply-To: webmaster @ $ SERVER_NAME \ nX-Mailer:
Sending a comprehensive email
/ * recipients * / $ recipient. = "Mary mary@u.college.edu ". ","; // note the comma $ recipient. = "Kelly kelly@u.college.edu. ", "; $ recipient. =" ronabop@php.net "; / * subject * / $ subject =" Birthday Reminders for August "; / * message * / $ message. = "The following email contains a formatted ASCII table \ n"; $ message. = "Day \ t \ tMonth \ t \ tYear \ n"; $ message. = "3rd \ t \ tAug \ t \ t1970 \ n "; $ message. =" 17rd \ t \ tAug \ t \ t1973 \ n "; / * you can add signature * / $ message. =" - \ r \ n "; // signature separator $ message . = "Birthday reminder copylefted by public domain"; / * additional headers for bugs, From, cc, bcc, etc. * / $ headers. = "From:
Birthday Reminder birthday@php.net \ n "; $ headers. =" X-Sender: birthday@php.net \ n "; $ headers. =" X-Mailer:
PHP \ n "; // mail client $ headers. =" X-Priorities:
1 \ n "; / / Urgent message! $ Headers. =" Return-Path: birthday@php.net \ n "; / / Return path for errors / * If you want to send an HTML email, uncomment the following line * / / / $ headers. = "Content-Type: text / html; charset = iso-8859-1 \ n "; // Mime type $ headers. =" cc: birthdayarchive@php.net \ n "; // CC $ headers. =" bcc: birthdaycheck@php.net , birthdaygifts @ php .net \ n "; // BCC / * and now we will send it * / mail ($ recipient, $ subject, $ message, $ headers);
Example 1. mb_convert_case () example
Example 1. mb_convert_encoding () example
Example 1. mb_convert_kana () example
Example 1. mb_convert_variables () example
Example 1. convmap example
Example 1. mb_detect_encoding () example
Example 2. mb_detect_order () examples
Example 2. mb_encode_numericentity () example
Example 1. mb_internal_encoding () example
Example 1. mb_output_handler () example
Example 1. mb_preferred_mime_string () example
Example 1. mb_strimwidth () example
Example 1. mb_strtolower () example
Example 1. mb_strtoupper () example
Example 1. mb_substitute_character () example
Example 1. mb_substr_count () example
Example 1. mcrypt_create_iv () example
Example 1. mcrypt_enc_get_algorithms_name () example
Example 1. mcrypt_enc_get_modes_name () example
Example 1. mcrypt_enc_get_supported_key_sizes () example
Example 1. mcrypt_encrypt () Example
Example 1. mcrypt_get_block_size () example
Example 1. mcrypt_get_cipher_name () Example
Example 1. mcrypt_list_algorithms () Example
Example 1. mcrypt_list_modes () Example
Example 1. mcrypt_module_open () Example
Mhash function
Calculates the MD5 XXX hash argument using the MD5 Message-Digest Algorithm of RSA Data Security, Inc.
See also: crc32 ().
Example 1. mdecrypt_generic () Example
Calculates the metaphone key of the argument p.
metaphone (), like soundex (), creates the same key for similar-sounding words.
Metaphone keys have a variable length.
Metaphone was developed by Lawrence Philips lphilips@verity.com.
It is described in ["Practical Algorithms for Programmers", Binstock Rex, Addison Wesley, 1995].
This feature was added in PHP 4.0.
This function returns TRUE if the object has a method_name method defined, otherwise FALSE.
mhash_count () returns the highest available hash id.
Hashs are numbered from 0 to this hash id.
mhash_get_block_size () is used to determine the block size of the hash argument.
mhash_get_block_size () accepts a single argument, a hash, and returns the size in bytes, or FALSE if the hash does not exist.
mhash_get_hash_name () is used to find the name of the specified hash.
mhash_get_hash_name () takes the hash id as an argument and returns the name of that hash, or FALSE if that hash does not exist.
Sample mhash_get_hash_name ()
mhash () applies the hash function specified by the hash argument to the data and returns the resulting hash (also called digest).
If a key is passed, it returns the resulting HMAC.
mhash_keygen_s2k () generates a key that is bytes mhash_keygen_s2k () generates a key that is bytes long from the passed password.
This is the Salted S2K algorithm specified in the OpenPGP document (RFC 2440).
This algorithm uses a hash algorithm to create the key. salt must be different for each key generated and random enough to generate different keys.
Salt must be known when checking keys, so it's a good idea to attach it to a key.
Salt has a fixed length of 8 bytes and if you supply fewer flats, it will be supplemented with zeros.
Remember that user-defined passwords are not suitable for use as keys, because users usually choose the keys they can type on the keyboard.
These passwords use only 6 to 7 bytes per character (or less).
It is very convenient to apply a transformation (such as this function) to the user-specified keys.
Returns the string "msec sec", where sec is the current time measured in seconds from Unix Epoch (0:00:00 January 1, 1970 GMT) and msec is the microsecond portion.
This function is only available on operating systems that support the gettimeofday () system call.
Both parts of the string are returned in units of seconds.
Example - microtime ()
function getmicrotime () {list ($ usec, $ sec) = explode ("", microtime ()); return ((float) $ usec + (float) $ sec);} $ time_start = getmicrotime (); for ($ i = 0; $ i 1000; $ i ++) {// do nothing, 1000 times} $ time_end = getmicrotime (); $ time = $ time_end - $ time_start; echo "Nothing was done $ time seconds";
See also time ().
It will try to create the directory specified by its name.
You probably want to specify the mode as an octal number, but then it should start with zero.
See also rmdir ().
Keep in mind the strange order of arguments, which differs from the order of the arguments in a normal UNIX call to mktime () and which is not very suitable for omitting parameters from right to left (see below).
It is a common mistake to mix these values ​​in a script.
Returns the UNIX timestamp corresponding to the given arguments.
This timestamp is of the "long integer" type and corresponds to the number of seconds between Unix Epoch (1.1.1970) and the specified time.
Arguments can be omitted from right to left; each omitted argument will be set to the current value according to the local date and time.
is_dst can be 1 if the given time belongs to daylight saving time, 0 if it does not belong, or -1 (default value) if it is not possible to determine if the given time belongs to daylight saving time (in this case PHP will try this value can cause unexpected - but not erroneous - results).
The is_dst parameter was added in PHP 3.0.10.
The mktime () function is useful for arithmetic and time data validation because it automatically calculates the correct value for input data outside the allowed range.
For example, each of the following lines prints "Jan-01-1998".
Example - mktime ()
The last day of a given month can be expressed as the "0" day of the next month, not day -1.
Both of the following examples print the string "The last day in Feb 2000 is:
The last day of the month
A date with a year, month, and day equal to zero is considered invalid (it would correspond to November 30, 1999, which is somewhat strange behavior).
See also date () and time ().
Example 1. money_format () Example
this feature is only available in PHP 3 versions 3.0.16 and PHP 4 versions 4.0.2.
This verifies that the file identified by filename is a valid uploaded file (via the HTTP POST mechanism provided by PHP).
If filename is not a valid uploaded file, move_uploaded_file () does nothing and returns FALSE.
If filename is a valid uploaded file but cannot be moved for some reason, the move_uploaded_file () function does nothing and returns FALSE.
See also is_uploaded_file (), and the Handling file uploads section for an example of ease of use.
MySQL Features
Example 1. msql_query ()
Example 1. msql_tablename () example
Note: if the stored procedure returns parameters or a return value these will be available after the call to mssql_execute () Note: if the stored procedure returns parameters or a return value these will be available after the call to mssql_execute () unless the stored procedure returns more than one result set.
Example 1. mssql_next_result () example
mysql_affected_rows () returns the number of records affected by the last use of an INSERT, UPDATE, or DELETE query that matches the join.
If no connection identifier is specified, the last connection opened with mysql_connect () is used.
If you are using transactions, mysql_affected_rows () must be called after an INSERT, UPDATE, or DELETE query, not immediately after the transaction is committed.
If the last DELETE query was without a WHERE part, all records from the table will be deleted, but this function returns zero.
When using UPDATE, MySQL does not store columns in which the new value is the same as the original.
This can cause mysql_affected_rows () to not always exactly match the actual number of rows affected.
mysql_affected_rows () cannot be used with SELECT queries, but only with those that change records.
Use the mysql_num_rows () function to determine the number of rows returned by a SELECT query.
If the last query is incorrect, the function returns -1.
DELETE query
? php / * database connection * / mysql_pconnect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); / * this returns the correct number of deleted records * / mysql_query ("DELETE FROM my_table WHERE id 10"); printf ("Deleted records:% d \ n", mysql_affected_rows ()); / * without using the where clause in a DELETE query, 0 * / mysql_query ("DELETE FROM my_table") will be returned; printf ("Deleted records:% d \ n", mysql_affected_rows ()) ;?
The previous example would have the following output:
Deleted records:
10 Deleted records:
UPDATE query (change)
? php / * database connection * / mysql_pconnect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); / * Change records * / mysql_query ("UPDATE my_table SET used = 1 WHERE id 10"); printf ("Changed records:% d \ n", mysql_affected_rows ()); mysql_query ("COMMIT");
Records changed:
Also: mysql_num_rows (), mysql_info ().
mysql_change_user () changes the logged in user of the current active connection or the connection defined by the optional connection parameter.
If the database parameter is specified, this database is set as the default, otherwise the current database defined in the changed connection remains active.
This feature was added in PHP 3.0.13 and requires the use of MySQL 3.23.3 or higher.
Not available in PHP 4.
Example 1. mysql_client_encoding () example
The mysql_close () function closes the connection with the MySQL server that is associated with a particular connection identifier. If no connection is specified, it closes the last open connection.
Using mysql_close () is usually not necessary because non-persistent open connections are closed automatically after script processing.
See also. release of resources.
Example of MySQL close
? php $ link = mysql_connect ("kraemer", "marliesle", "tajne") or exit ("Unable to connect"); print ("Connection established"); mysql_close ($ link) ;?
See. also: mysql_connect (), and mysql_pconnect ().
If the connection is successful, the connection identifier returns FALSE.
mysql_connect () creates a connection to the MySQL server.
If no optional parameters are specified, the following values ​​are used: server = 'localhost: 3306', username = the name of the user under which the currently running script is running, and password = no password.
The server parameter can contain a port number of "hostname: port" or a socket path of ": / path / to / socket" for localhost.
Support for ": port" was added in PHP 3.0B4.
Support for ": / path / to / socket" was added in PHP 3.0.10.
The error message can be suppressed by adding @ before the function name.
If mysql_connect () is called If mysql_connect () is called a second time with the same parameters, a new connection will not be created, but the existing one will be used and the same connection identifier is returned.
The optional new_connection parameter modifies this behavior, and each call to mysql_connect () always creates a new connection if the mysql_connect () function has been called again with the same parameters.
The new_connection parameter was added in PHP 4.2.0
The connection to the server will be terminated automatically after the script runs, unless the mysql_close () function is called before.
MySQL connection example
? php $ link = mysql_connect ("localhost", "username", "secret") or die ("Unable to connect"); print ("Connection established"); mysql_close ($ link) ;?
See. also mysql_pconnect () and mysql_close ().
mysql_create_db () creates a new database on the server identified by the connection parameter.
MySQL example of creating a new database
? php $ link = mysql_pconnect ("kron", "jutta", "geheim") or exit ("Unable to connect"); if (mysql_create_db ("my_db")) {print ("Database created \ n");} else {printf ("Error creating database:% s \ n", mysql_error ());}?
For backward compatibility, mysql_createdb () can also be used.
However, this is not recommended.
See. also: mysql_drop_db ().
mysql_data_seek () moves the internal MySQL result pointer to the record specified by the record number.
Subsequent calls to mysql_fetch_row () retrieve the required record.
If no record_number is specified, it starts with 0.
The record_number parameter should be a number between 0 and (mysql_num_rows - 1).
The mysql_data_seek () function can only be used in conjunction with mysql_query (), not mysql_unbuffered_query ().
MySQL example of moving the pointer
? php $ link = mysql_pconnect ("kron", "jutta", "geheim") or die ("Unable to connect"); mysql_select_db ("samp_db") or exit ("Unable to select database"); $ query = "SELECT last_name, first_name FROM friends"; $ result = mysql_query ($ query) or die ("Query Error"); // load records in reverse order for ($ i = mysql_num_rows ($ result) - 1; $ i = 0; $ i- -) {if (! mysql_data_seek ($ result, $ i)) {echo "Cannot find record $ i \ n "; continue;} if (! ($ row = mysql_fetch_object ($ result))) continue; echo "$ row - last_name $ row - first_name br / \ n";} mysql_free_result ($ result) ;?
The first parameter of the mysql_db_name () function contains the identifier of the mysql_list_dbs () call.
The record parameter determines the order of the database in the result.
If an error occurs, it returns FALSE.
Use mysql_errno () and mysql_error () to get an error message.
Example 1. mysql_db_name () example
? php error_reporting (E_ALL); mysql_connect ('dbhost', 'username', 'password'); $ db_list = mysql_list_dbs (); $ i = 0; $ cnt = mysql_num_rows ($ db_list); while ($ i $ cnt) {echo mysql_db_name ($ db_list, $ i). "\ n"; $ i ++;}?
For backward compatibility, mysql_dbname () can also be used.
Returns the query result identifier to the specified database, or FALSE if an error occurs
mysql_db_query () queries the database specified by the database parameter.
If the database identifier is not specified, the function will try to find an already open connection to the MySQL server.
If no active connection is found, it tries to create a new connection with the default values ​​of the mysql_connect () function.
See. also mysql_connect () and mysql_query ().
This feature is not supported since PHP 4.0.6.
Use mysql_select_db () and mysql_query () instead.
mysql_drop_db () deletes the database from the server with the specified name under the specified connection identifier.
However, we do not recommend using it.
This notation may not be supported in future versions of PHP.
Instead of using the mysql_drop_db () function, it is recommended that you prefer the mysql_query () function, in which the SQL query with the DROP DATABASE statement is inserted, to delete the database.
See. also: mysql_create_db (), mysql_query ().
Returns the numeric value of the error message raised by the last MySQL function, or 0 (zero) if no error occurred.
Errors returned by MySQL no longer cause a warning error message.
If you need to find the numeric error code, use mysql_errno () or mysql_error () to find the error text.
Note that this function only returns the error code of the last executed MySQL function (does not apply to mysql_error () and mysql_errno ()), so if you use it, you must check the value before calling another MySQL function.
Example 1. mysql_errno Example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password"); mysql_select_db ("does not exist"); echo mysql_errno (). ":". mysql_error (). "\ n"; mysql_select_db ("kossu"); mysql_query ("SELECT * FROM non-existent table"); echo mysql_errno (). ":". mysql_error (). "\ n";
The previous example would display the following output:
Unknown database 'exists' 1146:
Table 'kossu.neexististujicitabulka' doesn 't exist
See. also: mysql_error ()
Returns the error message text of the last MySQL statement, or '' (empty string) if no error occurred.
If you need to find out the error text, use mysql_error () or mysql_errno () to find the numeric error code.
See. also: mysql_errno ()
This function encloses special characters in unmodified_string with a backslash for safe use in mysql_query () (line breaks are replaced by \ n, etc.).
Except that mysql_real_escape_string () modifies the string according to the set character set in the current connection identifier. mysql_escape_string () does not use the connection identifier, nor does it take into account the current character set.
Example 1. mysql_escape_string () example
Also: mysql_real_escape_string (), addslashes () and magic_quotes_gpc directive.
The function returns an array of values ​​of the loaded record, or FALSE if there is no other line.
mysql_fetch_array () is an enhanced version of mysql_fetch_row ().
In addition, the data is stored in the field not only under numeric keys, but also under associative text keys named after the column name of the sql table.
If two or more columns have the same name, only the last one will be available.
If you also want to access the values ​​of other columns, you must create aliases for them in the sql query.
The key name of the column for which the alias is created is always the alias name and therefore it is not possible to use the original column name in the sql table (see 'column' in the following example).
select first_tab.column as first_column second_tab.column as second_column from first_tab, second_tab
Importantly, however, using mysql_fetch_array () is not significantly slower than using mysql_fetch_row () if its use is an added value.
The optional second result_type parameter in mysql_fetch_array () is a constant that can take the following values:
MYSQL_ASSOC, MYSQL_NUM, and MYSQL_BOTH.
This feature was added in PHP 3.0.7.
The default value is MYSQL_BOTH.
Use MYSQL_BOTH to get an array with both associative and numeric keys.
Using MYSQL_ASSOC will get an array with only associative keys (mysql_fetch_assoc () works the same way) and using MYSQL_NUM, you will get an array with only numeric keys (that's how mysql_fetch_row () works).
Example 1. mysql_fetch_array with MYSQL_NUM
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); mysql_select_db ("mojedb"); $ result = mysql_query ("SELECT id, name FROM my_table"); while ($ row = mysql_fetch_array ($ result, MYSQL_NUM)) {printf ("ID:% s Name:% s", $ row [0], $ row [1]);} mysql_free_result ($ result) ;?
Example 2. mysql_fetch_array with MYSQL_ASSOC
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); mysql_select_db ("mojedb"); $ result = mysql_query ("SELECT id, name FROM my_table"); while ($ row = mysql_fetch_array ($ result, MYSQL_ASSOC)) {printf ("ID:% s Name:% s", $ row ["id"], $ row ["name"]);} mysql_free_result ($ result) ;?
Example 3. mysql_fetch_array with MYSQL_BOTH
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); mysql_select_db ("mojedb"); $ result = mysql_query ("SELECT id, name FROM my_table"); while ($ row = mysql_fetch_array ($ result, MYSQL_BOTH)) {printf ("ID:% s Name:% s", $ row [0], $ row ["name"]);} mysql_free_result ($ result) ;?
For more details see. also mysql_fetch_row () and mysql_fetch_assoc ().
The function returns an associative array of values ​​of the returned record, or FALSE if there is no other record.
mysql_fetch_assoc () is an equivalent to mysql_fetch_array () with the optional second parameter MYSQL_ASSOC, which returns only the associative array.
If you need to use numeric indexes along with associative ones, use mysql_fetch_array ().
The key name of the column for which the alias is created is always the alias name, so it is not possible to use the original column name in the sql table.
See the explanation of using aliases in the example for mysql_fetch_array ().
Importantly, however, using mysql_fetch_assoc () is not significantly slower than using mysql_fetch_row () if its use is an added value.
Example 1. mysql_fetch_assoc ()
? php mysql_connect ($ host, $ user, $ password); mysql_select_db ($ database); $ query = "select * from table"; $ result = mysql_query ($ query); while ($ row = mysql_fetch_assoc ($ result)) {echo $ row ["uziv_id"]; echo $ row ["full name"];} mysql_free_result ($ result) ;?
For more details see. also mysql_fetch_row (), mysql_fetch_array () and mysql_query ().
Returns an object containing column information from the result.
You can use mysql_fetch_field () if you need to get column information from a specific result.
If no column order is specified (counted to zero), the function retrieves information about the first following column that has not yet been read.
The properties of the object are:
name - column name
table - the name of the table in which this column is located
max_length - maximum length of the column in characters
not_null - 1 if the column cannot be NULL
primary_key - 1 if the column is a primary key
unique_key - 1 if the column is a unique key
multiple_key - 1 if the column is other than a unique key
numeric - 1 if the column is a number
blob - 1 if the column is BLOB
type - column type
unsigned - 1 if the column is unsigned
zerofill - 1 if the column is padded with zeros to its size
Example 1. mysql_fetch_field ()
BR \ n "; $ meta = mysql_fetch_field ($ result); if (! $ Meta) {echo" No information available BR \ n ";} echo" FOR blob: $ meta - blob max_length: $ meta - max_length multiple_key: $ meta - multiple_key name: $ meta - name not_null: $ meta - not_null numeric: $ meta - numeric primary_key: $ meta - primary_key table: $ meta - table type: $ meta - type unique_key: $ meta - unique_key unsigned: $ meta - unsigned zerofill: $ meta - zerofill / PRE "; $ i ++;} mysql_free_result ($ result) ;?
See. also mysql_field_seek ().
Returns an array containing the length of each column in the last record loaded using mysql_fetch_row (), or FALSE if an error occurs.
mysql_fetch_lengths () contains the lengths of the values ​​of all returned columns of the last record retrieved using mysql_fetch_row (), mysql_fetch_array (), and mysql_fetch_object () in the array starting with key 0.
See. also: mysql_fetch_row ().
Returns an object whose variables contain the values ​​of the loaded record, or FALSE if there is no other record.
mysql_fetch_object () is similar to mysql_fetch_array (), with one difference - unlike an array, an object is returned.
This means that the result values ​​can only be accessed through the column names and not through their numeric keys (the property name cannot be a number).
? php / * this is the correct notation * / echo $ row-field; / * and this is a misspelling * / echo $ row - 0 ;?
In terms of speed, this function is identical to mysql_fetch_array (), and almost as fast as mysql_fetch_row () (the difference is insignificant).
Example 1. mysql_fetch_object () example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password"); mysql_select_db ($ db); $ result = mysql_query ("select user_id, full name from table"); while ($ row = mysql_fetch_object ($ result)) {echo $ row - uziv_id; echo $ row - full name;} mysql_free_result ($ result) ;?
See. also: mysql_fetch_array () and mysql_fetch_row ().
The function returns a numeric array of values ​​of the loaded record, or FALSE if there is no other record.
mysql_fetch_row () loads one result record into a numbered key field.
Each column value is a separate field value; keys are numbered from 0.
Another call to mysql_fetch_row () returns the next result record, or FALSE if there is no other record.
See. also: mysql_fetch_array (), mysql_fetch_object (), mysql_data_seek (), mysql_fetch_lengths () and mysql_result ().
mysql_field_flags () returns additional information about the specified table column.
Each flag is represented by a single word and is separated by a space so that the output can be easily split using the explode () function.
The returned flags can be as follows (if your version of MySQL supports them): "not_null", "primary_key", "unique_key", "multiple_key", "blob", "unsigned", "zerofill", "binary", "enum", "auto_increment", "timestamp".
You may also encounter the mysql_fieldflags () function for backward compatibility.
However, we do not recommend using this feature as it may not be supported in future versions of PHP.
mysql_field_len () returns the length of the specified column in the table.
You may also encounter the mysql_fieldlen () function for backward compatibility.
mysql_field_name () returns the name of the specified column in the table. the result must be a valid join identifier, and column_number is the order of the columns in the table.
E.g. the order of the third column of the table will be number 2, the fourth column in the table is number 3, etc.
Example 1. mysql_field_name () example
// Table quot; users quot; has the following three columns: // username_ / username // password. $ link = mysql_connect ('localhost', $ user, "secret"); mysql_select_db ($ dbname, $ link) or die ("Unable to connect to database $ dbname"); $ res = mysql_query ("select * from user", $ link); echo mysql_field_name ($ res, 0). "\ n"; echo mysql_field_name ($ res, 2);
user_id password
You may also encounter the mysql_fieldname () function for backward compatibility.
Sets the pointer to the specified column.
If the next call to mysql_fetch_field () does not specify a second parameter (numeric column order), it returns the column information specified in mysql_field_seek ().
See. also: mysql_fetch_field ().
Returns the name of the table that contains the specified column.
You may also encounter the mysql_fieldtable () function for backward compatibility.
mysql_field_type () is similar to mysql_field_name ().
The arguments are identical, only the column type is returned instead of the name.
The column can be of type: "int", "real", "string", "blob", and others described in detail in the MySQL documentation.
MySQL column types
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password"); mysql_select_db ("mysql"); $ result = mysql_query ("SELECT name, number, note, type FROM func"); $ fields = mysql_num_fields ($ result); $ rows = mysql_num_rows ($ result); $ table = mysql_field_table ($ result, 0); echo "Your table '". $ table. "' has". $ fields. "columns and". $ rows. "record (s) \ n"; echo "The table has the following columns: \ n"; for ($ i = 0; $ i $ fields; $ i ++) {$ type = mysql_field_type ($ result, $ i); $ name = mysql_field_name ($ result, $ i); $ len = mysql_field_len ($ result, $ i); $ flags = mysql_field_flags ($ result, $ i); echo $ type. "". $ name. "". $ len. "". $ flags. "\ n";} mysql_free_result ($ result); mysql_close () ;?
The previous example could have the following output:
Your table 'func' has 4 columns and 1 record (s) The table has the following columns: string name 64 not_null primary_key binary int number 1 not_null string note 128 not_null string type 9 not_null enum
You may also encounter the mysql_fieldtype () function for backward compatibility.
mysql_free_result () frees the memory occupied by the result defined by the result connection identifier.
mysql_free_result () should only be used if you care how much memory is used for the executed query during the script and if the result of the query is too large.
Otherwise, all memory occupied by the connection results will not be automatically caught until the end of the script run.
You may also encounter the mysql_freeresult () function for backward compatibility.
mysql_get_client_info () returns a string containing the version of the MySQL client library used.
Example 1. mysql_get_client_info Example
? php printf ("MySQL client info:% s \ n", mysql_get_client_info ());
The previous example might have the following output:
MySQL client info:
Also: mysql_get_host_info (), mysql_get_proto_info () from mysql_get_server_info ().
mysql_get_host_info () returns a string describing the connection type used in the connection, containing the server host name.
If the connection is skipped, it uses the last opened connection.
Example 1. mysql_get_host_info Example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_heslod") or die ("Unable to connect"); printf ("MySQL host info:% s \ n", mysql_get_host_info ()) ;?
Also: mysql_get_client_info (), mysql_get_proto_info () and mysql_get_server_info ().
mysql_get_proto_info () returns the protocol version number of the connection used.
If the connection is skipped, the last opened connection is used.
Example 1. mysql_get_proto_info Example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); printf ("MySQL protocol version:% s \ n", mysql_get_proto_info ()) ;?
MySQL protocol version:
Also: mysql_get_client_info (), mysql_get_host_info () and mysql_get_server_info ().
mysql_get_server_info () returns the version of the server in the used connection.
If the connection is skipped, the last opened connection is used.
Example 1. mysql_get_server_info Example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); printf ("MySQL server version:% s \ n", mysql_get_server_info ()) ;?
MySQL server version:
Also: mysql_get_client_info (), mysql_get_host_info () and mysql_get_proto_info ().
mysql_info () returns detailed information about the last query in the used connection.
If no connection is specified, the last open connection is used.
mysql_info () returns a string from all the queries listed below.
For all others FALSE.
The format of the string depends on the type of query used.
Relevant MySQL queries
VALUES, which lists values ​​for writing multiple records at once.
Also: mysql_affected_rows ()
mysql_insert_id () returns the ID value generated for the AUTO_INCREMENT column by a previous INSERT query identified by the join parameter.
mysql_insert_id () returns 0 if no AUTO_INCREMENT value was generated for the previous query.
Even if you need to use the value later, be sure to call the mysql_insert_id () function immediately after the query for which the value was generated using AUTO_INCREMENT.
The MySQL SQL value of the LAST_INSERT_ID () function always contains the highest last generated value of AUTO_INCREMENT and is not reset among other queries.
mysql_insert_id () converts the type returned by the native MySQL C API function mysql_insert_id () from type long (equivalent in PHP int).
If the AUTO_INCREMENT column is of type BIGINT, the value returned by mysql_insert_id () will be incorrect (only if the value itself is BIGINT).
Instead, use the internal MySQL SQL function LAST_INSERT_ID () directly in the SQL query.
Example 1. mysql_insert_id Example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password") or die ("Unable to connect"); mysql_select_db ("mojedb"); mysql_query ("INSERT INTO table (product) values ​​('scythe')"); printf ("Last inserted record has id:% d \ n", mysql_insert_id ()) ;?
Also: mysql_query ().
mysql_list_dbs () returns a result pointer containing the databases available on the current mysql daemon.
For example, it can be used in conjunction with the mysql_tablename () function to obtain table names, or other functions to obtain additional information about tables.
Example 1. mysql_list_dbs () example
? php $ link = mysql_connect ('localhost', 'myname', 'secret'); $ db_list = mysql_list_dbs ($ link); while ($ row = mysql_fetch_object ($ db_list)) {echo $ row - Database. "\ n";}?
databaze1 databaze2 databaze3 ...
The previous code would easily work with mysql_fetch_row () or similar functions.
You may also encounter the mysql_listdbs () function for backward compatibility.
See. also mysql_db_name ().
mysql_list_fields () returns a result pointer about the columns of the specified table.
The arguments are the database name and the table name.
The returned result pointer can be used in conjunction with the mysql_field_flags (), mysql_field_len (), mysql_field_name (), and mysql_field_type () functions.
Example 1. mysql_list_fields () example
? php $ link = mysql_connect ('localhost', 'myname', 'secret'); $ fields = mysql_list_fields ("database1", "table1", $ link); $ columns = mysql_num_fields ($ fields); for ($ i = 0; $ i $ columns; $ i ++) {echo mysql_field_name ($ fields, $ i). "\ n";}?
column1 column2 column3 ...
You may also encounter the mysql_listfields () function for backward compatibility.
mysql_list_processes () returns a pointer describing the current server threads.
Example 1. mysql_list_processes () example
? php $ link = mysql_connect ('localhost', 'mysql_name', 'mysql_password'); $ result = mysql_list_processes ($ link); while ($ row = mysql_fetch_row ($ result)) {printf ("% s% s% s% s% s \ n", $ row ["Id"], $ row ["Host"], $ row ["db "], $ row [" Command "], $ row [" Time "]);} mysql_free_result ($ result) ;?
The previous example would display the following output:
mysql_list_tables () Based on the database name, returns a result pointer to the tables just like mysql_db_query ().
You can use the mysql_tablename () function to find the names of all the tables in the result indicator, or use other functions to find out more information, such as mysql_fetch_assoc ().
The database parameter is the name of the database from which the table names are to be read.
If an error occurs, mysql_list_tables () returns FALSE.
You may also encounter the mysql_listtables () function for backward compatibility.
Example 1. mysql_list_tables Example
? php $ dbname = 'mysql_dbname'; if (! mysql_connect ('mysql_host', 'mysql_uziv', 'mysql_password')) {print 'Unable to connect'; exit;} $ result = mysql_list_tables ($ dbname); if (! $ result) {print "DB error, unable to read tables \ n"; print 'MySQL error:'. mysql_error (); exit;} while ($ row = mysql_fetch_row ($ result)) {print "Table: $ row [0] \ n";} mysql_free_result ($ result) ;?
Also: mysql_list_dbs (), and mysql_tablename ().
mysql_num_fields () returns the number of columns obtained by the sql query.
Example 1. mysql_num_fields () example
You may also encounter the mysql_numfields () function for backward compatibility.
mysql_num_rows () returns the number of records in the query result.
This statement is only applicable for a SELECT query.
Use mysql_affected_rows () to get the number of records affected by INSERT, UPDATE, or DELETE queries.
Example 1. mysql_num_rows () example
? php $ link = mysql_connect ("localhost", "mysql_uziv", "mysql_password"); mysql_select_db ("database", $ link); $ result = mysql_query ("SELECT * FROM table1", $ link); $ num_rows = mysql_num_rows ($ result); echo "Rows: $ num_rows \ n" ;?
If you use mysql_unbuffered_query (), mysql_num_rows () will not return the correct value until all records in the result have been received.
Also: mysql_affected_rows (), mysql_connect (), mysql_data_seek (), mysql_select_db () and mysql_query ().
You may also encounter the mysql_numrows () function for backward compatibility.
Creates a persistent connection with the MySQL server and returns the connection identifier.
Returns FALSE on unsuccessful connection attempt.
If the function is called without optional parameters, the following default values ​​are assumed: server = 'localhost: 3306', name = process owner name, and password = blank password.
The server parameter can contain a port number in the style "hostname: port" or a socket path in the style ": / path / to / socket" for localhost.
Support for ": / path / to / socket" was added in PHP 3.0.10.
The mysql_pconnect () function is very similar to the mysql_connect () function with two main differences.
First, the function first tries to find an existing (persistent) connection open on the same port under the same name and password.
If such a connection is found, it will be used instead of creating a new one.
Second, the connection to the SQL server will not be closed when the script runs.
It will remain open for use in other scripts that are yet to run (mysql_close () will not close persistent connections created with mysql_pconnect ()).
Therefore, this type of connection is called 'persistent'.
Persistent connection only works when PHP is running as a module (not CGI).
You can find more about this issue in the Persistent Database Connections section.
Using a persistent connection may require minor modifications to the Apache and MySQL configuration to ensure that the maximum limit of allowed connections to MySQL is not exceeded.
mysql_ping () tests whether or not there is a connection to the server.
If the connection is lost, it will automatically try to create a new connection.
This feature can be used in scripts that remain idle for a long time to determine if the connection to the server is already closed and, if necessary, automatically establish a new connection. mysql_ping () returns TRUE if a connection is established, otherwise FALSE.
Also: mysql_thread_id (), mysql_list_processes ().
mysql_query () Queries the current connection in the active database on the server and returns the result identifier.
If no connection parameter is specified, it uses the last opened connection.
If no open connection is found, the function will try to create it using the default values ​​of the mysql_connect () function (as if called without parameters)
Note: The query string should not end with a semicolon.
Only when using a SELECT query is the result identifier returned, or FALSE if an error occurred while executing the query.
For other query types, mysql_query () returns TRUE on successful query or FALSE on error.
No - FALSE return value means that the query was executed by the server without errors.
This function does not record any data on the number of affected or returned rows.
You can only find out if the query was successful.
The following query is syntactically incorrect, so its execution in mysql_query () fails and returns FALSE:
Example 1. mysql_query ()
php $ result = mysql_query ("SELECT * WHERE 1 = 1") or die ("Wrong query!") ;?
The following query is semantically incorrect, my_col is not a column in the my_tbl table, so mysql_query () fails and returns FALSE:
Example 2. mysql_query ()
? php $ result = mysql_query ("SELECT my_col FROM my_tbl") or exit ("Wrong query!");
mysql_query () also always fails and returns FALSE if you do not have sufficient access permissions to the table (s) specified in the query.
If you need to find out the number of records returned by a SELECT query, then use the mysql_num_rows () function or the mysql_affected_rows () function, if you need to find out the number of all affected records by DELETE, INSERT, REPLACE or UPDATE queries.
Only when a SELECT query does mysql_query () return a new query identifier, which can be used, for example, to call the mysql_fetch_array () function and other functions to process query results.
If you no longer need the contents of the query result, you can free memory by calling the mysql_free_result () function.
However, the memory will still be freed automatically at the end of the script run.
See. also: mysql_num_rows () mysql_affected_rows (), mysql_unbuffered_query (), mysql_free_result (), mysql_fetch_array (), mysql_fetch_row (), mysql_fetch_assoc (), mysql_result (), mysql_select_s), mysql_s
This function encloses special characters in unmodified_string with a backslash for safe use in mysql_query (), depending on the current join character set (line breaks are replaced by \ n, etc.).
Example 1. mysql_real_escape_string () example
Also: mysql_escape_string (), mysql_character_set_name ().
mysql_result () returns single column records from the MySQL result.
Arguments can be column number, column name, table name, or table name dot column name (table.column).
If any column has a named alias (SELECT my_column and your_column FROM ...), use the alias instead of the column name.
If you are working with large records, you should consider using one of the functions that returns the entire record (all columns specified in the SELECT query at once), because these functions return the entire result in a single function call and are therefore MUCH faster than mysql_result ().
It should also be noted that it is much faster to specify a numeric identifier as a column argument than a column name or a table.column entry.
Calling mysql_result () should not be confused with calling other functions, as this would split records from the result.
Much more powerful alternatives are recommended: mysql_fetch_row (), mysql_fetch_array () and mysql_fetch_object ().
mysql_select_db () sets the current database on the server and associates it with the specified connection identifier.
If no connection identifier is specified, it uses the last opened connection.
If no connection is open, the function tries to create it as if mysql_connect () had been called without parameters.
Each subsequent call to mysql_query () will be created on a valid database.
See. also: mysql_connect (), mysql_pconnect () and mysql_query ().
You may also encounter the mysql_selectdb () function for backward compatibility.
mysql_stat () returns the current state of the system.
You must use the SHOW STATUS sql query for a complete listing of the states of other variables.
Example 1. mysql_stat () command
? php $ link = mysql_connect ('localhost', "mysql_uziv", "mysql_password"); printf ("% s \ n", mysql_stat ($ link)) ;?
the previous example would display the following output:
Uptime:
5380 Threads:
1 Questions:
1321299 Slow queries:
1 Opens:
26 Flush tables:
1 Open tables:
17 Queries per second avg:
245.595
mysql_tablename () takes the result identifier returned by mysql_list_tables (), which is an integer index, and returns the table name.
The mysql_num_rows () function can be used to specify an integer index.
Example 1. mysql_tablename () Example
? php mysql_connect ("localhost", "mysql_uziv", "mysql_password"); $ result = mysql_list_tables ("mojedb"); for ($ i = 0; $ i mysql_num_rows ($ result); $ i ++) printf ("Table:% s \ n", mysql_tablename ($ result, $ i)); mysql_free_result ($ result) ;?
Also: mysql_list_tables ().
mysql_thread_id () Returns the id of the current thread.
If the connection is lost and reestablished using mysql_ping (), the article id will be different.
Example 1. mysql_thread_id () example
? php $ link = mysql_connect ('localhost', 'mysql_uziv', 'mysql_password'); $ thread_id = mysql_thread_id ($ link); if ($ thread_id) {printf ("current thread id is% d \ n", $ thread_id);}?
the id of the current thread is 73
Also: mysql_ping (), mysql_list_processes ().
mysql_unbuffered_query () sends an SQL query to MySQL without loading and buffering the resulting records automatically, as the mysql_query () function does.
On the one hand, this behavior saves a significant amount of memory used for SQL queries that produce large results.
On the other hand, you can start working on the result immediately after the first record that was returned; ie you do not have to wait until the entire SQL query is executed.
If you use the DB-connects switch, you can specify an optional join parameter.
Note: each advantage of mysql_unbuffered_query () costs something:
You cannot use the mysql_num_rows () function to determine the number of records returned by mysql_unbuffered_query ().
In addition, you must retrieve all records returned by the unbuffered query before submitting a new SQL query to MySQL.
See. also: mysql_query ().
This function implements a comparison algorithm that sorts alphanumeric strings in the same way as a human, this is described as "natural sorting".
natcasesort () is a case-insensitive version of natsort ().
For an example of the difference between this algorithm and common computer string sorting, see natsort ().
See Martina Poola's Natural Order String Comparison for more information.
See also: sort (), natsort (), strnatcmp () and strnatcasecmp ().
Example of the difference between this algorithm and common computer algorithms for sorting strings (eg sort ()):
Natsort sample ()
$ array1 = $ array2 = array ("img12.png", "img10.png", "img2.png", "img1.png"); sort ($ array1); echo "Standard sorting \ n"; print_r ($ array1); natsort ($ array2); echo "\ nNatural sorting \ n"; print_r ($ array2);
The above code will generate the following output:
Standard Array ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Natural Array ([3] = img1.png [2] = img2. png [1] = img10.png [0] = img12.png)
See also: natcasesort (), strnatcmp () and strnatcasecmp ().
Example 1. ncurses_getmouse () example
Example 1. ncurses_mousemask () example
Returns the next element of the array, or FALSE if the elements have run out.
next () behaves like current (), with one difference: it moves the internal pointer of the array by one element and returns the element that the pointer points to after the move.
That is, it returns the next element of the array and moves the internal pointer by one.
If the pointer points outside the field after the psun, next () returns FALSE.
If this field contains empty elements or elements whose index is 0, this function returns FALSE for these elements as well.
Use each () to properly traverse an array that may contain empty elements or elements with index 0.
See also: current (), end (), prev () and reset ().
Returns a string in which the 'BR' tag is inserted before each end of line.
See also: htmlspecialchars (), htmlentities () and wordwrap ().
Example 1. number_format () Example
This function discards the contents of the output buffer and turns off output buffering.
See also ob_start () and ob_end_flush ().
This function sends the contents of the output buffer (if any) and turns off output buffering.
If you want to further process the contents of the output buffer, you must call ob_get_contents () before ob_end_flush (), because the contents of the buffer are discarded after ob_end_flush ().
See also ob_start (), ob_get_contents () and ob_end_clean ().
This function returns the contents of the output buffer, or FALSE if output buffering is not enabled.
See also ob_start () and ob_get_length ().
This function returns the length of the contents of the output buffer, or This will return the length of the contents of the output buffer, or FALSE if output buffering is not enabled.
See also ob_start () and ob_get_contents ().
Example 1. ob_gzhandler () Example
Example 1. ob_iconv_handler () example:
ob_implicit_flush () disables or enables default flushing (if no flag is received, default is on).
Implicit flushing causes a flush after each output generation, so explicit flush () calls are no longer needed.
Enabling default flushing cancels the output buffer, and the current contents of the output buffers are sent as when ob_end_flush () is called.
See also flush (), ob_start () and ob_end_flush ().
This feature turns on output buffering.
If output buffering is enabled, no output from the script is sent, instead it is stored in the internal buffer.
The contents of this internal buffer can be copied to a variable of type string using ob_get_contents ().
Use ob_end_flush () to send the contents of the internal buffer.
In contrast, ob_end_clean () silently deletes the contents of the output buffer.
You can specify an optional callback function name that is automatically called with the contents of the buffer as an argument.
This function will be called when ob_end_flush () and gets the contents of the output buffer as its argument.
It must return a new output buffer, which is then printed.
Output buffers can be stacked, ie. you can call ob_start () while another ob_start () is active.
Only the correct number of calls to ob_end_flush () () is needed.
If multiple output callback functions are active, the output is filtered sequentially through each of them as they are nested.
Sample callback function
? php function c ($ str) {/ / Druu Chunusun mut dum Kuntrubuß ... return nl2br (ereg_replace ("[aeiou]", "u", $ str));} function d ($ str) {return strip_tags ( $ str);}? ? php ob_start ("c");
Three Chinese with the double bass ...? Php ob_start ("d") ;? h1 ..saßen auf der Straße und erzählten sich was ... / h1? php ob_end_flush ();? ... da kam die Polizei, ja was ist denn das? ? php ob_end_flush (); ??
See also ob_get_contents (), ob_end_flush (), ob_end_clean (), and ob_implicit_flush ()
OpenSSL function
Executes a statement prepared with odbc_prepare (). Returns TRUE on success, FALSE on failure.
Example 1. odbc_fetch_into () for 4.0.6 example
Example 2. odbc_fetch_into () 4.0.6 example
Example 3. odbc_fetch_into () 4.2.0 example
Returns the directory descriptor usable in subsequent closedir (), readdir (), and rewinddir () calls.
openlog () opens a connection to the system log for the program.
An ident string is added to each message.
The values ​​for option and facility are listed below.
The option parameter is used to specify which options will be used when generating the report.
The facility argument specifies what type of program records the message.
This allows you to specify (in the system log configuration on your computer) how messages coming from different sources will be handled.
Using openlog () is optional.
Called automatically from syslog () if needed; in this case, the ident will be FALSE by default.
Table 1. openlog () Options
Constant
Description
in the event of an error while sending data to the log, write directly to the system console
immediately open the connection to the log
(default) does not open the connection until the first message is written
print reports also to standard error output (stderr)
add a PID to each message
Table 2. openlog () Characters
security / authorization messages (use LOG_AUTHPRIV instead on systems where this constant is defined)
security / authorization messages (private)
time demon (cron and at)
other system daemons
kernel messages
reserved for local use
printer subsystem
mail subsystem
USENET news subsystem
messages generated internally by the syslogd daemon
generic user messages
UUCP subsystem
See also define_syslog_variables (), syslog () and closelog ().
Example 1. openssl_csr_new () example - creating a self-signed-certificate
Example 1. openssl_csr_sign () example - signing a CSR (how to implement your own CA)
Example 1. openssl_error_string () example
openssl_free_key () frees the key associated with the passed key_identifier from memory.
Returns the key on success, FALSE on error.
The optional passphrase argument must be passed if this key is encrypted (password protected).
Returns the key identifier on success, FALSE on error.
openssl_get_publickey () extracts the public key from the X.509 certificate and prepares it for use in other functions.
Returns TRUE on success and FALSE on error.
Successfully opened data is placed in the open_data argument.
openssl_open () opens (decodes) sealed_data using the private key associated with the priv_key_id and the env_key envelope.
This envelope is generated during data sealing and can only be used with one private key.
See openssl_seal () for more information.
Sample openssl_open ()
// $ sealed and $ env_key contain sealed data and an envelope // both were given to us by who sealed the data // retrieve the private key from the file and prepare it $ fp = fopen ("/ src / openssl-0.9.6 / demos / sign / key.pem "," r "); $ priv_key = fread ($ fp, 8192); fclose ($ fp); $ pkeyid = openssl_get_privatekey ($ priv_key); // decode the data and save it in $ open if (openssl_open ($ sealed, $ open, $ env_key, $ pkeyid)) echo "here is the open data:", $ open; else echo "failed to open data"; // release key from memory openssl_free_key ($ pkeyid);
See also openssl_seal ().
Example 1. openssl_pkcs7_decrypt () example
Example 1. openssl_pkcs7_encrypt () example
Example 1. openssl_pkcs7_sign () example
Returns the length of the sealed data on success, FALSE on error.
Successfully sealed data is placed in the sealed_data argument, and the envelope is placed in env_keys.
openssl_seal () seals (encrypts) data using RC4 with a randomly generated secret key.
This key is encrypted with all public keys associated with identifiers in pub_key_ids, and the encrypted keys are returned in env_keys.
This means that sealed data can be sent to multiple recipients (provided we have their public keys).
Each recipient must receive sealed data and an envelope that has been encrypted with its public key.
Sample openssl_seal ()
// $ data contains data to seal // get public keys of our recipients and prepare them $ fp = fopen ("/ src / openssl-0.9.6 / demos / maurice / cert.pem", "r"); $ cert = fread ($ fp, 8192); fclose ($ fp); $ pk1 = openssl_get_publickey ($ cert); // repeat the second recipient $ fp = fopen ("/ src / openssl-0.9.6 / demos / sign / cert.pem", "r"); $ cert = fread ($ fp, 8192); fclose ($ fp); $ pk2 = openssl_get_publickey ($ cert); // seal the message, only owners $ pk1 and $ pk2 can decode $ sealed using // $ ekeys [0] and $ ekeys [1]. openssl_seal ($ data, $ sealed, $ ekeys, array ($ pk1, $ pk2)); // release keys from memory openssl_free_key ($ pk1); openssl_free_key ($ pk2);
See also openssl_open ().
The successfully created signature is placed in the signature.
openssl_sign () calculates the signature for the specified data using a SHA1 hash and then encrypts it with the private key associated with priv_key_id.
Note: the data itself is not encrypted.
Example 1. openssl_sign () example
/ / $ data contains the data to be signed / / get the private key from the file and prepare it $ fp = fopen ("/ src / openssl-0.9.6 / demos / sign / key.pem", "r"); $ priv_key = fread ($ fp, 8192); fclose ($ fp); $ pkeyid = openssl_get_privatekey ($ priv_key); // create signature openssl_sign ($ data, $ signature, $ pkeyid); // release key from memory openssl_free_key ($ pkeyid);
See also openssl_verify ().
Returns 1 if the signature is correct, 0 if it is incorrect, and -1 on error.
openssl_verify () verifies that the signature is correct for the data using the public key associated with pub_key_id.
This must be the public key corresponding to the private key used for signing.
Sample openssl_verify ()
// $ data and $ signature contain data and signature // get the public key from the certificate and prepare it $ fp = fopen ("/ src / openssl-0.9.6 / demos / sign / cert.pem", "r"); $ cert = fread ($ fp, 8192); fclose ($ fp); $ pubkeyid = openssl_get_publickey ($ cert); // find out if the signature is ok $ ok = openssl_verify ($ data, $ signature, $ pubkeyid); if ($ ok == 1) echo "good"; elseif ($ ok == 0) echo "wrong"; else echo "worst, an error occurred while checking the signature"; // release key from memory openssl_free_key ($ pubkeyid);
See also openssl_sign ().
Table 1. openssl_x509_checkpurpose () purposes
Example 1. ora_fetch_into ()
Returns the ASCII value of the first character in a string.
This function complements chr ().
if (ord ($ str) == 10) {echo "The first character of \ $ str is a line feed. \ n";}
See also: chr ().
PDF function
Example 1. ovrimos_connect () Example
Example 3. ovrimos_result_all example
Collapses the passed arguments into a binary string according to the format argument.
Returns a binary string containing the passed data.
The idea for this feature was taken from Perl, and all formatting codes work the same as there, however, some formatting codes are missing, such as the Perl formatting code "u".
The format string consists of formatting codes followed by an optional repeat argument.
The repeat argument can be either an integer value or * to repeat until the end of the input data.
U a, A, h, H the number of repetitions determines how many characters are taken from one data argument, u @ is the absolute position where other data should be placed, for everything else the number of repetitions determines how many data arguments are consumed and packed into the resulting binary string.
They are currently implemented
and a string supplemented by NUL values
And a string accompanied by SPACE values
h Hex string, lower syllable first
H Hex string, upper syllable first
with signed short (always 16 bits, machine byte order)
S unsigned short (always 16 bits, machine byte order)
n unsigned short (always 16 bits, big endian byte order)
in unsigned short (always 16 bits, little endian byte order)
i signed integer (size and order of bytes depends on the system)
I unsigned integer (size and order of bytes depending on the system)
l signed long (always 32 bits, machine byte order)
L unsigned long (always 32 bits, machine byte order)
N unsigned long (always 32 bits, big endian byte order)
V unsigned long (always 32 bits, little endian byte order)
f float (system dependent size and representation)
d double (system dependent size and representation)
Example 1. pack () format string
The resulting binary string will be 6 bytes long, and will contain the byte sequence 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
Note that the difference between signed and unsigned values ​​only affects the unpack () function, while the pack () function gives the same result for both unsigned and unsigned formatting codes.
Also note that PHP internally stores integer values ​​as signed values ​​of system-dependent size.
If you enter an unsigned value that is too large to be saved this way, it will double, which often produces undesirable results.
Example 2. parse_ini_file () example
Parses the string as if it were a querystring passed in the URL and defines the appropriate variables in the current scope.
If the second arr argument is passed, the variable is stored in this variable as an array instead.
$ str = "first = value second [] = this + works second [] = another"; parse_str ($ str); echo $ first; / * print "value" * / echo $ second [0]; / * prints "this works" * / echo $ second [1]; / * prints "another" * /
This function returns an associative array of all URL components present in the url.
These can be: "scheme", "host", "port", "user", "pass", "path", "query" and "fragment".
The passthru () function is similar to the exec () function in that it executes a command.
If the return_var argument is present, the return value of this statement is placed here.
This function should be used instead of exec () and system () if the command outputs binary data that needs to be sent directly to the browser.
A common use of this feature is to execute eg pbmplus utilities that can send an image stream to stdout.
By setting the content-type to image / gif and calling the pbmplus program to send the gif to stdout gif, you can create PHP scripts that directly create the images.
See also exec (), system (), popen (), EscapeShellCmd (), and the backtick operator.
Example 1. pathinfo () Example
Closes a pipe opened with the popen () function.
The file descriptor must be valid and point to a pipe successfully opened with popen ().
Returns the return code of the process that was running on the pipe.
See also popen ().
Example 1. pcntl_fork () Example
Example 1. pcntl_signal () Example
Table 1. possible values ​​for pid
Table 2. possible values ​​for options
(PHP 3 = 3.0.12, PHP 4)
The pdf_add_annotation () function adds a note with the lower left corner at (llx, lly) and the upper right corner at (urx, ury).
The bookmark is inserted as a child of parent and is by default open if open is not 0.
Currently this piece of memory is not been freed by any PDF function but it will be taken care of by the PHP memory manager.
Function pdf_arc () function draws an arc with center at point (x-coor, y-coor) and radius radius, starting at angle start and ending at angle end.
See also pdf_circle (), pdf_stroke ().
The pdf_begin_page () function starts a new page with height and width.
If you want to create a valid document, you must call this function and pdf_end_page () at least once.
See also pdf_end_page ().
See also pdf_arc (), pdf_stroke ().
Function pdf_clip () function clips all drawing to the current path.
See also pdf_open (), fclose ().
See also pdf_open_jpeg (), pdf_open_gif (), pdf_open_memory_image ().
Function pdf_closepath_fill_stroke () function closes, fills the interior of the current path with the current fill color and draws current path.
See also pdf_closepath (), pdf_stroke (), pdf_fill (), pdf_setgray_fill (), pdf_setgray (), pdf_setrgbcolor_fill (), pdf_setrgbcolor ().
Many functions like pdf_moveto (), pdf_circle () and pdf_rect () start a new path.
The pdf_closepath_stroke () function is a combination of pdf_closepath () and pdf_stroke ().
See also pdf_closepath (), pdf_stroke ().
Function pdf_continue_text () function outputs the string in text in the next line.
See also pdf_show_xy (), pdf_set_leading (), pdf_set_text_pos ().
See also pdf_moveto (), pdf_lineto (), pdf_stroke ().
The pdf_end_page () function ends the page.
See also pdf_begin_page ().
See also pdf_closepath ().
Function pdf_fill () function fills the interior of the current path with the current fill color.
See also pdf_closepath (), pdf_stroke (), pdf_setgray_fill (), pdf_setgray (), pdf_setrgbcolor_fill (), pdf_setrgbcolor ().
Function pdf_fill_stroke () function fills the interior of the current path with the current fill color and draws current path.
Example 1. pdf_findfont () example
See also pdf_open_image_file (), pdf_open_memory_image (), pdf_get_image_width ().
See also pdf_open_image_file (), pdf_open_memory_image (), pdf_get_image_height ().
The function parameter modifier characterizes the parameter to get.
See also pdf_get_value (), pdf_set_value (), pdf_set_parameter ().
The function parameter modifier The function parameter modifier characterizes the parameter to get.
See also pdf_set_value (), pdf_get_parameter (), pdf_set_parameter ().
See also pdf_moveto (), pdf_curveto (), pdf_stroke ().
Function pdf_moveto () function sets the current point to the x-coor and y-coor coordinates.
The format of the image has to be gif.
See also pdf_close_image (), pdf_open_jpeg (), pdf_open_memory_image (), pdf_execute_image (), pdf_place_image (), pdf_put_image ().
If you do not pass any arguments to this function, the document will be created in memory and returned page by page to either stdout (standard output) or the browser.
See also fopen (), pdf_close ().
The function pdf_open_image_file () reads an image of format format from the file filename.
The function returns a pdf image identifier.
See also pdf_close_image (), pdf_open_jpeg (), pdf_open_gif (), pdf_open_tiff (), pdf_open_png (), pdf_execute_image (), pdf_place_image (), pdf_put_image ().
The format of the image has to be jpeg.
See also pdf_close_image (), pdf_open_gif (), pdf_open_png (), pdf_open_memory_image (), pdf_execute_image (), pdf_place_image (), pdf_put_image ().
Function pdf_open_memory_image () Function pdf_open_memory_image () function takes an image created with the PHP's image functions and makes it available for the PDF document.
See also pdf_close_image (), pdf_open_jpeg (), pdf_open_gif (), pdf_open_png () pdf_execute_image (), pdf_place_image (), pdf_put_image ().
The format of the image has to be png.
See also pdf_close_image (), pdf_open_jpeg (), pdf_open_gif (), pdf_open_memory_image (), pdf_execute_image (), pdf_place_image (), pdf_put_image ().
The pdf_open_tiff () function opens an image stored in the file with the name filename.
See also pdf_close_image (), pdf_open_gif (), pdf_open_jpeg (), pdf_open_png (), pdf_open_memory_image (), pdf_execute_image (), pdf_place_image (), pdf_put_image ().
Function pdf_place_image () function places an image on the page at postion (x-coor, x-coor).
See also pdf_put_image ().
Function pdf_rect () function draws a rectangle with its lower left corner at point (x-coor, y-coor).
See also pdf_stroke ().
It works like the postscript command grestore.
See also pdf_save ().
Function pdf_rotate () function sets the rotation in degress to angle.
It works like the postscript command gsave.
See also pdf_restore ().
Function pdf_scale () function sets the scaling factor in both directions.
The following line will therefore be drawn one inch in both directions.
Function pdf_set_border_color () Function pdf_set_border_color () function sets the color of the suroundig box of links and annotations.
See also pdf_set_border_style (), pdf_set_border_dash ().
Function pdf_set_border_dash () function sets the lenght of black and white areas of a dashed line of the suroundig box of links and annotations.
See also pdf_set_border_style (), pdf_set_border_color ().
Function pdf_set_border_style () Function pdf_set_border_style () function sets the style and width of the suroundig box of links and annotations.
See also pdf_set_border_color (), pdf_set_border_dash ().
(PHP 3 = 3.0.6, PHP 4)
See also pdf_set_word_spacing (), pdf_set_leading ().
If both are 0 a solid line is set.
See also pdf_set_transition ().
Function pdf_setflat () function sets the flatness to a value between 0 and 100.
If you are using PHP 3 or pdflib earlier than 2.20, the fourth encoding argument can have the following values:
The font is inserted only once, even if you call pdf_set_font () several times.
Otherwise, the font is inserted multiple times. (Thanks to Paul Haddon for this finding.)
The pdf_setgray_fill () function sets the current gray value to fill a path.
See also pdf_setrgbcolor_fill ().
Function pdf_setgray () function sets the current drawing and filling color to the given gray value.
See also pdf_setrgbcolor_stroke (), pdf_setrgbcolor_fill ().
Function pdf_setgray_stroke () function sets the current drawing color to the given gray value.
See also pdf_setrgbcolor_stroke ().
Function pdf_set_horiz_scaling () function sets the horizontal scaling to scale percent.
The pdf_set_info () function fills the information field of the PDF document.
It can be called before the beginning of the page.
Pdf_set_leading () function The pdf_set_leading () function sets the distance between lines of text.
See also pdf_continue_text ().
Function pdf_setlinecap () function sets the linecap parameter between a value of 0 and 2.
The pdf_setlinejoin () function sets the linejoin parameter between a value of 0 and 2.
Function pdf_setlinewidth () function sets the line width to width.
Function pdf_setmiterlimit () function sets the miter limit to a value greater of equal than 1.
See also pdf_get_value (), pdf_set_value (), pdf_get_parameter ().
Function pdf_setrgbcolor_fill () function sets the current rgb color value to fill a path.
Function pdf_setrgbcolor_stroke () function sets the current drawing and filling color to the given rgb color value.
Function pdf_setrgbcolor_stroke () function sets the current drawing color to the given rgb color value.
The matrix has to passed as an array with six elements.
Function pdf_set_text_pos () function sets the position of text for the next pdf_show () function call.
See also pdf_show (), pdf_show_xy ().
The possible values ​​for mode are 0 = fill text, 1 = stroke text, 2 = fill and stroke text, 3 = invisible, 4 = fill text and add it to cliping path, 5 = stroke text and add it to clipping path, 6 = fill and stroke text and add it to cliping path, 7 = add it to clipping path.
Function pdf_set_text_rise () function sets the text rising to rise points.
See also pdf_get_value (), pdf_get_parameter (), pdf_set_parameter ().
See also pdf_set_char_spacing (), pdf_set_leading ().
The dimensions of the frame are height x width.
If width and height are zero, the mode can be "left", "right" or "center".
If the feature argument is "blind", the text is not displayed.
See also pdf_show_xy (), pdf_show_boxed (), pdf_set_text_pos (), pdf_set_font ().
See also pdf_show (), pdf_show_boxed ().
Function pdf_skew () function skew the coordinate system by alpha (x) and beta (y) degrees. alpha and beta may not be 90 or 270 degrees.
The pdf_stringwidth () function returns the width of the string in text by using the current font.
It requires a font to be set before with pdf_set_font ().
See also pdf_set_font ().
The current path is the sum of all line drawing.
See also pdf_closepath (), pdf_closepath_stroke ().
The following example draws a line from (0, 0) to (200, 200) relative to the initial coordinate system.
php pdf_moveto ($ pdf, 0, 0); pdf_lineto ($ pdf, 100, 100); pdf_stroke ($ pdf); pdf_translate ($ pdf, 100, 100); pdf_moveto ($ pdf, 0, 0); pdf_lineto ($ pdf, 100, 100); pdf_stroke ($ pdf);
Features for working with Verisign Payflow Pro
pfpro_cleanup () is used to cleanly turn off the Payflow Pro library.
It should be called after all transactions have been completed and before the script has ended.
However, you do not need to call this function; this extension automatically calls pfpro_cleanup () when the script exits.
See also pfpro_init ().
pfpro_init () is used to initialize the Payflow Pro library.
You do not need to call this function, this extension will automatically call pfpro_init () before the first transaction.
See also pfpro_cleanup ().
Returns an associative field containing the answer.
pfpro_process () processes the transaction with Payflow Pro.
The first argument is an associative array containing keys and values ​​that are encoded and sent to the processor.
The second argument is optional and specifies the server to connect to.
The default is "test.signio.com", so if you want to process real transactions, you will want to set this argument to "connect.signio.com".
The third argument specifies the port to connect to.
The default is 443, the standard SSL port.
The fourth argument specifies in seconds which timeout to use.
The default is 30 seconds.
This timeout takes effect when connected to the processor, so your script could potentially run for a very long time if DNS or network issues occur.
The fifth argument specifies the hostname of your potential SSL proxy. The sixth argument specifies the port.
The seventh and eighth arguments specify the login name and password for this proxy.
This function returns an associative array of keys and response values.
See Payflow Pro Developer's Guide for complete details on required parameters.
Payflow Pro demo
? php pfpro_init (); $ transaction = array (USER = 'login', PWD = 'password', TRXTYPE = 'S', TENDER = 'C', AMT = 1.50, ACCT = '4111111111111111', EXPDATE = '0904'); $ response = pfpro_process ($ transaction); if (! $ response) {die ("Failed to connect to Verisign. \ n");} echo "Response code for Verisign was". $ response [RESULT]; echo ", which means:". $ response [RESPMSG]. "\ n"; echo "\ nTransaction request:"; print_r ($ transaction); echo "\ nAnswer:"; print_r ($ response); pfpro_cleanup () ;?
Returns a string containing the response.
pfpro_process_raw () processes the raw transaction string with Payflow Pro.
However, you really should use pfpro_process () because the encoding rules for these transactions are non-standard.
The first argument in this case is a string containing the raw transaction request.
All other arguments are the same as pfpro_process ().
The return value is a string containing the raw response.
See the Payflow Pro Developer's Guide for complete details on required parameters and coding rules.
We advise you well, use pfpro_process () instead.
Payflow Pro raw sample
? php pfpro_init (); $ response = pfpro_process ("USER = mylogin PWD [5] = m ndy TRXTYPE = S TENDER = C AMT = 1.50 ACCT = 4111111111111111 EXPDATE = 0904"); if (! $ response) {die ("Failed to connect to Verisign. \ n");} echo "Raw Verisign response was". $ response; pfpro_cleanup () ;?
pfpro_version () returns a string containing the version of the Payflow Pro library.
At the time of writing, this was L211.
This function behaves exactly like fsockopen (), except that the connection does not close after the script ends.
It is a persistent version of fsockopen ().
Example 1. pg_affected_rows ()
Example 1. pg_delete
Example 1. pg_insert
When safe-mode is enabled, PHP checks to see if the files / directories you are working with have the same UID as the running script.
Example 1. pg_select
Example 1. pg_update
This function prints credits incl. list of PHP developers, modules, etc.
Generates the appropriate HTML code that inserts this information into the page.
It is necessary to pass an argument indicating what will be printed (predefined constant flag, see below).
For example, to print general credits, you can use somewhere in your code:
html head title Does the page with credits / title / head body? php // your own code phpcredits (CREDITS_ALL + CREDITS_FULLPAGE); // another code? / body / html
Predefined phpcredits () flags
name
All credits, equivalent to:
Generates a complete standalone HTML page with the appropriate tags.
Credits documentation team
It is usually used in combination with other symptoms.
Indicates that a complete stand-alone HTML page should be printed, including information indicated by other flags.
General credits:
Language design and concept, authors of PHP 4.0 and SAPI module.
A list of a narrower circle of developers
List of PHP extension modules and their authors
List of PHP server APIs and their authors
See also phpinfo (), phpversion (), php_logo_guid ().
Prints a large amount of information about the current state of PHP.
This includes information about compilation options and extensions, PHP version, server and systems information (if PHP is compiled as a module), PHP environment, OS version, paths, master and local configuration option values, HTTP headers, and PHP license.
The output can be modified by passing one or more of the following values ​​stored in the optional what argument.
See also phpversion (), phpcredits (), php_logo_guid ()
This functionality was added in PHP 4 Beta 4.
See also phpinfo (). phpversion (), phpcredits ()
php_sapi_name () returns a lowercase string type of interface between the web server and PHP (Server API, SAPI).
For CGI PHP this string is "cgi", for mod_php for Apache this string is "apache" and so on.
Example 1. php_sapi_name () Example
$ sapi_type = php_sapi_name (); if ($ sapi_type == "cgi") print "You are using PHP CGI \ n"; else print "You are not using PHP CGI \ n";
php_uname () returns a string describing the operating system on which PHP was compiled.
Example 1. php_uname () Example
if (substr (php_uname (), 0, 7) == "Windows") {die ("Sorry, this script does not work on Windows. \ n");}
Returns a string containing the version of the currently running PHP parser.
Example 1. phpversion () example
// prints eg 'Current version of PHP:
3.0rel-dev 'echo "Current PHP version:" .phpversion ();
See also phpinfo (), phpcredits (), php_logo_guid ()
Opens a pipe to a process started by splitting an existing process and then running the program specified by the command parameter.
Returns a file descriptor identical to that returned by the fopen () function, but is always one-way only (can be opened for reading or writing, not simultaneously) and must finally be closed with pclose ().
This descriptor can be used with the fgets (), fgetss (), and fputs () functions.
Returns FALSE if an error occurs.
$ fp = popen ("/ bin / ls", "r");
See also pclose ().
This is an alias to current ().
If safe-mode is enabled, PHP checks to see if the directory you are working in has the same UID as the running script.
Example 1. preg_grep () example
Example 2. find the word "web"
When working with a replacement pattern where a backreference is immediately followed by another number (ie: placing a literal number immediately after a matched pattern), you cannot use the familiar \\ 1 notation for your backreference. \\ 11, for example, would confuse preg_replace () since it does not know whether you want the \\ 1 backreference followed by a literal 1, or the \\ 11 backreference followed by nothing.
Example 5.
Example 1. preg_split () Example 1. preg_split () example:
Returns the array element before the element pointed to by the internal array pointer, or FALSE if the elements have run out.
If this field contains empty elements, this function returns FALSE for these elements as well.
Use each () to traverse a field that may contain empty elements.
prev () behaves the same as next (), but moves the internal pointer of the array one place back instead of forward.
See also: current (), end (), next () and reset ().
Example 1. printer_abort () example
Example 1. printer_close () example
Example 1. printer_create_dc () example
Example 1. printer_draw_bmp () example
Example 1. printer_draw_chord () example
Example 1. printer_draw_elipse () example
Example 1. printer_draw_line () example
Example 1. printer_draw_pie () example
Example 1. printer_draw_rectangle () example
Example 1. printer_draw_roundrect () example
Example 1. printer_draw_text () example
Example 1. printer_get_option () example
Example 1. printer_list () example
Example 1. printer_logical_fontheight () example
Example 1. printer_open () example
Example 1. printer_select_brush () example
Example 1. printer_select_font () example
Example 1. printer_select_pen () example
Example 1. printer_set_option () example
Example 1. printer_start_doc () example
Example 1. printer_write () example
Creates an output according to the format argument, which is described in the sprintf () documentation.
See also: print (), sprintf (), sscanf (), fscanf (), and flush ().
Prints arg.
See also: echo (), printf () and flush ().
As with anything that sends its results directly to the browser, you can use output control functions to capture the output of that function and store it - for example - in a string.
Example 1. pspell_add_to_personal ()
Example 1. pspell_check ()
Example 1. pspell_config_create ()
Example 1. pspell_config_ignore ()
Example 1. pspell_config_mode ()
Example 1. pspell_config_personal ()
Example 1. pspell_config_repl ()
Example 1. pspell_config_runtogether ()
Example 1. pspell_new_config ()
Example 1. pspell_new ()
Example 1. pspell_new_personal ()
Example 1. pspell_store_replacement ()
Example 1. pspell_suggest ()
Adds a setting to the server environment.
Setting a system variable
This function returns an 8-bit binary string corresponding to a decoded quoted printable string.
This function is similar to imap_qprint () except that this function does not require an IMAP module.
Returns the backslash version of str before all occurrences of the following characters:
See also: addslashes (), htmlentities (), htmlspecialchars (), nl2br () and stripslashes ().
range () returns an array of integers from low to high inclusive.
See shuffle () for a usage example.
Returns a string in which the percent character sequence (%) followed by two hexadecimal digits has been replaced by plain characters.
For example, a string
See also: rawurlencode (), urldecode (), urlencode ().
Returns a string that contained all non-alphanumeric characters except
Rawurlencode () example no.
echo 'A HREF = "ftp: // user:', rawurlencode ('foo @ +% /'),'@ftp.my.com/x.txt" ';
2
echo 'A HREF = "http: / /x.com/department_list_script /', rawurlencode ('sales and marketing / Miami'), '"';
See also: rawurldecode (), urldecode (), urlencode ().
Returns the name of the next file in the directory.
File names are not sorted in any way.
List all files in the directory
Note that readdir () also returns. a .. items (link to itself and parent directory.
If you don't want them, you can easily skip them:
List all files in the directory and skip. and..
? php $ handle = open ('.'); while (false! == ($ file = readdir ($ handle))) {if ($ file! = "." $ file! = "..") {echo "$ file \ n";}} closedir ($ handle) ;?
Returns the number of bytes read from the file.
If an error occurs, it returns FALSE, and if the @readfile notation was not used, an error message is displayed.
When the filename starts with "http: / /" (uppercase or lowercase), a connection to the appropriate server is opened via HTTP 1.0 and the obtained document is written to standard output.
When filename starts with "ftp: / /" (upper or lower case), an FTP session to the appropriate server is opened and the document is written to standard output.
When filename starts with anything else, an ordinary file (from the filesystem) will be opened and its contents will be written to standard output.
See also fpassthru (), file (), fopen (), include (), require (), and virtual ().
This function adds a line to the command line history.
This function clears the entire command line history.
This function registers the finishing function.
You must enter the name of an existing function that accepts a partial statement and returns a field of possible counterparts.
This is the same functionality you get when you press the tab key in Bashi.
This function returns one line from the user.
You can specify a string to prompt the user.
The end-of-line sequence is removed from the returned line.
You must add this line to the history yourself using readline_add_history ().
Example 1. readline ()
// get 3 user views for ($ i = 0; $ i 3; $ i ++) {$ line = readline ("Command:"); readline_add_history ($ line);} // print history print_r (readline_list_history ()); // print variables print_r (readline_info ());
GNU Recode function
When called without arguments, this function returns an array of values ​​for all the settings that readline uses.
The elements are indexed according to the following values: done, end, erase_empty_line, library_version, line_buffer, mark, pending_input, point, prompt, readline_name and terminal_name.
Returns the value of this setting when called with a single argument.
When calling with two arguments, the setting changes to the given value.
This function returns an entire command line history field.
Elements are indexed by integers, starting at zero.
This function reads the command line history from a file.
This function writes the command line history to a file.
Returns 0 on error.
realpath () processes all symbolic links and evaluates the links to '/. / ',' / .. / 'and the separate characters' /' in the path parameter and return an absolute path in canonical form.
This resulting path does not contain symbolic links and components of type '/. / 'or' / .. / '.
Example 1. realpath () example
Recode the file referenced by the input descriptor to the file referenced by the output descriptor as requested.
If the request failed, it returns FALSE, otherwise TRUE.
This feature does not currently process remote file (URL) descriptors.
Both descriptors must point to local files.
Basic recode_file () example
This is an alias to recode_string ().
It was added in PHP 4.
Recode the string according to the request.
Returns a recoded string, or FALSE if a recoding request could not be made.
A simple recoding request can be "lat1..iso646-de".
For detailed instructions on requirements, see the GNU Recode documentation for your installation.
Basic recode_string () example:
print recode_string ("us..flat", "The following character has an diacritical mark: aacute;");
Registers the function specified in func for execution after the script has finished running.
Common problems:
Because this function cannot send any output to the browser, you will not be able to debug it with commands such as print () or echo ().
It will try to rename the oldname file to newname.
require () inserts and evaluates the specified file.
Detailed information on how embedding works is described in the include () documentation.
require () and include () are the same, except how they handle errors. include () produces a Warning, while require () ends with a Fatal Error require () and include () are identical, except how they handle errors. include () produces a Warning, while require () ends with a Fatal Error.
In other words, don't hesitate to use require () if you want the absence of the file to stop processing the page. include () In other words, don't hesitate to use require () if you want the absence of a file to stop processing the page. include () does not behave this way, the script will continue uninterrupted.
Example 12-2.
Basic usage examples require ()
For more examples - - see the include () documentation.
For versions prior to PHP 4.0.2, the following applies: require () will always try to read the appropriate file, unless the line with this command can never be executed.
The conditional expression requires () does not affect.
However, if the line on which require () lies is not executed at all, the code in the file will not be executed either.
The same is true for cycles - - they do not affect the behavior require ().
Although the code contained in the embedded file is still repeated, require () itself is executed only once.
See also include (), require_once (), include_once (), eval (), file (), readfile (), virtual (), and include_path.
The require_once () construct inserts and evaluates the specified file during script execution.
Therefore, it behaves similarly to require (), with the difference that if the code from the file was previously inserted into the script, it will not be inserted again.
For more information on the behavior of the - command, see the require () command.
The require_once () command should be used in cases where the same file could be inserted and evaluated more than once during script execution, and you want to ensure just one insertion (you must avoid redefining functions, reassigning values, etc.).
Examples of using require_once () and include_once () can be found in the PEAR code included in the latest PHP source distributions.
The require_once () command was added in PHP 4.0.1pl2.
See also: require (), include (), include_once (), get_required_files (), get_included_files (), readfile (), and virtual ().
reset () rotates the internal array pointer to its first element.
reset () returns the value of the first element of the array.
See also: current (), each (), next (), and prev ().
Called inside a function, the return () construct immediately terminates the execution of that function and returns its argument as the value of the function call. return () similarly terminates the execution of the eval () construct or the entire script.
If called from a global context, script execution terminates.
If the current script was inserted using include () or require (), control is passed to the calling file.
Additionally, if include () was used, the value specified in return () will be returned as the value of the include () call.
If return () is called from the main script file, execution ends.
When it is a file specified using the auto_prepend_file or auto_append_file configuration options in the configuration file, file processing ends.
For more information, see Return Values.
They are usually omitted, but it does not matter whether they are used or not.
Returns the directory stream referenced by the dir_handle descriptor at the beginning of the directory.
Sets the position of the pointer in the file specified by the fp descriptor to the beginning of this file.
If an error occurs, it returns 0.
The file descriptor must be valid and point to a file successfully opened with fopen ().
See also fseek () and ftell ().
It will try to delete the directory specified by its name.
The directory must be empty and have the appropriate permissions set.
See also mkdir ().
Warning
This function sorts the fields in descending order.
Rsort sample ()
$ fruits = array ("lemon", "orange", "banana", "apple"); rsort ($ fruits); reset ($ fruits); while (list ($ key, $ val) = each ($ fruits)) {echo "$ key - $ val \ n";}
fruits [0] = orange fruits [1] = lemon fruits [2] = banana fruits [3] = apple
The fruit was sorted alphabetically in descending order.
See also: arsort (), asort (), ksort (), sort (), and usort ().
This is an alias to chop ().
Rtrim sample ()
$ trimmed = rtrim ($ line);
See also: trim (), ltrim () and rtrim ().
Chapter 13.
The information can be passed to the functions via a list of arguments, which is a comma-separated list of variables and / or constants.
PHP supports passing arguments by value (default), passing by reference, and default argument values.
Variable argument list length is only supported in PHP 4 and later; see List of variable-length arguments and function references func_num_args (), func_get_arg (), and func_get_args ().
A similar effect can be achieved in PHP 3 by passing an array of arguments to the function:
By default, function arguments are passed by value (so when you change the value of an argument in a function, it does not change outside the function).
If you want to allow the function to modify its arguments, you must pass them by reference.
If you want the argument to always be passed to the function by reference, you can precede the argument name in the function definition with an ampersand ():
function add_some_extra ($ string) {$ string. = 'and something extra.';} $ str = 'This is a string'; add_some_extra ($ str); echo $ str; // prints 'This is a string and something extra.'
A function can define default values ​​for scalar arguments in C ++ style as follows:
function makecoffee ($ type = "cappucina") {return "I'm making a cup $ type. \ n";} echo makecoffee (); echo makecoffee ("espresso");
The output of the above code is:
I'm making a cup of cappuccino.
I make a cup of espresso.
The default value must be a constant expression, not (for example) a variable or class item.
Note that when using implicit arguments, any default values ​​should be on the right side of the non-implicit argument; otherwise it will not work as expected.
Consider this piece of code:
function makeyogurt ($ type = "acidophilus", $ flavor) {return "I make a cup of yogurt $ type $ flavor. \ n";} echo makeyogurt ("raspberry"); // will not work as expected
The output of this example will be:
Missing argument 2 in call to makeyogurt () in / usr / local / etc / httpd / htdocs / php3test / functest.html on line 41 I make a cup of raspberry yogurt.
And now let's compare it with this:
function makeyogurt ($ flavor, $ type = "acidophilus") {return "I make a cup of yogurt $ type $ flavor. \ n";} echo makeyogurt ("raspberry"); // works as expected
The example prints:
I make a cup of acidophilus raspberry yogurt.
PHP 4 has support for a list of variable-length arguments in user-defined functions.
It's really simple, using the func_num_args (), func_get_arg (), and func_get_args () functions.
No special syntax is required, the argument list can still be explicitly provided by function definitions and will behave as normal.
Return values
sem_acquire () blocks (if needed) until a semaphore is obtained.
A process attempting to obtain a semaphore that has already been obtained will block forever if obtaining that semaphore would cause its max_acquire value to be exceeded.
After the request is processed, all acquired but not explicitly released traffic lights are released automatically, and a warning is generated.
See also: sem_get () and sem_release ().
Returns the semaphore identifier or FALSE.
sem_get () returns an id that can be used to access the System V semaphore with the given key.
If necessary, a new traffic light with access rights defined in the perm is created. If necessary, a new traffic light with access rights defined in the perm is created (default is 0666).
The number of processes that can get this semaphore at the same time is max_acquire (default is 1).
However, this value is set only if this process detects that no other process is connected to this traffic light at the same time.
A second call to sem_get () with the same key returns a different semaphore identifier, but both identifiers point to the same semaphore.
See also: sem_acquire () and sem_release ().
This feature does not work on Windows.
sem_release () releases the semaphore if the calling process holds it, otherwise a warning is generated.
Once released, the semaphore can be retrieved using sem_acquire ().
See also: sem_get () and sem_acquire ().
Example 1. serialize () example
Example 1. session_cache_limiter () example
Example 1. session_name () examples
Example 1. session_set_save_handler () example
Shared memory features
setcookie () defines a cookie that is sent with the headers.
Cookies must be sent first of all HTTP headers (this is a cookie restriction, not PHP).
Therefore, you must place the call to this function before the html or head tags.
All arguments except the name argument are optional.
If only the name argument is present, the client's cookie of that name is deleted.
You can also replace any argument with an empty string ("") to skip that argument.
The expire and secure arguments are integers and cannot be skipped with an empty string.
Use zero (0) instead.
The expire argument is a common Unix integer expression of time, as returned by time () or mktime ().
The secure argument indicates that this cookie should only be transmitted over a secure HTTPS connection.
Common snags:
Cookies are accessible only the next time the page on which they are to be accessible is loaded.
Cookies must be deleted with the same parameters with which they were sent.
In PHP 3, multiple setcookie () calls in a single script are performed in reverse order.
If you are trying to delete one cookie before sending another, you should place the insert before deleting.
In PHP 4, multiple setcookie () calls are made in the order in which they are called.
Here are some examples of how to send cookies:
Samples of sending cookies using setcookie ()
setcookie ("TestCookie", "Test Value"); setcookie ("TestCookie", $ value, time () + 3600); / * expires in an hour * / setcookie ("TestCookie", $ value, time () + 3600, "/ ~ rasmus /", ".utoronto.ca", 1);
The following are examples of deleting cookies from the previous example:
Examples of deleting cookies using setcookie ()
setcookie ("TestCookie"); // sets the expiration time to the time before the setcookie hour ("TestCookie", "", time () - 3600); setcookie ("TestCookie", "", time () - 3600, "/ ~ rasmus /", ".utoronto.ca", 1);
Note that the value part of the cookie is automatically url-encoded when the cookie is sent, and variables with the same name as the cookie are automatically decoded and assigned upon receipt.
To see the contents of our test cookie, use one of the following examples:
echo $ TestCookie; echo $ HTTP_COOKIE_VARS ["TestCookie"];
You can also send cookies containing fields by enclosing square brackets after the cookie name.
The effect of this is to send as many cookies as your element field has, but when your script accepts these cookies, the values ​​are placed in the field with the same name as your cookies:
setcookie ("cookie [three]", "cookiethree"); setcookie ("cookie [two]", "cookietwo"); setcookie ("cookie [one]", "cookieone"); if (isset ($ cookie)) {while (list ($ name, $ value) = each ($ cookie)) {echo "$ name == $ value br \ n";}}
For more information on cookies, see the cookie specifications at http: //www.netscape.com/newsref/std/ cookie_spec.html.
Microsoft Internet Explorer 4 with Service Pack 1 incorrectly processes cookies that have the path argument set.
Netscape Communicator 4.05 and Microsoft Internet Explorer 3.x may not process cookies correctly unless the path and time arguments are set.
The set_file_buffer () function sets the write buffering over the given fp descriptor to the byte buffer.
category is a string specifying the category of functions affected by the locale setting:
LC_ALL for all categories below
LC_COLLATE for string comparison - not currently implemented in PHP
LC_CTYPE for character classification and conversion, eg strtoupper ()
LC_MONETARY for localeconv () - not currently implemented in PHP
LC_NUMERIC for decimal separator
LC_TIME to format date and time using strftime ()
If the locale is an empty string (""), the locale names are set to the values ​​of system variables with the same names as the above categories, or from "LANG".
If the locale is zero or "0", the locale does not change, only the current value is returned.
setlocale () returns the new current locale or FALSE if the locale functionality is not implemented on the platform in question, the specified locale does not exist, or the category name is invalid.
An invalid category name will also trigger a warning.
Sets the current active magic_quotes_runtime configuration options. (0 off, 1 on)
See also get_magic_quotes_gpc (), get_magic_quotes_runtime ().
Specifies the number of seconds the script can run.
If this time is reached, the script returns a fatal error.
The default limit is 30 seconds, or if it exists, the value of the max_execution_time directive defined in the configuration file.
If seconds is zero, there is no timeout.
set_time_limit () restarts the time counter from zero when called.
In other words, if there is a standard six-second limit and set_time_limit (20) is called after 25 seconds of script execution, the script will run for a total of 45 seconds before it expires.
Note that set_time_limit () Note that set_time_limit () has no effect when PHP is running in safe mode.
This can only be bypassed by disabling safe mode or changing the timeout in the configuration file.
Example 1. settype () example
shm_attach () returns an id that can be used to access System V shared memory with the given key; the first call creates a memory segment of size mem_size (default: sysvshm.init_mem in the configuration file, otherwise 10000 bytes) and with optional rights (default:
A second call to shm_attach () with the same key returns a different identifier, but both point to the same shared memory. memsize and perm are ignored in this case.
shm_detach () detaches from the shared memory identified by shm_identifier created by shm_attach ().
Remember that this shared memory still exists and holds the data.
shm_get_var () returns a variable with the given variable_key.
The variable remains in shared memory.
Inserts or modifies a variable with the given variable_key.
All types of variables (double, int, string, array) are supported.
Deletes shared memory from a UNIX system.
All data in it will be destroyed.
Deletes the variable with the given variable_key and frees the used memory.
The show_source () function prints the color-highlighted syntax of the code contained in filename using the colors defined in the syntax highlighter built into PHP.
See also highlight_string (), highlight_file ().
The function can be defined using syntax similar to this:
function foo ($ arg_1, $ arg_2, ..., $ arg_n) {echo "Sample function. \ n"; return $ retval;}
Any valid PHP code can be inserted into a function, even definitions of other functions and classes.
In PHP 3, functions must be defined before they are referenced.
This requirement no longer applies in PHP.
PHP does not support function overloading, nor is it possible to define or redefine previously declared functions.
PHP 3 does not support a variable number of function arguments, while default arguments are supported (see Default Argument Values ​​for more information).
PHP 4 supports both: for more information, see Functions of variable length arguments and function references func_num_args (), func_get_arg (), and func_get_args ().
Function arguments
shuffle () shuffles (randomly reorders) elements.
You must initialize the random number generator using srand ().
Shuffle sample ()
$ numbers = range (1.20); srand ((double) microtime () * 1000000); shuffle ($ numbers); while (list (, $ number) = each ($ numbers)) {echo "$ number";}
See also: arsort (), asort (), ksort (), rsort (), sort (), and usort ().
This implementation does not use a stack as in Oliver's pseudocode, but a recursive call, which may or may not speed up the whole process.
The complexity of this algorithm is O (N ** 3) where N is the length of the longest string.
If similar_text () is passed a third argument (reference), this function calculates the similarity in percent.
Returns the number of characters in both strings.
Returns the number of elements in an array.
See also: count ().
The sleep function delays program execution by the number of seconds passed in the seconds argument.
See also usleep ().
Returns TRUE on success, FALSE on failure. socket_getpeername () may also return FALSE if the socket type is not any of AF_INET or AF_UNIX, in which case the last socket error code is not updated.
Returns TRUE on success, FALSE on failure. socket_getsockname () may also return FALSE if the socket type is not any of AF_INET or AF_UNIX, in which case the last socket error code is not updated.
This function only works on a socket created with fsockopen (), pfsockopen () and network sockets returned by fopen () with the URL as a parameter.
This function was formerly called set_socket_blocking (), but this name is now deprecated.
Example 1. socket_set_timeout () Example
Example 1. socket_strerror () example
The old_function clause allows you to declare a function with the same syntax as in PHP / FI2 (except that you must replace 'function' with 'old_function'.
This is a deprecated option and should only be used by the PHP / FI2 - PHP 3 converter.
Functions declared as old_function cannot be called from PHP internal code.
This means, among other things, that you cannot use them in functions such as usort (), array_walk (), and register_shutdown_function ().
You can work around this limitation by writing a wrapper (in normal PHP 3 form) from which you call old_function.
Functions in variables
sort () sorts the array.
The elements are arranged from smallest to largest.
Sample sort ()
? php $ fruits = array ("lemon", "orange", "banana", "apple"); sort ($ fruits); reset ($ fruits); while (list ($ key, $ val) = each ($ fruits)) {echo "fruits [". $ key. "] =". $ val;}?
The fruits were arranged alphabetically.
The sort properties can be modified using the optional sort_flags argument, which can take the following values:
Sort types:
SORT_REGULAR - normal comparison
SORT_NUMERIC - numerical comparison
SORT_STRING - text comparison
See also: arsort (), asort (), ksort (), natsort (), natcasesort (), rsort (), usort (), array_multisort () and uksort ().
Calculates the soundex key p.
Soundex keys have the property that words pronounced similarly produce identical soundex keys, and can therefore be used to simplify searches in databases where you know the pronunciation but not the spelling.
This function returns a 4-character string beginning with a letter.
This particular soundex function is described by Donald Knuth in "The Art Of Computer Programming, vol.
Soundex samples
soundex ("Euler") == soundex ("Ellery") == 'E460'; soundex ("Gauss") == soundex ("Ghosh") == 'G200'; soundex ("Hilbert") == soundex ("Heilbronn") == 'H416'; soundex ("Knuth") == soundex ("Kant") == 'K530'; soundex ("Lloyd") == soundex ("Ladd") == 'L300'; soundex ("Lukasiewicz") == soundex ("Lissajous") == 'L222';
Example 1. split () Example
Example 2. split () Example
Returns a string created from the format string format.
The format string consists of zero or more directives: common characters (except%), which are copied directly into the result, and conversion specifications, each of which accepts one argument.
This applies to both sprintf () and printf ().
Each conversion specification consists of a percent sign (%), followed by one or more of the following characters, in that order:
An optional padding specifier that determines which character is used to pad the result to the correct length of string.
It can be a space or 0 (letter zero).
The default is zero.
You can enter another additional character by preceding it with a single quotation mark (').
See examples below.
Optional alignment specifier that determines whether the result should be left or right aligned.
Default is right, dash (-) changes it to left.
An optional width specifier that specifies how many characters (minimum) the conversion result should contain.
An optional precision specifier that specifies how many decimal places to display for decimal numbers.
This switch has no effect on types other than double. (Another function useful for formatting numbers is number_format ().)
type specifier, which determines what type of argument data should be considered.
Possible types:
% - and a literal percent sign.
No argument is required.
b - the argument is considered an integer and is presented as a binary number.
c - the argument is considered an integer and is presented as a character with this ASCII value.
d - the argument is considered an integer and is presented as a decimal number.
f - the argument is considered a double and is presented as a floating point number.
o - the argument is considered an integer and is presented as an octal number.
s - the argument is considered a string and is presented as such.
x - the argument is considered an integer and is presented as a hexadecimal number (with lowercase letters).
The X-argument is considered an integer and is presented as a hexadecimal number (with capitals).
See also: printf (), sscanf (), fscanf () and number_format ().
Sprintf () example: zero-padded integers
$ isodate = sprintf ("% 04d-% 02d-% 02d", $ year, $ month, $ day);
Sample sprintf (): formatting currency
$ money1 = 68.75; $ money2 = 54.35; $ money = $ money1 + $ money2; // echo $ money will output "123.1"; $ formatted = sprintf ("% 01.2f", $ money); // echo $ formatted will output "123.10"
Example 1. sql_regcase () Example
Values ​​are returned using the optional return clause.
Any type can be returned, including lists and objects.
The class causes the function to end its run immediately and pass control back to the line from which it was called.
See return () for more information.
function square ($ num) {return $ num * $ num;} echo square (4); // prints '16 '.
You cannot return multiple values ​​from a function, but a similar result can be achieved by returning a list.
To return a reference from a function, you must use the reference operator both in the function declaration and when assigning the return value to a variable:
For more information on links, please see Link Explaints.
The sscanf () function is the input analog of printf (). sscanf () reads the string str and interprets it according to the format.
If only two arguments are passed to it, it returns the parsed values ​​in the array.
Sscanf sample ()
Sscanf () example - use of optional arguments
// find out information about the author and generate a DocBook record $ auth = "24 \ tLewis Carroll"; $ n = sscanf ($ auth, "% d \ t% s% s", $ id, $ first, $ last); echo "author id = '$ id' firstname $ first / firstname surname $ last / surname / author \ n";
See also: fscanf (), printf () and sprintf ().
Collects statistics about a file identified by filename.
If str1 is less than str2 it returns 0; if str1 is greater than str2 returns 0, and 0 if they are the same.
Sample strcasecmp ()
$ var1 = "Hello"; $ var2 = "hello"; if (! strcasecmp ($ var1, $ var2)) {echo 'in case-insensitive text comparison, $ var1 equals $ var2';}
See also: ereg (), strcmp (), substr (), stristr (), strncasecmp () and strstr ().
This function is an alias to strstr (), and is identical in all respects.
If str1 is less than str2, it returns 0; if str1 is greater than str2, it returns 0, and 0 if they are the same.
Note: this comparison is case-sensitive.
See also: ereg (), strcasecmp (), substr (), stristr (), strncasecmp (), strncmp (), and strstr ().
Returns the length of the leading segment str1, which does not contain any of the characters str2.
See also: strspn ().
See I for more information about wrappers.
See I for more information about wrappers and their wrapper data.
Example 1. stream_set_timeout () Example
Example 1. stream_set_write_buffer () example
Returns a string formatted according to the given format string, using the given timestamp, or the current local time if no stamp is given.
The name of the month, day of the week, and other language-dependent strings respect the national specifics set by setlocale ().
The following conversion specifiers are distinguished in the format string:
% a - abbreviated name of the day of the week (according to national settings)
% A - full name of the day of the week (according to national settings)
% b - abbreviated name of the month (according to national settings)
% B - full name of the month (according to national settings)
% c - time and date representation preferred by current locale
% C - century number (year divided by 100 and shortened to an integer, from 00 to 99)
% d - day of the month as a decimal number (01-31)
% D - same as% m /% d /% y
% e - day of the month as a decimal number, one digit (numbers 1 to 9) is preceded by a space ('1' to '31')
% g - like% G, but no century
% G - four-digit year corresponding to the week according to ISO (see% V).
It has the same format and value as% Y, except that if the ISO week number belongs to the previous or next year, that different year will be used.
% h - same as% b
% H - hour as a decimal number in 24-hour format (00 to 23)
% I - hour as a decimal number in 12-hour format (01 to 12)
% j - day of the year as a decimal number (001 to 366)
% M - minute as a decimal number
% n - line break character
% p - `am 'or` pm' depending on the time value, resp. corresponding string according to the locale
% r - time in am and pm notation (12-hour)
% R - time in 24-hour notation
% S - second as a decimal number
% t - tab character
% T - current time, same as% H:% M:% S
% u - the day of the week as a decimal number [1,7], 1 represents Monday
On Sun Solaris computers, Sunday occurs as the first day of the week, although ISO 9889: 1999 (the current C standard) clearly specifies that it should be Monday.
% U - week in the current year as a decimal number, starting on the first Sunday as the first day of the first week
% V - week in the current year according to ISO 8601: 1988 as a decimal number, ranging from 01 to 53, where 1 is the first week with at least 4 days this year, and Monday as the first day of the week. (The corresponding year can be obtained using% G or% g.)
% W - week in the current year as a decimal number, starting on the first Monday as the first day of the first week
% w - day of the week as a decimal number, Sunday corresponds to 0
% X - preferred time representation (no date) for the current locale
% y - year as decimal number without century (00 to 99)
% Z - time zone, its name or abbreviation
Not all conversion specifiers may be supported by your C library, then they will not be supported by strftime () Not all conversion specifiers may be supported by your C library, then they will not be supported by strftime () in PHP.
This means that% T and% D will not work on Windows.
Example - strftime ()
setlocale (LC_TIME, "C"); print (strftime ("% A is in Finnish")); setlocale (LC_TIME, "fi_FI"); print (strftime ("% A, in French")); setlocale (LC_TIME, "fr_FR"); print (strftime ("% A and in German")); setlocale (LC_TIME, "de_DE"); print (strftime ("% A. \ n"));
See also setlocale () and mktime (), and the Open Group specification strftime ().
Returns a string without backslashes removed.
See also: addcslashes ().
Returns a string without backslashes removed. (\ 'happens', etc.) Double backslashes are combined into single slashes.
See also: addslashes ().
This function tries to remove all HTML and PHP tags from the passed string.
You can use the optional second argument to specify tags that should not be deleted.
The allowable_tags argument was added in PHP 3.0.13, PHP 4 b3.
Returns the haystack from the first occurrence of the needle to the end. needle and haystack are examined regardless of case.
If the needle is not found, it returns FALSE.
If needle is not a string, it is converted to an integer and the character value is used as the XXX ordinal.
See also: strchr (), strrchr (), substr () and ereg ().
Returns the length (number of characters) of the string argument.
This function implements a comparison algorithm that sorts alphanumeric strings in the same way as a human.
The behavior of this function is similar to strnatcmp () except that the comparison is case-insensitive.
Like other string comparison functions, this returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are the same.
See also: ereg (), strcasecmp (), substr (), stristr (), strcmp (), strncmp (), strncasecmp (), strnatcmp (), and strstr ().
Example of the difference between this algorithm and common computer algorithms for string sorting (eg strcmp ()):
$ arr1 = $ arr2 = array ("img12.png", "img10.png", "img2.png", "img1.png"); echo "Standard string comparison \ n"; usort ($ arr1, "strcmp"); print_r ($ arr1); echo "\ nNatural string comparison \ n"; usort ($ arr2, "strnatcmp"); print_r ($ arr2);
Standard Array String Comparison ([0] = img1.png [1] = img10.png [2] = img12.png [3] = img2.png) Natural Array String Comparison ([0] = img1.png [1] = img2.png [2] = img10.png [3] = img12.png)
Note: this comparison is case-sensitive.
See also: ereg (), strcasecmp (), substr (), stristr (), strcmp (), strncmp (), strncasecmp (), strnatcasecmp (), strstr (), natsort (), and natcasesort ().
This function is similar to strcasecmp (), except that you can specify the (maximum) number of characters (only) from each of the strings to be used in the comparison.
If any of the strings is shorter than len, then the length of that string is used for comparison.
See also: ereg (), strcasecmp (), strcmp (), substr (), stristr (), and strstr ().
Returns 0 if str1 is less than str2; 0 if str1 is greater than str2, and 0 if they are the same.
See also: ereg (), strncasecmp (), strcasecmp (), substr (), stristr (), strcmp (), and strstr ().
str_pad () appends the input string from the left, right, or both sides to a given length.
If the optional pad_string argument is not passed to it, it is padded with input spaces, otherwise pad_string characters are padded.
The optional pad_type argument can be STR_PAD_RIGHT, STR_PAD_LEFT, or STR_PAD_BOTH.
The default is STR_PAD_RIGHT.
If pad_length is negative or less than the input length, padding will not occur.
Sample str_pad ()
Returns the numeric position of the first occurrence of a needle in a haystack string.
Unlike strrpos (), this function accepts a multi-character string as the needle argument, and the entire string is used.
The return values ​​"character found at position 0" and "character not found" can be easily interchanged.
Here's how to tell the difference:
// in PHP 4.0b3 and later: $ pos = strpos ($ mystring, "b"); if ($ pos === false) {// three equals // not found ...} // in versions older than 4.0b3: $ pos = strpos ($ mystring, "b"); if (is_string ($ pos)! $ pos) {// not found ...}
The optional offset argument allows you to specify at which position in the haystack the search should begin.
The returned position is still relative to the beginning of the haystack.
See also: strrpos (), strrchr (), substr (), stristr () and strstr ().
This function returns the part of the haystack that begins with the occurrence of the needle and continues to the end of the haystack.
If the needle contains more than one character, the first one is used.
Sample strrchr ()
// get the last directory in $ PATH $ dir = substr (strrchr ($ PATH, ":"), 1); // get everything after the last end of line $ text = "Line 1 \ nLine 2 \ nLine 3"; $ last = substr (strrchr ($ text, 10), 1);
See also: substr (), stristr () and strstr ().
Returns input_str multiplier repeated times. multiplier must be greater than 0.
Sample str_repeat ()
echo str_repeat ("- =", 10);
This function replaces all occurrences of the needle in the haystack argument with the str.
If you do not need complex replacement rules, you should always use this function instead of ereg_replace ().
Sample str_replace ()
$ bodytag = str_replace ("% body%", "black", "body text =% body%");
This feature is XXX binary secure.
The str_replace () function was added in PHP 3.0.6, but did not work well until PHP 3.0.8.
See also: ereg_replace () and strtr ().
Returns a string in reverse order.
Returns the numeric position of the last occurrence of needle in the haystack string. The needle can only be one character long.
If it contains more than one character, the first one is used.
See also: strpos (), strrchr (), substr (), stristr () and strstr ().
Example 1. str_shuffle () example
Returns the leading segment str1, which consists exclusively of the characters in str2.
returns 2.
See also: strcspn ().
Returns the haystack part from the first occurrence of the needle to the end.
Note: this feature is case-sensitive.
Sample strstr ()
$ email = ' sterling@designmultimedia.com '; $ domain = strstr ($ email, '@'); print $ domain; // prints @ designmultimedia.com
See also: stristr (), strrchr (), substr () and ereg ().
strtok () is used to tokenize a string.
Strtok sample ()
$ string = "This is an example string"; $ tok = strtok ($ string, ""); while ($ tok) {echo "Word = $ tok br"; $ tok = strtok ("");}
See also: split () and explode ().
Returns a string with all alphabetic characters changed to lowercase.
Note: what is 'alphabetical' is given by the current locale.
For example, in the standard "C" locale, characters such as and (Ä) are not converted.
Sample strtolower ()
$ str = "Mary Had A Little Lamb and She LOVED It So"; $ str = strtolower ($ str); print $ str; # prints mary had a little lamb and she loved it so
See also: strtoupper () and ucfirst ().
Example 1. strtotime () examples
Returns a string with all alphabetic characters changed to uppercase.
For example, in the standard "C" locale, characters such as vowel and (ä) are not converted.
Sample strtoupper ()
$ str = "Mary Had A Little Lamb and She LOVED It So"; $ str = strtoupper ($ str); print $ str; # prints MARY HAD AND LITTLE LAMB AND SHE LOVED IT SO
See also: strtolower () and ucfirst ().
This function adjusts str so that all occurrences of all characters in from translate to the corresponding characters in it and return the result.
If they are of different lengths, the remaining characters from the longer of the two are ignored.
Sample strtr ()
$ addr = strtr ($ addr, "äåö", "aao");
strtr () can also be called with only two arguments.
When called with two arguments, it behaves as follows: from must be an array containing the pairs of strings to be swapped in the source string. strtr () always looks for the longest possible match and * DOES NOT REPLACE * those parts of the string that it has already worked on.
Samples:
$ trans = array ("hello" = "hello", "hello" = "hello"); echo strtr ("hi guys, I said hello", $ trans). "\ n";
This property (two arguments) was added in PHP 4.0.
See also: ereg_replace ().
substr_count () returns the number of occurrences of the needle string in the haystack string.
Example substr_count ()
print substr_count ("This is a test", "is"); // prints out 2
substr () returns the part of the string argument specified by the start and length arguments.
If start is positive, the returned string starts with the start -th character of the string, counted from zero.
For example, in the string 'abcdef', the character at position 0 is 'a', the character at position 2 is 'c', and so on.
Examples:
If start is negative, the returned string starts with the start -th character from the end of the string argument.
$ rest = substr ("abcdef", -1); // returns "f" $ rest = substr ("abcdef", -2); // returns "ef" $ rest = substr ("abcdef", -3, 1); // returns "d"
If this means a string with a negative length (start is after length), the returned string will consist of a single character at the start position.
If this means a string of negative length, the returned string will consist of a single character at the start position.
$ rest = substr ("abcdef", 1, -1); // returns "bcde"
See also: strrchr () and ereg ().
substr_replace () replaces the part of the string bounded by the start and (optionally) length arguments with the string in the replacement argument.
Returns the result.
If start is positive, the substitution starts at the start -th character of the string argument.
If start is negative, the substitution starts at the start -th character from the end of the string argument.
If length is present, and is positive, it represents the length of the part of the string argument that will be replaced.
If negative, represents the number of characters from the end of the string where the replacement should end.
If not present, strlen (string) is taken by default; ie the replacement ends at the end of the string argument.
Example substr_replace ()
See also str_replace () and substr ().
The substr_replace () function was added in PHP 4.0.
PHP supports the concept of functions in variables.
This means that when a variable name has parentheses appended, PHP will look for a function with the same name as the variable's value and try to execute it.
Functions in variables will not work with language constructs other than print (), such as echo (), unset (), isset (), and empty ().
This is one of the big differences between PHP functions and language constructs.
Example 13-1.
Example of functions in variables
? php function foo () {echo "V foo () br \ n";} function bar ($ arg = '') {echo "V bar (); was argument '$ arg'. br \ n";} $ func = 'foo'; $ func (); $ func = 'bar'; $ func ('test');
Example 1. swfaction () example
Example 2. swfaction () example
Example 3. swfaction () example
Example 4. swfaction () example
Example 1. swf_addbuttonrecord () function example
Example 2. swfbitmap () example
Example 1. swfbutton () example
Example 2. swfbutton - addaction () example
Example 1. swfdisplayitem - multcolor () example
Example 1. swfdisplayitem - rotateto () example
Example 1. swfdisplayitem - setname () example
Example 1. swfgradient () example
Example 1. swfmorph () example
Example 1. swfmovie - streammp3 () example
Example 1. swfshape - addfill () example
Example 1. swfshape () example
Example 1. swfshape - setline () example
Example 1. swfsprite () example
Example 1. swftext () example
See also link () - - creating hard links, and readlink () along with linkinfo ().
syslog () generates a log message that is distributed through the system log daemon. priority is a combination of the nature and level of the report; values ​​are described in the following sections.
However, the two characters in the message (% m) are replaced by the error message string (strerror) corresponding to the current errno value.
Table 1. syslog () Priorities (in descending order)
the system is unusable
immediate action is required
critical situation
error
warning
normal, but significant, message
informative message
debug message
Using syslog ()
? php define_syslog_variables (); // opens syslog, inserts process ID and also sends to standard error // output; use user-defined openlog logging mechanism ("myScripLog", LOG_PID _BAR_ LOG_PERROR, LOG_LOCAL0); // some code if (authorized_client ()) {// do something} else {// unauthorized client! // record access attempt $ access = date ("Y / m / d H: i: s"); syslog (LOG_WARNING, "Unauthorized client: $ access $ REMOTE_ADDR ($ HTTP_USER_AGENT)");} closelog () ;?
On Windows NT, the syslog service is emulated using the Event Log service.
See also define_syslog_variables (), openlog () and closelog ().
system () is a version of the C function of the same name; executes the passed command and displays the output.
If you pass a variable as the second argument, the return value of the executed statement is written to that variable.
If PHP runs as a server module, system () also automatically flushes the web server's output buffer after each line of output.
Returns the last line of the command output on success, FALSE on failure.
See also exec (), PassThru (), popen (), EscapeShellCmd (), and the backtick operator.
Creates a temporary file with a unique name in the specified directory.
If the directory does not exist, tempnam () can create a file in the system directory for temporary files.
The behavior of the tempnam () function is platform dependent.
On Windows, the dir parameter takes precedence over the TMP system variable, on Linux the TMPDIR variable takes precedence, and SVR4 always uses the dir parameter if this directory exists.
See your system documentation for tempnam (3).
Returns the name of the new temporary file, NULL on error.
Example 1. tempnam () example
The behavior of this feature has changed in version 4.0.3.
See also tmpfile ().
This function sets the search domain when calling the gettext () function, usually named after the application.
Returns the previous default domain.
When called without arguments, it returns the current setting without changing it.
Creates a temporary file with a unique name, in write mode, and returns a descriptor of this file similar to fopen ().
The file is automatically deleted when you close it (using fclose ()) or when you quit the script.
For details, see the system documentation for the tmpfile (3) function and the stdio.h file.
See also tempnam ().
It will try to set the filename change time to time.
If filename is not present, the current time is used.
If this file does not exist, it will be created.
Touch sample ()
This function removes unprintable characters from the beginning and end of a string and returns a string without those characters.
The nonprintable characters that are currently being removed are: "\ n", "\ r", "\ t", "\ v", "\ 0", and a space.
See also chop (), rtrim () and ltrim ().
This function sorts the arrays so that the indexes maintain a connection to the values.
This is especially useful when sorting associative arrays, where the order of the elements is important.
The comparison function is user-defined.
See usort () and uksort () for examples of user-defined comparison functions.
See also: usort (), uksort (), sort (), assort (), arsort (), ksort () and rsort ().
Changes the first character of the str argument if this character is alphabetic.
Note: what 'alphabetical' means determines the current locale.
Ucfirst sample ()
$ text = 'mary had a little lamb and she loved it so.'; $ text = ucfirst ($ text); // $ text is now Mary had a little lamb // and she loved it so.
See also strtoupper () and strtolower ().
Changes the first character of each word in the str argument to an uppercase letter if that character is alphabetic.
Ucwords sample ()
Mary Had A Little // Lamb And She Loved It So.
The definition of a word is: any string of characters that immediately follows a non-printable character (ie: space, scrolling, moving to a new line, carriage return, horizontal tab, and vertical tab0).
See also strtoupper (), strtolower () and ucfirst ().
This function sorts fields by keys using a user-defined comparison function.
If you need to sort the fields according to more complicated criteria, you should use this function.
Uksort sample ()
See also: usort (), uasort (), sort (), assort (), arsort (), ksort (), natsort () and rsort ().
umask () sets PHP's umask to 0777 and returns the old umask setting.
umask () without parameters returns the current umask setting.
This feature may not work on Windows
uniqid () returns a unique identifier based on the current time in microseconds, prefixed.
The prefix can be useful, for example, if you generate identifiers on several servers at the same time that could generate an identifier in the same microsecond.
The prefix can be up to 114 characters long.
If the optional lcg argument is TRUE, uniqid () adds additional "combined LCG" entropy to the end of its return value, which should make the results even more unique.
If the prefix is ​​empty If the prefix is ​​empty, the returned string will be 13 characters long.
If lcg is TRUE, it will be 23 characters long.
If you need a unique identifier or symbol, and you intend to pass this symbol to a user over the network (eg session cookies), we recommend using something like
$ token = md5 (uniqid ("")); // no random portion $ better_token = md5 (uniqid (rand ())); // better, difficult to guess
This creates a 32-character identifier (128-bit hexadecimal number) that is extremely difficult to predict.
See also: jdtounix ().
Deletes the filename.
Returns 0 or FALSE on error.
See also rmdir () for deleting directories.
unpack () unpacks the data from the binary string into an array by format.
Returns an array containing the expanded elements of a binary string.
unpack () works a little differently than in Perl, because the unpacked data is stored in an associative array.
To do this, list the various formatting codes and separate them with a slash /.
Example 1. unpack () format string
The resulting fields contain "chars1", "chars2" and "int".
For an explanation of formatting codes, see also: pack ()
Note that PHP internally stores signed integer values.
If you extract a large unsigned integer value that is the same size as the values ​​stored internally by PHP, the result will be a negative number, even if unsigned unpacking was specified.
Example 1. unserialize_callback_func example
Example 2. unserialize () example
Example 1. unset () example
Decodes all% ## codes in the given string.
Returns the decoded string.
Urldecode () example
$ a = split ('', $ querystring); $ i = 0; while ($ i count ($ a)) {$ b = split ('=', $ a [$ i]); echo 'Argument value', htmlspecialchars (urldecode ($ b [0])), 'is', htmlspecialchars (urldecode ($ b [1])), "BR"; $ i ++;}
See also urlencode (), rawurlencode (), rawurldecode ().
Returns a string that contained all non-alphanumeric characters except -_. replaced by a percent sign (%) followed by two hexadecimal digits and spaces encoded as plus signs (+).
The encoding is the same as for data entered from a web form, ie the same as for the application / x-www-form-urlencoded type.
This differs from RFC1738 encoding (see rawurlencode ()) in that, for historical reasons, spaces are encoded as plus (+) characters.
This feature is useful when encoding a string to be used as a query part of a URL as a convenient way to pass variables to the next page:
Urlencode () example
echo 'A HREF = "mycgi? foo =', urlencode ($ userinput), '"';
Note: Be careful when passing variables that could correspond to HTML entities.
The browser analyzes things like amp, copy and pound and uses the corresponding entity instead of the required variable name.
This is an obvious problem that the W3C has been pointing out for years.
The guide is here: http://www.w3.org/tr/html4/appendix/notes.html#hB.2.2 The guide is here http: //www.w3.org/tr/html4/appendix/notes.html # hB.2.2 PHP supports changing the argument delimiter to the semicolon recommended by the W3C through the .ini directive arg_separator.
Unfortunately, most user programs do not send data from forms in this format.
A more portable form is to use an amp as a delimiter; place.
You do not need to change arg_separator for this.
Leave it at, but encode the URL with htmlentities () (urlencode ($ data)).
Example of urlencode / htmlentities ()
echo 'A HREF = "mycgi? foo =', htmlentities (urlencode ($ userinput)), '"';
See also urldecode (), htmlentities (), rawurldecode (), rawurlencode ().
The usleep () function delays the execution of the script by the specified number of micro_seconds.
See also sleep ().
This function sorts the fields by values ​​using a user-defined comparison function.
The comparison function must return an integer less than 0, 0, and greater than 0 if the first argument is less than, equal to, or greater than the second argument.
Usort sample ()
In this simple case, of course, it would be more appropriate to use rsort ().
Usort () example with a multidimensional array
function cmp ($ a, $ b) {return strcmp ($ a ["fruit"], $ b ["fruit"]);} $ fruits [0] ["fruit"] = "lemons"; $ fruits [1] ["fruit"] = "apples"; $ fruits [2] ["fruit"] = "grapes"; usort ($ fruits, "cmp"); while (list ($ key, $ value) = each ($ fruits)) {echo "\ $ fruits [$ key]:". $ value ["fruit"]. "\ n";}
When sorting a multidimensional array, $ a and $ b contain references to the first index of the array.
The quicksort function used in some C libraries (eg on Solaris systems) can cause PHP to crash if the comparison function does not return consistent values.
See also: uasort (), uksort (), sort (), asort (), arsort (), ksort (), natsort () and rsort ().
Example 1. var_dump () example
Example 1. version_compare () Example
virtual () is an Apache-specific function equivalent to! - #include virtual ...- - in mod_include.
Executes an Apache sub-request.
It is useful for embedding CGI scripts or .shtml files, or anything else that Apache should parse.
CGI scripts must generate valid CGI headers.
This means that it must at least generate a Content-type header.
For PHP files you must use include () or require (); virtual () cannot be used to insert a document that is itself a PHP script.
WDDX function
wddx_add_vars () is used to serialize the passed variables and add the result to the packet specified by packet_id.
The variables to be serialized are specified as for wddx_serialize_vars ().
wddx_deserialized () accepts a packet string and deserializes it.
Returns the result, which can be a string, a number, or an array.
The structures are deserialized into associative fields.
wddx_packet_end () terminates the WDDX packet specified by the packet_id argument and returns the string containing that packet.
wddx_packet_start () is used to start a new WDDX packet for incremental variable addition.
Accepts the optional comment string and returns the packet ID for use in other functions.
Inside the packet, it automatically creates a structure definition that will contain the added variables.
wddx_serialize_value () is used to create a WDDX packet from a single given value.
It accepts the value contained in var and the optional comment string to be used in the packet header, and returns a WDDX packet.
wddx_serialize_vars () is used to create a WDDX packet with a structure that contains a serialized representation of the passed variables.
wddx_serialize_vars () accepts a variable number of arguments, each of which can be either a string containing a variable name, or a field of variable names, or another field, and so on.
Example 1. wddx_serialize_vars example
The above example will create:
We wrap the string str on the column specified by the (optional) break argument.
If the width or break argument is not specified, wordwrap () automatically wraps the lines of the string on column 75 with the character '\ n' (end of line).
If the cut argument has a value of 1, the string always wraps to the specified width.
So if you have a word longer than the given width, it will be split. (See the second example.)
The cut argument was added to PHP 4.0.3.
Wordwrap sample ()
$ text = "A fast brown fox jumped over a lazy dog."; $ newtext = wordwrap ($ text, 20); echo "$ newtext \ n";
This example would show:
The fast brown fox jumped over the lazy dog.
$ text = "Very long sloooooooooo."; $ newtext = wordwrap ($ text, 8, "\ n", 1); echo "$ newtext \ n";
Very long sloooooo ooooovo.
See also: nl2br ().
Example 1. moldb.xml - small database of molecular information
Example 2. parsemoldb.php - parses moldb.xml into and array of molecular objects
XSLT function
A field containing an object reference and a method name can be used instead of the function name.
This handle is needed in all subsequent XSL function calls.
If it does not receive a handle, it returns the number of the last error, regardless of its occurrence.
Returns the current error text of the given XSL processor.
If it does not receive a handle, it returns the text of the last error, regardless of its occurrence.
Releases the XSLT processor identified by the passed handle.
xslt_process () takes a string containing the XSLT stylesheet as the first argument, a string containing the XML data you want to transform as the second argument, and a string containing the transformation results as the third argument. xslt_process () returns TRUE on success and FALSE on failure. You can use the xslt_errno () and xslt_error () functions to obtain the number and text of the error that may have occurred during the transformation.
Use xslt_process () to transform three strings
? php $ xslData = 'xsl: stylesheet version = "1.0" xmlns: xsl = "http: / /www.w3.org / 1999 / XSL / Transform" xsl: template match = "article" table border = "1" cellpadding = "2" cellspacing = "1" tr td width = "20%" / title td width = "80%" h2 xsl: value-of select = "title" / h2 h3 xsl: value-of select = "author" / h3 br xsl: value-of select = "body" / td / tr / table / xsl: template / xsl: stylesheet '; $ xmlData = '? xml version = "1.0"? article title Learning German / title author Sterling Hughes / author body Essential phrases: br br Komme sie mir sagen, woe die toilette es? br A great beer please! br Please. br / body / article '; if (xslt_process ($ xslData, $ xmlData, $ result)) {echo "
Specify the SAX handlers for the handle specified in xh.
Functions for working with YP / NIS
See also yp_err_string ().
See also yp_errno ().
yp_first () returns the first key / value pair of the given map in the given domain, or FALSE.
Sample NIS first
? php $ entry = yp_first ($ domain, "passwd.byname"); $ key = key ($ entry); echo "The first record in this map has a key". $ key. "and value". $ entry [$ key] ;?
See also yp-get-default-domain ()
yp_get_default_domain () returns the default node domain or FALSE.
Can be used as a domain argument in subsequent NIS calls.
An NIS domain can be described as a group of NIS maps.
Every server that needs to look up information joins a specific domain.
For more detailed information, see the documentation mentioned in the introduction.
Sample default domain
? php $ domain = yp_get_default_domain (); echo "The default NIS domain is:". $ domain ;?
yp_master () returns the master NIS server name of a specific map.
Sample NIS master
? php $ number = yp_master ($ domain, $ mapname); echo "The master of this map is:". $ master ;?
See also yp-get-default-domain ().
yp_match () returns the value associated in the given map with the passed key or FALSE.
The key must be given exactly.
Sample NIS match
? php $ entry = yp_match ($ domain, "passwd.byname", "joe"); echo "The corresponding entry is:". $ entry ;?
In this case it could be: joe: ## joe: 11111: 100: Joe User: / home / j / joe: / usr / local / bin / bash
yp_next () returns the next key / value pair in the map after that key, or FALSE.
NIS sample next
? php $ entry = yp_next ($ domain, "passwd.byname", "joe"); if (! $ entry) {echo yp_errno (). ":". yp_err_string ();} $ key = key ($ entry); echo "The item following joe's has a key". $ key. "and value". $ entry [$ key] ;?
yp_order () returns the map sequence number or FALSE.
Sample NIS order
? php $ number = yp_order ($ domain, $ mapname); echo "The serial number of this map is:". $ order ;?
See also: yp-get-default-domain ().
Example 1. zend_version () Example
Preface
PHP has come a long way in the last few years.
Growing into one of the most prominent languages ​​mastering the Web has not been easy.
Those of you who are interested in learning at a glance how PHP has grown to its current form, read on.
PHP is the successor to an older product called PHP / FI.
PHP / FI was created by Rasmus Lerdorf in 1995, initially as a simple set of Perl scripts for processing access records to his site.
He called this set 'Personal Home Page Tools'.
Because more functionality was needed, Rasmus wrote a much larger C implementation that was able to communicate with databases and allow users to develop simple dynamic Web applications.
Rasmus has decided to release the PHP / FI source code for everyone so that anyone can use it, as well as fix bugs and improve the code.
PHP / FI, which stands for Personal Home Page / Forms Interpreter, included some of the basic functionality of PHP as we know it today.
It had Perl-type variables, automatic interpretation of form variables, and syntax embedded in HTML.
The syntax itself was similar to Perl, although much more limited, simpler, and somewhat inconsistent.
In 1997, PHP / FI 2.0, the second implementation written in C, became a cult issue for (an estimated) thousands of users worldwide, with approximately 50,000 domains announcing PHP / FI installed, accounting for about 1% of all domains on the Internet.
Even though more people started contributing pieces of code to the project, it was still a big one-man project.
PHP / FI 2.0 was not officially released until November 1997, after spending most of its life in beta.
Shortly afterwards, the first alpha version of PHP 3.0 followed.
PHP 3.0 was the first version that came very close to the kind of PHP we know today.
It was created by Andi Gutmans and Zeev Suraski in 1997 as a completely rewritten whole, after finding PHP / FI 2.0 significantly "undersized" for developing their e-commerce applications.
In an effort to collaborate and begin building on the existing PHP / FI user base, Andi, Rasmus and Zeev decided to work together to declare PHP 3.0 the official successor to PHP / FI 2.0, and PHP / FI 2.0 development was essentially halted.
One of the most powerful weapons of PHP 3.0 was its huge scalability.
To provide a solid infrastructure for many different databases, protocols, and APIs to end users, PHP 3.0 extension capabilities have also attracted dozens of developers who have joined and created new extension modules.
This was undoubtedly the key to the huge success of PHP 3.0.
Another key element in PHP 3.0 was support for object-oriented syntax and a much stronger and more consistent language syntax.
The new language was released under a new name, which removed the implication of limited personal use, which was called PHP / FI 2.0.
It was called only 'PHP', which is a recursive acronym - PHP:
At the end of 1998, PHP grew to a range of (estimated) tens of thousands of users and hundreds of thousands of Web sites.
At its peak, PHP 3.0 was installed on approximately 10% of all Web servers on the Internet.
PHP 3.0 was officially released in June 1998, after spending about 9 months in public testing.
In the winter of 1998, shortly after the official release of PHP 3.0, Andi Gutmans and Zeev Suraski began working on the PHP kernel.
The goal of the design was to increase performance for complex applications and improve the modularity of the PHP code base.
Such applications were able to work with PHP 3.0 (thanks to new capabilities and support for a wide range of databases and APIs from other developers), but PHP 3.0 was not designed to run such demanding applications efficiently.
The new engine, called 'Zend Engine' (built from their first names, Zeev and Andi), successfully met the design objectives and was launched in mid-1999.
PHP 4.0, based on this engine and complemented by a wide range of new features, was officially released in May 2000, less than two years after its predecessor, PHP 3.0.
To significantly increase the performance of this version, PHP 4.0 adds other key features, such as support for many Web servers, HTTP sessions, output buffering, more secure ways of processing user input, and many new language constructs.
PHP 4 is currently the latest released version of PHP.
Work has already begun on modifying and improving the Zend Engine kernel to integrate features that were designed for PHP 5.0.
Today, PHP is used by (an estimated) hundreds of thousands of developers, and installed PHP is reported by several million servers - ie over 20% of domains on the Internet.
The PHP development team includes dozens of developers, as well as dozens of other people working on PHP-related projects such as PEAR and the documentation project.
History of PHP related projects
Annex A.
As PHP grew, it began to be considered a globally popular development platform.
One of the most interesting ways to observe this trend is to follow books on PHP published in recent years.
If we remember correctly, the first book on PHP 'PHP - Dynamische Webauftritte professionell realisieren' - a German book published in 1999, by Egon Schmid, Christian Cartus and Richard Blume.
The first book in English was published shortly thereafter: 'Core PHP Programming' by Leon Atkinson.
Both of these books dealt with PHP 3.0.
These two books were the first of their kind - and were followed by a large number of books by various authors and publishers.
There are over 40 books in English, 50 books in German and over 20 books in French.
In addition, you can find books on PHP in many other languages, including Spanish, Korean, Japanese, and Hebrew.
Of course, this large number of books, written by various authors, published by many publishers and their availability in so many languages ​​- is a confirmation of the worldwide success of PHP.
Other publications on PHP
To the best of our knowledge, the first article on PHP in a print magazine was published in French Informatiques Magazine in late 1998 and dealt with PHP 3.0.
As with books, it was the first in a long line of articles published in various reputable magazines.
Articles about PHP have appeared in Dr.
Dobbs, Linux Enterprise, Linux Magazine and many more. Articles on the transition from ASP-based applications to the PHP platform under Windows have even appeared on the purely Microsoft MSDN!
Books on PHP
PEAR, the PHP Extension and Application Repository - originally a PHP Extension and Add-on Repository - is a PHP version of "foundation classes" and may grow into one of the key distribution methods in the future. both PHP extensions and PHP extensions written in C, among developers.
PEAR was born in a discussion at a PHP Developers' Meeting (PDM) in January 2000 in Tel Aviv.
It was created by Stig S.
Bakken and delegated to his eldest daughter Malin Bakken.
Since the beginning of 2000, PEAR has grown into a large, significant project with a large number of developers working on common, widely applicable functionality for the benefit of the entire PHP community.
Today, PEAR includes a wide variety of infrastructure "foundation classes" for database access, e-commerce content caching, and more.
The PHP Quality Assurance Initiative was set up in the summer of 2000 to criticize the fact that the released versions of PHP were not sufficiently tested for the production environment.
The team now consists of a solid group of developers who have a good understanding of the PHP code base.
These developers spend a lot of time localizing and debugging PHP.
In addition, there are many team members who then test it and provide feedback on these fixes on a wide range of platforms.
PHP-GTK is a PHP solution for writing GUI applications for the client side.
Andrei Zmievski recalls the planning and creation process of PHP-GTK:
GUI programming has always been one of my interests and I found Gtk + a very nice toolkit, except that programming with its use in C is sometimes tedious.
After my experience with PyGtk and GTK-Perl implementations, I decided to see if I could create, at least a little, an interface to Gtk + in PHP.
Starting in August 2000, I had a little more free time, so I started experimenting.
My main guide was to implement PyGtk, which was a truly functionally complete and user-friendly interface.
James Henstridge, author of PyGtk, gave me very useful advice during the early stages of development.
Handwriting the interface to all Gtk + functions was completely out of the game, so I was working on the idea of ​​a code generator, similar to PyGtk.
The code generator is a PHP program that reads a set of .defs files containing information about Gtk + classes, constants and methods and generates C code that provides an interface for them.
What cannot be generated automatically can be written manually in the .overrides file.
The work on the code generator and the infrastructure took some time, because in the fall of 2000 I was able to spend little time working on PHP-GTK.
When I showed it to Frank Kromann, he was interested and started helping me work on the code generator and implementation for Win32.
When we wrote the first program "Hello world!" and they launched it, it was extremely exciting.
It took several months for the project to reach a presentable state and the initial version was released on March 1, 2001.
The story immediately hit SlashDot.
Given the scale of the PHP-GTK project, I set up separate newsgroups and CVS repositories for it, as well as (with the help of Colin Viebrock) the gtk.php.net website.
Documentation would also need to be done, and James Moore hurried to help with it.
The released version of PHP-GTK has already gained popularity.
We have our own documentation team, the manual is constantly improving, people are starting to write extensions for PHP-GTK, and more and more exciting applications.
26-01-2003
Copyright © 1997, 1998, 1999, 2000, 2001, 2002 the PHP Documentation Group
Chapter 3.
Example 3-6.
Example 3-7.
Example 3-8.
Example 3-5.
This is especially important if the ClearModuleList This is especially important if the ClearModuleList directive is defined.
Example 3-9.
Example 3-1.
Example 3-2.
Example 3-10.
Example 3-11.
Example 3-12.
Example 3-3.
Example 3-4.
Table 3-1.
Example 1-1.
We are starting
Chapter 1.
Chapter 14.
Chapter 6.
PHP supports comment notations for 'C', 'C ++' and Unix shell languages.
? php echo "This is a test"; // This is a one-line comment of type C ++ / * This is a multiline comment and one more comment * / echo "This is another test"; echo "Last Test"; # Is this a shell-type comment?
One-line comment types actually comment to the end of a line or current block of PHP code, whichever comes first.
h1 This is the? php # echo "small"; example. / h1 p The header on the previous line will be 'This is an example'.
You should be careful about nesting 'C ++' comments, which can occur when commenting out large blocks.
? php / * echo "This is a test"; / * This comment will cause a problem * / * /?
Separation of instructions
There are four ways to leave HTML and enter "PHP mode":
Example 6-1.
Ways to leave HTML
1.? echo ("this is the simplest SGML processing instruction \ n") ;?
2.? Php echo ("if you want to process XHTML or XML documents, use this \ n") ;?
3. script language = "php" echo ("some editors (such as FrontPage) do not have processing instructions in love"); / script 4.% echo ("or you can use ASP tags");%% = $ variable; # this is an abbreviation for "% echo .."%
The first method is only available if short tags are enabled.
This can be done by enabling the short_open_tag configuration directive in the PHP configuration file, or by compiling PHP with the configure option --enable-short-tags.
The generally preferred method is the second method, as it allows easy implementation of further XHTML generation from PHP.
The fourth method is available only if ASP tags have been enabled using the asp_tags configuration directive.
ASP tag support was added in 3.0.4.
The immediately following end-of-line sequence is part of the closing tag.
Language references
Instructions are separated in the same way as in C or Perl - end each expression with a semicolon.
The closing tag (?) Also implies the end of the expression, so the following examples are equivalent:
? php echo "This is a test"; ? php echo "This is a test"?
Comments
PHP defines several constants and provides a mechanism for defining others at runtime.
Constants are very similar to variables except for two things: constants must be defined using the define () function, and they cannot take on other values ​​later.
The predefined constants (always available) are:
The name of the script file that is currently being read.
The line number in the script that is being read.
When used in a file embedded with "include" or "require", it contains a position within that file.
Text representation of the version of the running PHP parser, eg '3.0.8-dev'.
The name of the operating system on which the PHP parser is running, eg 'Linux'.
True value (logical one).
False value (logical zero).
Indicates an unmanageable error other than "parse error".
Indicates a state where PHP knows something is wrong, but will continue.
These conditions can be handled in the script itself.
An example would be an invalid "regexp" (regular expression) in the ereg () function.
Script parsing error (wrong syntax).
Treatment is not possible.
There was something that could be a mistake.
Script execution continues.
Examples include a text index of an unquoted field or working with a variable that has not yet been defined.
All E_ * constants combined into one.
When used with the error_reporting () function, it causes reporting of all problems registered by PHP.
E_ * constants are typically used with the error_reporting () function to set the error reporting level.
See all of these constants in Error Handling.
You can define additional constants using the define () function.
Note that these are constants, not Cechek macros; constants can only represent valid scalar data.
Definition of constants
? php define ("CONSTANT", "Hello world."); echo CONSTANT; // prints "Hello world."?
Example 9-2.
Using __FILE__ and __LINE__
? php function report_error ($ file, $ line, $ message) {echo "An error occurred in the file $ file at line $ line: $ message.";} report_error (__ FILE __, __ LINE__, "Something is wrong!") ;?
Variables from outside PHP
Expressions
Expressions are the most important building blocks of PHP.
In PHP, almost everything you type is an expression.
The simplest, yet most accurate definition of an expression is "everything that has value".
The most basic forms of expressions are constants and variables.
When you type "$ a = 5", you assign '5' to $ a. '5' has, of course, a value of 5, or in other words, '5' is an expression with a value of 5 (in this case, '5' is an integer constant).
After this assignment, you will expect the value of $ a to be 5, so if you typed $ b = $ a, you would expect the same as when you typed $ b = 5.
In other words, $ a is an expression with a value of 5.
If everything works properly, that's exactly what will happen.
Functions are a slightly more complex example of expressions.
Consider, for example, this function:
Assuming you are familiar with the concept of functions (if not, see the chapter on functions), you would assume that typing $ c = foo () is basically the same as $ c = 5, and you are right.
Functions are expressions with a value of their return value.
The foo () function returns 5, so the value of the expression 'foo ()' is 5.
Usually functions do not return a constant value, but calculate something.
Of course, values ​​in PHP don't have to be just integers, and very often they aren't.
PHP supports three types of scalar values: integer, real (floating point), and strings (scalar values ​​are values ​​that cannot be "broken" into smaller parts, unlike arrays, for example).
PHP also supports two composite (non-scalar) types: arrays and objects.
Each of these types of values ​​can be assigned to a variable or returned from a function.
PHP / FI 2 users should not feel the change.
But PHP goes much further in terms, as do many other programming languages.
PHP is an expression-oriented language, in the sense that almost everything is an expression.
Consider the example we have already dealt with, '$ a = 5'.
We immediately see that two values ​​are included here, the integer constant '5' and the value $ a, which is updated to 5.
But it is true that there is another value, it is the value of the assignment itself.
The assignment as such evaluates the assigned value, in this case 5.
In practice, this means that '$ a = 5', no matter what it does, is an expression with a value of 5.
Therefore, '$ b = ($ a = 5)' is the same as' $ a = 5; $ b = 5; '(the semicolon indicates the end of the expression).
Because the blanks are parsed from right to left, you can also type '$ b = $ a = 5'.
Another good example of expression orientation is pre- and post-incrementation and decrementation.
Users of PHP / FI 2 and many other languages ​​know the notation variable ++ and variable--.
These are increment and decrement operators.
In PHP / FI 2, '$ a ++' had no value (it is not an expression) and therefore could not be assigned or otherwise used.
PHP extends capabilities by turning these constructs into expressions, like in C.
In PHP, as in C, there are two types of incrementation - pre-incrementation and post-incrementation.
Both essentially increment the variable and the effect on this variable is the same.
The difference is in the value of the incremental expression.
Pre-incrementation, written as '++ $ var', evaluates the expression to an incremented value (PHP increments the variable before reading its value, hence "pre-incrementation").
Post-incrementation, written as '$ var ++', evaluates the expression to the original value of the variable $ var, before incrementation (PHP increments the variable after reading its value, hence "post-incrementation").
A very common type of expression is comparative expression.
TRUE.
PHP supports (greater than), = (greater than or equal to), == (equals),! = (Does not equal), (less than), and = (less than or equal to).
These expressions are most commonly used in conditions such as the if construct.
The last example of expressions we will deal with is a combination of assignments and operators.
You already know that if you want to increment $ a one, you simply type '$ a ++' or '++ $ a'.
But what if you want to increase the value by another number, such as 3?
You could type '$ a ++' several times in a row, but of course it's not efficient or convenient.
The expression '$ a + 3' evaluates the value of $ a plus 3 and is assigned back to $ a, which gives $ a incremented by 3.
In PHP, as in many other languages ​​(such as C), you can write it in a shorter way, which over time will become clearer and faster to understand.
Addition of 3 to the current value of $ a can be written as '$ a + = 3'.
This is exactly "take the value of $ a, add 3 to it and assign it back to $ a".
In addition to shorter and clearer notation, the advantage is also faster execution.
The value '$ a + = 3', as the value of the regular assignment, is the assigned value.
Note that this is NOT 3, but $ a plus 3 (which is the value of the expression assigned to $ a).
This way you can use any binary operator, for example '$ a - = 5' (subtract 5 from $ a), '$ b * = 7' (multiply $ b by 7), etc.
There's another term that may seem strange if you haven't seen it in other languages: ternary conditional operator:
$ first? $ species: $ third
The following example should help you better understand pre- and post-incrementation as well as expressions in general:
The assignment value (24) is assigned to $ h and $ h thus gaining the value 24. * /
It was said at the beginning of the chapter that we would describe different types of constructs, and as promised, expressions can be constructs.
In this case, the constructs have the format 'expr' ';', which means "expression followed by a semicolon.
In the construct '$ b = $ a = 5;', $ a = 5 is a valid expression, but it is not a construct in itself. '$ B = $ a = 5;' is also a valid construct.
In the previous paragraph (sometimes elsewhere) I use the term "construct" for the English word "statement".
This translation is not very correct, but there is no suitable term in the Czech programming language.
The last thing that deserves mention is the truth value of the expressions.
In many cases, especially conditions and cycles, you are not interested in the specific value of the expression, but only in whether it is TRUE or FALSE.
The constants TRUE and FALSE (case insensitive) represent two possible Boolean (truth) values.
If necessary, the expression is automatically converted to a boolean type.
PHP provides a full and powerful implementation of expressions and completely documenting them is beyond the scope of this manual.
The above examples should show you what expressions are and how to construct useful expressions.
In the rest of the manual, we will write expr as any valid PHP expression.
Constants
Operators
Explanation of references
Chapter 11.
The default assignment operator is "=".
You might think it's "equals" at first.
Not.
This really means that the left operand is assigned the value of the expression on the right (ie "set to", "assign to", etc.).
The value of the assignment expression is the value that is being assigned.
I.e. the value "$ a = 3" is the number 3.
This allows you to perform various tricks:
$ a = ($ b = 4) + 5; // $ a is now equal to 9, and $ b has been set to 4.
In addition to the basic assignment operator, there are "combined operators" for all binary arithmetic and string operators that allow you to use a value in an expression and then reassign the value of that expression.
$ a = 3; $ a + = 5; // sets $ a to 8, as if to say: $ a = $ a + 5; $ b = "Hello"; $ b. = "there!"; // sets $ b to "Hello there!", just like $ b = $ b. "push !";
Note that the assignment copies the value of the original variable to the new variable (value assignment), so changes from one of them do not affect the other variable.
This can also make sense when you need to copy something like a huge array within a short cycle.
PHP 4 supports link assignment using the syntax $ var = $ othervar ;, but this is not possible in PHP 3. "Link assignment" means that both variables point to the same data and nothing is copied anywhere.
To learn more about references, please read the Reference Explanations.
Bitwise operators
Bitwise operators allow you to "flip" a specific bit in integer to one or zero.
If both the left and right parameter are strings, the bitwise operators work on the characters in those strings.
? php echo 12 ^ 9; // Prints '5' echo "12" ^ "9"; // Prints the character Backspace (ascii 8) // ('1' (ascii 49)) ^ ('9' (ascii 57)) = # 8 echo "hello" ^ "hello"; // Print ascii values ​​# 0 # 4 # 0 # 0 # 0 // 'a' ^ 'e' = # 4?
Table 11-2.
Example
Result
And (logical product)
The bits are set, where is one in $ a and $ b.
Or (log sum)
Bits are set where one is in $ a or v $ b (and in both at the same time).
Xor (exclusive logical sum)
Bits are set where one is in $ a or in $ b, but not in both at the same time.
Not (negation)
Where there is zero, it will be number one, and vice versa.
Move left
Shifts the bits in $ and $ b steps (places) to the left (each step means "multiplication by two").
Move right
Shifts the bits in $ and $ b steps (places) to the right (each step means "division by two").
Assignment operators
Comparison operators
The comparison operators, as the name suggests, are used to compare two values.
Table 11-3.
Equality
TRUE, just when $ a is equal to $ b.
Identity
TRUE when $ a is equal to $ b plus this type (PHP 4 only).
Inequality
TRUE just when $ a is not equal to $ b.
Non-identity
TRUE if $ a is not equal to $ b or are not of the same type (PHP 4 only).
Smaller than
TRUE when $ a is sharply less than $ b.
Bigger than
TRUE when $ a is sharply larger than $ b.
Less than or equal to
TRUE when $ a is less than or equal to $ b.
Greater than or equal to
TRUE when $ a is greater than or equal to $ b.
Another conditional operator is the "?:" (Ternary) operator, which works the same as in C and many other languages.
Error control operators
PHP supports one error handling operator: the at (@) character.
When you prepend it to an expression in PHP, any error messages that may be generated in the expression will be ignored.
If track_errors is enabled, all error messages generated by the expression will be stored in the global variable $ php_errormsg.
This variable will be overwritten with each error, so always test it as soon as possible if you want to use it.
The @ operator only works on expressions.
The simple rule is: if you can get the value of something, you can put the @ operator in front of it.
This includes variables, functions, calls to include () constants, and so on.
You cannot precede it with function or class definitions and conditional structures of type if or foreach.
See also error_reporting ().
Currently, preferring the "@" error handling operator also disables critical error reporting, which causes the script to terminate.
This means, among other things, that if you use "@" to suppress errors from a function, and this function is not available or contains errors, the script will end here without any indication of what happened.
Execution operators
PHP supports one execution operator: inverted apostrophes (``).
Realize that these are not ordinary apostrophes!
PHP will try to execute content enclosed between these characters as a shell command; the output is returned (ie it will not only be listed on the outputs can be assigned to a variable).
The operator can be disabled if safe mode is active or shell_exec () is disabled.
See also escapeshellcmd (), exec (), passthru (), popen (), shell_exec (), and system ().
Increment / Decrement operators
Do you remember the basic arithmetic of school?
This is exactly the same.
Table 11-1.
Arithmetic operators
$ a + $ b
Addition
The sum of $ a and $ b.
$ a - $ b
Subtraction
Difference $ a and $ b.
$ a * $ b
Multiplication
The product of $ a and $ b.
$ a / $ b
Division
Share $ a and $ b.
$ a% $ b
Residue
The remainder after dividing $ a and $ b.
The division operator ("/") returns an integer value (the result of an integer division) just when both operands are integers (or strings that can be converted to integers) and the ratio is an integer.
If one of the operands is not an integer or the result is not an integer, the float value is returned.
PHP supports C-style pre- and post-increment and decrement operators.
Table 11-4.
Increment / decrement operators
Effect
Pre-incrementation
Increments $ o to one, then returns $ a.
Post-incrementation
Returns $ a, then increments $ o to one.
Pre-decrementation
It decrements $ a to one, then returns $ a.
Post-decrementation
Returns $ a, then decrements $ o to one.
Here is an example of a simple script:
? php echo "h3 gt; Postincrementation / h3 gt;"; $ a = 5; echo "Should be 5:". $ a ++. "br \ n"; echo "Should be 6:". $ a. "br \ n"; echo "h3 Preincrementation / h3"; $ a = 5; echo "Should be 6:". ++ $ a. "br \ n"; echo "Should be 6:". $ a. "br \ n"; echo "h3 Postdegradation / h3"; $ a = 5; echo "Should be 5:". $ a- -. "br \ n"; echo "Should be:". $ a. "br \ n"; echo "h3 Preecrementation / h3"; $ a = 5; echo "Should be 4:". - $ a. "br \ n"; echo "Should be 4:". $ a. "br \ n";
Logical operators
Table 11-5.
TRUE when $ a and $ b are TRUE.
TRUE when $ a or $ b is TRUE.
TRUE when $ a or $ b is TRUE, but not both at the same time.
TRUE if $ a is not TRUE.
The reason for the two different variants of the "and" and "or" operators is that they have different priorities. (See Operator Priority.)
Priority of operators
There are two string operators.
One is the join operator ('.'), Which returns the join of the right and left arguments.
The second is the assignment concatenation operator ('. ='), Which appends the argument on the right to the argument on the left.
For more information, please read Assignment Operators.
$ a = "Hello"; $ b = $ a. "world!"; // now $ b contains "Hello world!" $ a = "Hello"; $ a. = "world!"; // now $ a contains "Hello world!"
Chapter 7.
Example 7-11.
Chapter 15.
As already mentioned, references are not indicators.
This means that this construct will not do what you expect:
It happens that $ var in the foo function is assigned $ bar in the calling context, but then $ GLOBALS ["baz"] is assigned.
There is no way to assign $ bar in the calling context to something else using the reference mechanism, because $ bar is not available in the foo function (it is represented by $ var, but $ var has only content and not a name combination with a value in the symbol table).
What references do
Passing references (by link)
References are a means in PHP to access the same content variables under different names.
They are not pointers like in C, they are aliases in the symbol table.
Note that in PHP, there is a difference between a variable name and its contents, so the same content may have different names.
The closest analogies are file names and files in UNIX - variable names are directory entries, variable contents are the files themselves.
References can be viewed as hardlinks in the UNIX file system.
You can pass a variable to a function by reference so that the function can modify its arguments.
The syntax is as follows:
function foo ($ var) {$ var ++;} $ a = 5; foo ($ a); // $ a is now 6
The following things can be passed by reference:
Variable, eg foo ($ a)
Construct with new, eg foo (new foobar ())
References returned from a function, eg:
No other expressions can be passed by reference, the result of this is not defined.
For example, the following referral examples are invalid:
function bar () // Notice missing {$ a = 5; return $ a;} foo (bar ()); foo ($ a = 5) // Expression, not variable foo (5) // Constant, not variable
What references are not
Returning references
Returning by reference is useful when you want to use a function to find a variable that should be assigned to a reference.
Use this syntax when returning references:
function find_var ($ param) {... some code ... return $ found_var;} $ foo = find_var ($ bar); $ foo - x = 2;
Unlike passing a parameter, you must use it here in both places - to indicate that you are returning a link and not a copy as usual, and to indicate that the reference has been assigned to $ foo instead of the normal assignment (value).
Reset links
Many syntactic constructs in PHP are implemented through a reference mechanism, so everything that has been said above about assigning references also applies to these constructs.
Some constructs, such as pass-through and return, have already been mentioned.
Other constructs using references are:
When you declare a variable as global $ var, you are actually creating a reference to the global variable.
Ie. it's the same as:
This means, for example, that setting $ var does not set a global variable.
In the object method, $ this is always a reference to the calling object.
When you unset a reference, you break the link between the variable name and its contents.
This does not mean that the content will be destroyed.
Again, it is good to remember the analogy with the UNIX unlink command.
PHP references make it possible to ensure that two variables refer to the same content.
Ie. when you do:
The same syntax can be used with functions that return references and with the new operator (in PHP 4.0.4 and later):
Failure to use the operator will cause the object to be copied.
When you use $ this in a class, it works with the current instance of the class.
An assignment without copies an instance (such as an object) and $ this will work with that copy, which is not always what is required.
Most of the time, you want to have a single instance to work with because of speed and memory allocation.
The second thing references do is pass variables by reference.
This is done by creating a local variable in the function and a variable in the context of the calling environment that references the same content.
The third thing references can do is return through references.
Example 7-4.
Example 7-5.
Example 7-6.
Example 7-7.
Example 7-8.
Example 7-9.
Example 7-10.
Example 7-1.
Table 7-1.
Example 7-2.
Example 7-3.
Variables
Chapter 8.
When a form is submitted to a PHP script, any variables from that form will be automatically available in that script.
If the track_vars configuration option is enabled, these variables will be placed in the $ HTTP_POST_VARS, $ HTTP_GET_VARS, and / or $ HTTP_POST_FILES associative fields, depending on the source of the variables.
For more information on these variables, please read Predefined Variables.
Example 8-1.
Simple form variable
When the above form is submitted, the input text value will be available in $ HTTP_POST_VARS ['username'].
Also see addslashes (), stripslashes () and magic_quotes_sybase.
Example 8-2.
form action = "array.php" method = "post" Name: input type = "text" name = "personal [name]" br Email: input type = "text" name = "personal [email]" br Beer: br select multiple name = "beer []" option value = "warthog" Warthog option value = "guinness" Guinness option value = "stuttgarter" Stuttgarter Schwabenbräu / select input type = "submit" / form
Any cookies sent to you from the client will automatically be turned into a PHP variable just like GET and POST method data.
If you wish to assign multiple values ​​to a single cookie, just add [] to the cookie name.
setcookie ("MyCookie []", "Testing", time () + 3600);
Example 8-3.
SetCookie Example
$ Count ++; setcookie ("Count", $ Count, time () + 3600); setcookie ("Cart [$ Count]", $ item, time () + 3600);
PHP automatically makes environment variables available as normal PHP variables.
echo $ HOME; / * Shows the HOME environment variable, if set. * /
Since information coming in via GET, POST and Cookie mechanisms also automatically create PHP variables, it is sometimes best to explicitly read a variable from the environment in order to make sure that you are getting the right version.
The getenv () function can be used for this.
You can also set an environment variable with the putenv () function.
$ varname.ext; / * invalid variable name * /
They are gettype (), is_array (), is_float (), is_int (), is_object (), and is_string ().
Variables with variable names
In PHP, variables are represented by a dollar sign, followed by the name of the variable.
Variable names are case sensitive.
Variable names are subject to the same rules as other labels in PHP.
A valid variable name begins with a letter or underscore, followed by any number of letters, numbers, or underscores.
As a regular expression it can be written as follows: '[a-zA-Z_ \ x7f- \ xff] [a-zA-Z0-9_ \ x7f- \ xff] *'
For our purposes, we will consider the characters az, AZ and ASCII characters from 127 to 255 (0x7f-0xff) here.
$ var = "Bob"; $ Var = "Joe"; echo "$ var, $ Var"; // prints "Bob, Joe" $ 4site = 'not yet'; // invalid; starts with the number $ _4site = 'not yet'; // valid; starts with an underscore $ täyte = 'mansikka'; // valid; 'ä' is ASCII 228.
In PHP 3, variables are always assigned a value.
This means that when you assign an expression to a variable, the entire value of the original expression is copied to the target variable.
Thus, for example, after assigning the value of one variable to another, changing one of them does not affect the other.
For more information on this assignment method, see Expressions.
PHP offers another way to assign values ​​to variables: link assignment.
This means that the new variable simply refers (in other words, "becomes an alias" or "points to") to the original variable.
Changes to new variables affect the original and vice versa.
It also means that nothing is copied; therefore, the assignment is faster.
However, this acceleration will only be detectable in close cycles or when assigning large fields or objects.
To assign a link, simply precede the variable to be assigned (the source variable) with an ampersand ().
For example, the following piece of code prints 'My name is Bob' twice:
? php $ foo = 'Bob'; // Assigns the value 'Bob' to $ foo $ bar = $ foo; // Link $ foo through $ bar. $ bar = "My name is $ bar"; // Change $ bar ... echo $ bar; echo $ foo; // $ foo is also changed.
One of the important things to keep in mind is that only named variables can be assigned via links.
? php $ foo = 25; $ bar = $ foo; // This is a valid assignment. $ bar = (24 * 7); // Invalid; refers to an unnamed expression. function test () {return 25;} $ bar = test (); // Invalid.?
Predefined variables
PHP provides a large number of predefined variables to any script it executes.
Unfortunately, many of these variables cannot be fully documented because they depend on which server the script is running on, the version and settings of the server, and other factors.
Some of these variables will not be available when PHP runs from the command line.
List of variables - see section Predefined variables.
In PHP 4.2.0 and later, the default set of predefined variables that are available globally has changed.
Individual input and server variables are not implicitly placed in a global context; instead, they are in the following superglobal fields.
However, you can still enforce the old behavior by setting register_globals in the php.ini file to 'On'.
For more information and the background to these changes, please see the PHP 4.1.0 Release Announcement.
As of version 4.1.0, PHP provides a set of predefined fields, containing web server variables (if applicable), environment, and user input.
These new fields have the peculiarity that they are automatically global - for example, automatically available in every context.
Superglobal variables are listed below; however, for a list of their contents and further discussion of the predefined variables in PHP and their nature, you must refer to the Predefined Variables section.
PHP superglobals (superglobal variables)
Contains a reference to each variable that is currently available in the global context of the script.
The keys to this field are the names of the global variables.
Variables set by the web server or otherwise directly related to the execution environment of the current script.
Analogous to the old $ HTTP_SERVER_VARS field (which is still available but discarded).
Variables provided to the script via HTTP GET.
Analogous to the old $ HTTP_GET_VARS field (which is still available but discarded).
Variables provided to the script via HTTP POST.
Analogous to the old $ HTTP_POST_VARS field (which is still available but discarded).
Variables provided to the script via HTTP cookies.
Analogous to the old $ HTTP_COOKIE_VARS field (which is still available but discarded).
Variables provided to the script via HTTP post file uploads.
Analogous uploads.
Analogous to the old $ HTTP_POST_FILES field (which is still available but discarded).
For more information, see POST Upload.
Variables provided to the script from the environment.
Analogous to the old $ HTTP_ENV_VARS field (which is still available but discarded).
Variables provided to the script through any input mechanism and therefore cannot be trusted.
Note: argv and argc will not be present here when running from the command line; are located in the $ _SERVER field.
The presence and order of variables in this field is defined according to the variables_order configuration directive.
This field has no direct analogy in PHP versions before 4.1.0.
Variables that are currently registered in the current script session.
Analogous to the old $ HTTP_SESSION_VARS field (which is still available but discarded).
For more information, see Sessions Handler Functions.
Context ("scope") of the variable
The context of a variable is the area in which it is defined.
Most variables in PHP have only one context.
It also includes files inserted using "include" or "require".
$ a = 1; include "b.inc";
Here the variable $ a will be available in the embedded script b.inc.
However, within user-defined functions, their local context is created.
$ a = 1; / * global context * / function Test () {echo $ a; / * reference to a variable in the local context * /} Test ();
This script does not produce any output because the "echo" construct references the local version of the variable $ a, and it has no value assigned in this context.
You may notice that this is a bit different than in C, where global functions are automatically available in functions unless they are specifically overshadowed by a local definition.
This can cause problems in that one can inadvertently change a global variable.
In PHP, global variables must be declared inside a function as global if they are to be used in it.
Example:
$ a = 1; $ b = 2; function Sum () {global $ a, $ b; $ b = $ a + $ b;} Sum (); echo $ b;
The above script prints "3".
Declaring $ a and $ b in a function as global variables ensures that the global version is used when referring to variables.
There is no limit to the number of global variables that can be manipulated in a function.
The second way to access variables from the global context is to use the special $ GLOBALS field defined in PHP.
The previous example can be overridden:
$ a = 1; $ b = 2; function Sum () {$ GLOBALS ["b"] = $ GLOBALS ["a"] + $ GLOBALS ["b"];} Sum (); echo $ b;
The $ GLOBALS field is an associative field with the name of the global variable as the key and the contents of the variable as the contents of the field element.
Another important feature of distinguishing variable contexts is the ability to use static variables.
A static variable exists only in the local context of the function, but it does not lose its value if program execution leaves that context.
Consider the following example:
function Test () {$ a = 0; echo $ a; $ a ++;}
This feature is a bit useless as it sets $ a to 0 and prints "0" on each call.
The $ a ++ construct, which increments the variable, has no meaning because the contents of the $ a variable are lost when the function exits.
In order for the function to have the real meaning of the counter and not lose the value, the variable $ a is declared as static:
function Test () {static $ a = 0; echo $ a; $ a ++;}
Now the value of the variable $ a is printed and incremented each time the Test () function is called.
Static variables also provide a way to solve recursive functions.
A recursive function is a function that calls itself.
Special care must be taken when writing recursive functions, as an endless cycle of calls may occur.
You need to make sure that your recursion is adequately completed.
The following simple function recursively counts to 10 using the static variable $ count to determine when to terminate:
function Test () {static $ count = 0; $ count ++; echo $ count; if ($ count 10) {Test ();} $ count--;}
Sometimes it is useful for variable names to be able to change, ie to be able to be set and used dynamically.
The normal variable is set by the following construct:
$ a = "hello";
A variable with a variable name takes the value of the variable and uses it as the variable name.
In the example above, hello can be used as a variable name by specifying two dollar signs:
$$ a = "world";
At this point, two variables have been defined and stored in the PHP symbol tree: $ with "hello" content and $ hello with "world" content.
Therefore, the construct:
echo "$ a $ {$ a}";
does exactly the same as:
echo "$ a $ hello";
so both produce: hello world.
When you use variables with variable names with fields, you must resolve the ambiguity problem.
I.e. when you type $$ a [1], the parser needs to know if you mean using $ a [1] as a variable or you want $$ a as a variable and then index [1] in that variable.
The syntax for resolving this ambiguity is $ {$ a [1]} for the first case and $ {$ a} [1] for the second.
Annex B.
The name of the global configuration file, php3.ini, has changed to php.ini.
There are slightly more changes to the Apache configuration file.
The MIME data types recognized by the PHP module have changed in particular.
You can modify your configuration files to work with both versions of PHP (depending on which is currently compiled for the server) using the following syntax:
The names of the directives for the Apache server have also changed.
As of PHP 4.0, there are only four directives for Apache that are related to PHP:
There are two differences between the "admin" values ​​and the others:
"Admin" values ​​(or flags) can only appear in server-wide configuration files (eg httpd.conf).
Default values ​​(or flags) cannot control certain PHP directives, such as safe mode (if you could change the safe mode settings in .htaccess files, safe mode loses its meaning).
Conversely, "admin" values ​​can interfere with any PHP directive.
To make the upgrade easier, PHP 4 includes scripts that automatically convert your Apache configuration file and .htaccess files to work with both PHP 3 and PHP 4.
These scripts DO NOT CONVERT MIME type description lines!
You must edit them manually.
To convert configuration files for Apache, run the apconf-conv.sh script (located in the scripts / apache / directory).
Your original configuration file will be saved as httpd.conf.orig.
To convert .htaccess files, run the aphtaccess-conv.sh script (also available in the scripts / apache / directory):
Even in this case, the original .htaccess files will be saved with an .orig extension.
Conversion scripts require the awk utility installed.
Running PHP 3 and PHP 4 at the same time
Parser behavior
PHP 3 introduced a bad habit of setting cookies in the reverse order of setcookie () in code.
PHP 4 corrects this and creates header lines for cookies in exactly the same order as they follow each other in the code.
Again, there may be problems with existing code, but the old behavior was so difficult to understand that it deserved a change to avoid further problems in the future.
Substitution for variables in strings
Handling global variables
Probably the most controversial change in behavior is the change in the empty () function. A string containing only the '0' (zero) character is now considered empty, which was not the case in PHP 3.
This new behavior makes sense for web applications where all input fields return strings, even if numeric input is required, and with PHP's ability to perform automatic type conversion.
On the other hand, in some cases, it can lead to erroneous behavior, the causes of which are difficult to find out if you do not know what to look for.
Initializers
Missing features
The values ​​were added for different error levels.
The usual values ​​were 15 for reporting all errors and warnings, 7 for reporting everything except informative messages, reporting bad style and similar things.
PHP 4 has a larger set of error and warning levels and comes with a configuration parser that now allows you to use symbolic constants to set the required behavior.
E_ALL.
Does it sound complicated?
Well, let's say you want to report all errors except for simple "style" warnings, which are categorized as described by the E_NOTICE symbolic constant.
Then put in the php.ini file: error_reporting = E_ALL ~ (E_NOTICE).
If you also want to suppress all warnings, add the corresponding constant in parentheses using the binary operator '_BAR_': error_reporting = E_ALL ~ (E_NOTICE _BAR_ E_WARNING).
Using the old values ​​of 7 and 15 to set up error reporting is a very bad idea because it overrides some newly added error classes, including syntax.
This can lead to very mysterious behavior where scripts do not work without issuing any error message.
This has led to a number of non-reproducible bug reports in the past when people report engine issues that they were unable to track.
The real cause was usually the missing closing parenthesis '}' in the file appended with "require", and the parser could not report it due to a misconfigured error message.
So checking error reporting settings should be the first thing if your scripts crash quietly.
The Zend engine can now be considered advanced enough to cause such strange behavior.
Many existing codes in PHP 3 use language constructs, which should be considered a very bad writing style, because although they do the intended things now, they can easily be disrupted by changes elsewhere.
PHP 4 will issue a lot of informational messages in situations where nothing happened in PHP 3.
An easy fix is ​​to turn off E_NOTICE messages, but it's usually better to fix the code.
The most common case that will produce such messages is the use of non-quoted strings as array elements.
However, if such a constant (somewhere else in the code) is defined, the script may crash.
This can grow into a security risk if an attacker redefines string constants in a way that gives them access rights they shouldn't have.
So PHP 4 will now warn you if you use a non-quoted string constant, such as $ HTTP_SERVER_VARS [REQUEST_METHOD].
Changing this to $ HTTP_SERVER_VARS ['REQUEST_METHOD'] will calm down the parser and greatly improve the style and security of your code.
Another thing in PHP 4 is reporting the use of uninitialized variables and array elements.
Extensions written for PHP 3 will not work with PHP 4, either at the binary or source level.
It is not difficult to port these extensions to PHP 4 if you have access to the original source code.
A detailed description of the porting process is not part of this text.
PHP 4 and the integrated Zend engine are characterized by significantly higher performance and capabilities, however, special care was taken to ensure that the impact on existing code was as small as possible.
So modifying your code from PHP 3 to PHP 4 should be much easier than switching from PHP / FI 2.0 to PHP 3.
Much of the existing code for PHP 3 should be ready to run without any changes, but you should be aware of a few important differences and take good care to test the code before changing the production environment version.
The following text should advise you on what to focus on.
Static variables and class item initializers only accept scalar values, while in PHP 3 they accepted any valid expressions.
This is, again, due to the division between parsing and code execution - when the parser processes the initializer, no code is executed yet.
You should use constructors instead to initialize items in classes.
For static variables, however, something other than ordinary value rarely makes sense.
Error reporting
As many new tools, features, and enhancements appear in PHP 4, you may find features that are missing from version 3.
A small number of kernel functions have disappeared because they do not work with the new parsing and code execution separation scheme in the Zend engine.
Other features and entire complete extensions have become obsolete in that newer features and extensions will serve the same role better or more generally.
Some features simply haven't been ported yet, and finally features and extensions are missing due to licensing conflicts.
Because PHP 4 separates parsing from interpretation, it is no longer possible to change the behavior of a parser (now embedded in the Zend engine) during the execution of a script that has already been parsed.
So the short_tags () function no longer exists.
You can still change the behavior of the parser by setting values ​​in the php.ini file.
Another PHP 3 tool that is not part of PHP 4 is the built-in debugging interface.
There are external add-ons for the Zend engine that provide similar features.
The Adabas and Solid database extensions are no longer available.
The unified ODBC extension is used instead.
unset (), although still available, is implemented as a language construct instead of a function.
This has no implications for the behavior of unset (), but a "unset" test using function_exists () returns FALSE, as with other language constructs that look like functions, such as echo ().
Another, more practical change is that you can no longer call unset () indirectly, ie. $ func = "unset"; $ func ($ somevar) will no longer work.
PHP Extensions 3
Parsing and code execution are now two completely separate steps; nothing in the code in the file is executed until a complete parsing of the entire file and everything that is needed has been successfully performed.
One of the new requirements that has arisen from this division is that all files attached via "require" and "include" must now be syntactically complete.
It is no longer possible to spread different parts of control structures across file boundaries.
I.e. you cannot start a for or while loop, if or switch branch in one file and end it (or continue with else, endif, case, or break) in another file.
It remains perfectly legal to insert additional code into loops or other control structures, only the control keywords and the corresponding braces {...} must be in the same compilation unit (file or string processed by eval ()).
This does not hurt as much as the above code decomposition, yet it can be considered a very bad style.
Another thing that is no longer possible is the rarely seen return of values ​​from files attached using "require".
It is still possible to return values ​​from files attached "include".
Conversion of configuration files
The latest operating systems provide versioning and scoping.
These resources allow you to run PHP 3 and PHP 4 simultaneously on a single Apache server.
The function is verified on the following platforms:
Linux + latest binutils (tested version of binutils 2.9.1.0.25)
Solaris 2.5 and later
FreeBSD (versions 3.2 and 4.0 tested)
To enable this option, you need to configure PHP 3 and PHP 4 to use APXS (--with-apxs) and the necessary binding extensions (--enable-versioning).
Otherwise, proceed in a completely standard way (for configuration, compilation and installation).
PHP 4 adds a new mechanism for substitution for variables in strings.
Now you can finally access items in objects and elements of multidimensional arrays inside strings.
This is done by enclosing the variables in braces with a dollar sign immediately after the opening parenthesis: {$ ...}
To insert the value of an object item into a string, you simply type "text {$ obj-member} text", while in PHP 3 you had to type something like "text". $ Obj-member. "text".
This should lead to more readable code, but it can cause problems with existing PHP 3 scripts.
However, you can test the combination of {$ characters in your code and replace them with \ {$ using your favorite search and replace tool.
While in PHP 3 and the first versions of PHP 4, attention was paid to simplicity when handling global variables, now the focus has shifted towards greater security.
So if the following case worked well in PHP 3, you need to unset it in PHP 4 ($ GLOBALS ["id"]) ;.
This is just one aspect of handling global variables.
You should always use $ GLOBALS, in newer versions of PHP 4 you will be forced to do so in most cases.
See the global reference for more on this issue.
Example B-1.
Changes in global variables
? php $ id = 1; function test () {global $ id; unset ($ id);} test (); echo ($ id); // This will print out 1 in PHP 4
Transition from PHP / FI 2 to PHP 3
Annex C.
PHP 3.0 uses abbreviated evaluation of logical expressions.
This means that for an expression like (1 _BAR_ _BAR_ test_me ()), the test_me () function will no longer be called, because nothing can affect the value of the expression after 1.
This is a small change in compatibility, but can cause unexpected side effects.
Error messages have changed
Return values ​​TRUE / FALSE
However, you will not see the part of the code where the error occurred.
Only the file name and line number where the error occurred will be listed.
Types of expressions
Abbreviated evaluation of logical expressions
PHP / FI 2.0 used the left side of expressions to determine what type the result should be.
PHP 3.0 takes both sides of an expression into account for type determination, and this can cause unpredictable behavior of 2.0 scripts in PHP 3.0.
Consider this example:
The fix for this example is easy.
Replace the original design with:
syntax while
PHP 3.0 has been rewritten from the ground up.
It has a proper parser, which is much more robust and consistent than the one in version 2.0.
Version 3.0 is also significantly faster and uses less memory.
Logically, some of these improvements were not possible without changes in compatibility, both syntax and functionality.
In addition, PHP developers tried to clean up both the syntax and semantics of PHP, which also brought some incompatibilities.
From a broader perspective, we believe that these changes are for the good of the cause.
This chapter will try to guide you through the incompatibilities you may encounter when migrating from PHP / FI 2.0 to PHP 3.0 and help you resolve them.
New elements will not be mentioned here unless necessary.
There is a conversion program that automatically converts your old scripts in PHP / FI 2.0.
You can find it in the converter directory in the PHP 3.0 distribution.
However, this program only captures syntax changes, so read this chapter carefully.
Start / end tags
An alternative way to write an if / elseif / else construct, using if (); elseif (); else; endif ;, cannot be effectively implemented without a significant increase in the complexity of the 3.0 parser.
Because of this, the syntax has changed:
Example C-5.
Transition: old if..endif syntax
Example C-6.
Transition: new syntax if..endif
Probably the first thing you'll notice is that the opening and closing tags (which indicate the beginning and end of the PHP code) have changed.
Old brands? have been replaced by three possible forms:
Example C-1.
Transition: old opening / closing signs
? echo "This is PHP / FI 2.0 code. \ n";
Example C-2.
Transition: first opening / closing marks
Example C-3.
Transition: second opening / closing marks
Example C-4.
Transition: third opening / closing marks
syntax if..endif
Most internal functions have been rewritten to return TRUE on success and FALSE on failure, unlike the original values ​​of 0 and -1 in PHP / FI 2.0.
The new behavior allows more logical programming, such as $ fp = fopen ("/ your / file") or fail ("darn!") ;.
Because PHP / FI 2.0 did not have clear rules for when a function jumped on failure, most scripts will probably need to be checked manually after using the 2.0 to 3.0 converter.
Example C-9.
Transition from 2.0: return values, old code
Example C-10.
Transition from 2.0: return values, new code
List of function aliases
Example E-1.
Example E-2.
Table E-1.
Example E-3.
Example E-4.
Example E-5.
Example E-6.
Example E-7.
Example E-8.
Example E-9.
PHP, which means "PHP:
Hypertext Preprocessor "is a widely used multi - purpose scripting language, distributed under an Open Source license, especially suitable for web application development and capable of embedding in HTML.
Much of its syntax is borrowed from C, Java, and Perl.
The goal of this language is to allow web developers to write dynamically generated pages quickly - but with PHP you can do so much more!
This manual consists mainly of a function reference guide, but also contains a language reference guide, an explanation of the main features and capabilities of PHP, and various additional information.
You can download the manual in various formats at http: / /www.php.net / docs.php.
Downloads are updated whenever the content changes.
For more information on how this manual is created, see the 'About the manual' appendix.
Function reference
These features allow you to manipulate and interact with fields in a variety of ways.
Fields are necessary for storing and working with variable sets.
Simple and multidimensional arrays are supported; they can be created by the user or as a function output.
There are database functions to populate fields with the results of database queries, and several other functions return fields.
See also: is_array (), explode (), implode (), split () and join ().
The aspell () functions allow you to verify the spelling of a word and offer possible corrections.
Note: aspell only works with very old (up to approximately .27. *) Versions of the aspell library.
This module and these versions of the aspell library are no longer supported.
If you want to use spell checking in PHP, use pspell instead.
It uses the pspell library, and works with newer versions of aspell.
You will need the aspell library available from: http://aspell.sourceforge.net/.
These features are only available if PHP has been configured with --enable-bcmath.
The bzip2 functions are used to transparently read and write bzip2 (.bz2) compressed files.
This module uses functions from the Julian Seward bzip2 library.
Bzip2 support is not available by default in PHP.
This module requires bzip2 / libbzip2 version = 1.0.x.
This extension has no configuration directives defined.
This extension defines one type of resource: a file pointer identifying the bz2 file being worked on.
This extension has no constants defined.
This example opens a temporary file and writes a test string to it; then prints the contents of the file.
A small example of bzip2
? php $ filename = "/ tmp / testfile.bz2"; $ str = "This is a test string. \ n"; // open file for writing $ bz = bzopen ($ filename, "w"); // send string to file bzwrite ($ bz, $ str); // close file bzclose ($ bz); // open file for reading $ bz = bzopen ($ filename, "r"); // read 10 characters print bzread ($ bz, 10); // print until the end of the file (or the next 1024th character) and close the file print bzread ($ bz); bzclose ($ bz) ;?
Calendar functions are only available if you have compiled a calendar extension located in the "dl" or "ext" directory in the PHP source code.
Please read the README file before using it.
Calendar extension is a set of features designed to simplify conversions between different calendars.
The mediator or standard on which it is based is the Julian Day Count.
This is the number of days beginning far before any date that most people would be interested in (somewhere around 4000 BC).
If you want to convert between calendar systems, you must first convert to Julian Day Count, then to the desired calendar.
Julian Day Count is very different from the Julian Calendar!
For more information on calendar systems, see http://genealogy.org/scottlee/cal-overview.html.
These instructions contain excerpts from this page (in quotation marks).
These features provide an interface to the CCVS API, allowing you to work directly with CCVS from your PHP scripts.
CCVS is Red Hat's "intermediary" solution in credit card processing.
It allows you to contact credit card processors directly via your * nix system and modem.
Using the CCVS module for PHP, you can process credit cards via CCVS in your PHP scripts.
The following references illustrate this process.
If you want to enable CCVS support in PHP, first find out the CCVS installation directory.
If you use this without specifying the path to your CCVS installation, PHP will try to look in the default CCVS installation location (/ usr / local / ccvs).
CCVS support requires the existence of $ ccvs_path / lib and $ ccvs_path / include, and the presence of cv_api.h in the include and libccvs.a directories in the lib directory.
Next, the ccvsd process needs to run.
In addition, PHP processes must run under the same user as CCVS (eg if you have installed ccvs as 'ccvs', your PHP processes must also run as 'ccvs').
More information about CCVS can be found at http://www.redhat.com/products/ccvs.
This section of documentation is being worked on.
For now, RedHat maintains a slightly outdated but still useful documentation at http://www.redhat.com/products/ccvs/support/CPVS3.3docs/ProgPHP.html.
These functions allow you to obtain information about classes and instances.
You can find out the name of the class to which the object belongs or its variables and methods.
Using these functions, you can find out not only the affiliation of an object to a class, but also its ancestor (ie which class the class of this object extends).
In this example, we first define a base class and an extension of that class.
The basic class describes general vegetables, whether edible or not, and regardless of their color.
The Spenat subclass adds a method for cooking this vegetable and another that determines if it is cooked.
Example 1. classes.inc
? php // base class with member variables and methods class Vegetables {var $ meals; var $ color; function Vegetables ($ meals, $ color = "green") {$ this - meals = $ meals; $ this - color = $ color;} function is_food () {return $ this - food;} function what_color () {return $ this - color;}} // end vegetable class // extends base class class Spenat extends Vegetables {var $ varena = false; function Spenat () {$ this - Vegetables (true, "green");} function cook_it () {$ this - varena = true;} function je_varena () {return $ this - varena;}} // end of class Spenat?
Then we create 2 objects from these classes and print information about them, incl. parent classes.
We also define some auxiliary functions, mainly for convenient information printing.
Example 2. test_script.php
pre? php include "classes.inc"; // auxiliary function function print_variable ($ obj) {$ field = get_object_vars ($ obj); while (list ($ property, $ value) = each ($ field)) echo "\ t $ property = $ value \ n";} function print_methods ($ obj) {$ field = get_class_methods (get_class ($ obj)); foreach ($ field as $ method) echo "\ tfunction $ method () \ n";} function class_parentage ($ obj, $ class) {global $$ obj; if (is_subclass_of ($$ obj, $ class)) {echo "Object $ obj belongs to class" .get_class ($$ obj); echo "which is a subclass of $ class \ n";} else {echo "Object $ obj does not belong to a subclass of class $ n \;"}} / / we instantiate 2 objects $ vegetable = new Vegetable (true, "blue"); $ listnaty = new Spenat (); // print information about both objects echo "vegetables:
CLASS ".get_class ($ vegetable)." \ N "; echo" leafy:
CLASS ".get_class ($ listnaty); echo", PARENT ".get_parent_class ($ listnaty)." \ N "; // print properties of vegetables echo" \ nvegetables:
Properties \ n "; print_vars ($ vegetables); // methods of leafy echo object \ \" leafy:
Methods \ n "; print_methods ($ listnaty); echo" \ nRodic: \ n "; class_parentage (" listnaty "," Spenat "); class_parentage (" listnaty "," Vegetables ") ;? / pre
It should be noted that in the example above, the $ listnate object is an instance of the Spenat class, which is a subclass of the Vegetables class, and therefore the last part of the above script prints:
[...] Parent:
Deciduous object does not belong to the Spenat subclass The deciduous object belongs to the Spenat class, which is a subclass of the Vegetables class
These features are only available in the Windows version of PHP.
They were added in PHP 4.
These constants are defined by this extension and will only be available if the extension was compiled with PHP or dynamically loaded at runtime.
Example 2. pdfclock example from pdflib 2.0 distribution
The behavior of these functions is affected by the parameter settings in php.ini.
This extension has no resource type defined.
The PHP version for Windows has built-in support for this extension.
No additional extensions need to be loaded to use these features.
PHP supports libcurl, a library created by Daniel Stenberg that allows you to connect and communicate with many different types of servers in many different types of protocols. libcurl currently supports http, https, ftp, gopher, telnet, dict, file and ldap protocols. libcurl also supports HTTPS certificates, HTTP POST, HTTP PUT, FTP uploads (this also allows PHP ftp extensions), HTTP form uploads, proxies, cookies and user + password authentication.
If you want to use the CURL feature, you must install CURL.
PHP requires CURL 7.0.2-beta or higher.
PHP will not work with CURL versions earlier than 7.0.2-beta.
Next, you need to compile PHP with --with-curl [= DIR], where DIR is the location of the directory containing the lib and include directories.
The "include" directory should have a directory named "curl", which should contain the easy.h and curl.h files.
There should be a file named "libcurl.a" in the "lib" directory.
These features were added in PHP 4.0.2.
If you have PHP compiled with CURL support, you can start using CURL functions.
The basic principle of these functions is that you use curl_init () to initialize the CURL session, then use curl_exec () to set the transfer values, and finally close the session with curl_close ().
The following is a sample that uses the CURL function to download the PHP homepage to a file:
Use CURL extension to download PHP homepage
? php $ ch = curl_init ("http: //www.php.net/"); $ fp = fopen ("php_homepage.txt", "w"); curl_setopt ($ ch, CURLOPT_FILE, $ fp); curl_setopt ($ ch, CURLOPT_HEADER, 0); curl_exec ($ ch); curl_close ($ ch); fclose ($ fp);
These functions are only available if PHP was compiled with --with-cybercash = [DIR].
These features were added in PHP 4.
This extension is not available on Windows platforms.
They allow you to get the date and time from the server running PHP.
They can be used to format time and date notation in many different ways.
Please note that these features depend on the national settings of your server.
Pay special attention to summer time and leap years!
These functions are available as part of a standard module that is always available.
No installation is required to use these features, they are part of the PHP kernel.
Note that db2 conflicts with db3 and db4.
Note that db3 conflicts with db2 and db4.
Note that db4 conflicts with db2 and db3.
These functions allow you to store records in dbm databases.
This type of database (supported by Berkeley DB, GDBM, some system libraries, as well as the built-in flatfile library) stores key / value pairs (as opposed to full-fledged relational databases).
DBM sample
This extension is EXPERIMENTAL.
The behavior of this extension, the names of the functions and everything else documented here may change without notice in future versions of PHP.
Take this into account and use this module at your own risk.
These functions are only accessible if PHP has been configured with the --with-dom = [DIR] option, using the GNOME xml library.
At least libxml-2.0.0 (no beta) is required.
This module defines the following constants:
XML constants
Value
XML_ELEMENT_NODE
XML_ATTRIBUTE_NODE
XML_TEXT_NODE
XML_CDATA_SECTION_NODE
XML_ENTITY_REF_NODE
XML_ENTITY_NODE
XML_PI_NODE
XML_COMMENT_NODE
XML_DOCUMENT_NODE
XML_DOCUMENT_TYPE_NODE
XML_DOCUMENT_FRAG_NODE
XML_NOTATION_NODE
XML_GLOBAL_NAMESPACE
XML_LOCAL_NAMESPACE
This module defines several classes.
The DOM XML function returns a parsed tree of an XML document, where each node is an object belonging to one of these classes.
Constants from this list are always available as part of the PHP kernel.
These functions allow read-only access to data stored in filePro databases.
filePro is a registered trademark of fP Technologies, Inc.
More information about filePro can be found at http://www.fptech.com/.
All of these features cover various aspects of working with features.
Gettext is a function that implements the NLS (Native Language Support) API, which can be used to internationalize your PHP applications.
See the GNU Gettext documentation for a thorough explanation of these features.
These functions allow you to manipulate the output sent back to the browser directly at the HTTP protocol level.
Table 2. iconv constants
Table 4.
Table 5.
The mail () function allows you to send mails.
Example 1. php.ini setting example
Example 2. php.ini setting for EUC-JP users
Example 3. php.ini setting for SJIS users
Example 5. php.ini setting example
Example 6.
Note: "Supported character encoding" does not mean that it works as internal character code.
These functions are designed to work with mhash.
MD5, SHA1, GOST and many others.
To use these features, download the mhash distribution from its web site and follow the installation instructions provided.
You will need to compile PHP with the --with-mhash option to activate this module
Mhash can be used to create checksums, message digests, message authentication codes, and more.
Here is a list of hashes currently supported by mhash.
If a hash is not listed here, but is listed as supported in the mhash documentation, you can safely assume that the documentation is out of date.
Example 1. built into php (unix)
These classes are defined by the extension and will only be available if PHP is compiled with this extension or the extension is loaded dynamically at runtime.
These features have been placed here because they do not fall into any other category.
Table 1. mSQL configuration options
These functions mediate access to the MySQL database server.
More information about MySQL can be found at http://www.mysql.com/.
MySQL documentation is available at http://www.mysql.com/documentation/.
For these features to be available, PHP must be compiled with MySQL support.
For these features to be available, PHP must be compiled with MySQL support --with-mysql.
If you use this parameter without a MySQL path specified, PHP will use the built-in MySQL client library.
Users running other applications using MySQL (eg: running PHP3 and PHP4 as mutual modules in apache or auth-mysql) should always enter the path to MySQL: --with-mysql = / path / to / mysql.
PHP will use the client libraries installed by MySQL, thus avoiding possible conflicts.
The behavior of MySQL functions is affected by the settings in the global configuration file php.ini.
MySQL setup options
Name
Default
Changeable
Here is a brief explanation of the configuration commands.
To allow persistent connections to MySQL.
Maximum number of persistent connections per process.
Maximum number of MySQL connections per process, including persistent connections.
The default TCP port number for connecting to the database server, if no port is specified.
If no default port is specified, the port specified in the MYSQL_TCP_PORT environment variable, the mysql-tcp entry in / etc / services, or the "compile-time" MYSQL_PORT constant is used, respectively.
Win32 uses only the MYSQL_PORT constant.
Default socket name for connecting to the local database server, unless another socket is specified.
Default server for connecting to the database server, unless otherwise specified.
Cannot be used in safe mode.
Default user to connect to the database server, unless another user is specified.
Default password for connecting to the database server, unless another password is specified.
Two types of resources are used in the MySQL module.
The first source is the database connection identifier and the second is the one that executes the query result.
The mysql_fetch_array () function uses constants for different types of result arrays.
The following constants are defined:
MySQL fetch constants
constant
The columns are returned in a field whose keys are the column names.
The columns are returned in a field having both numbered and text keys, which determines the order of the column in the table, or its name.
Returns a column in a field with numeric keys representing the order of the columns in the table.
The first column of the table begins with key 0.
MYSQL_STORE_RESULT
Specifies whether the MySQL result should be buffered.
MYSQL_USE_RESULT
Specifies whether the MySQL result should not be buffered.
Here is a simple example of how to connect, execute a query, display the resulting rows and disconnect from a MySQL database.
Sample example of using MySQL
? php // Connect, select database $ link = mysql_connect ("mysql_host", "mysql_login", "mysql_password") or die ("Unable to connect"); print "Connected successfully!"; mysql_select_db ("my_database") or die ("Unable to select database"); // Preparing SQL query $ query = "SELECT * FROM my_table"; $ result = mysql_query ($ query) or die ("Query cannot be executed"); // Display the result in HTML print "table \ n"; while ($ line = mysql_fetch_array ($ result, MYSQL_ASSOC)) {print "\ t tr \ n"; foreach ($ line as $ col_value) {print "\ t \ t td $ col_value / td \ n";} print "\ t / tr \ n";} print "/ table \ n"; // Disconnect from MySQL database mysql_close ($ link) ;?
Table 2. ncurses color constants
Table 3. ncurses key constants
Table 4. mouse constants
NIS (formerly Yellow Pages) allows network management of important administrative files (eg password files).
For more information, see the NIS man page and Introduction to YP / NIS.
There is also a book Managing NFS and NIS by Hal Stern.
To enable these features, you must configure PHP with --with-yp (PHP 3) or --enable-yp (PHP 4).
Example 3. storage_classes.inc
Example 4. test_aggregation.php
This extension uses OpenSSL functions to create and verify signatures and seal (encode) and open (decode) data.
You need OpenSSL = 0.9.6 to work with this extension.
OpenSSL offers many features that this extension does not currently support.
Some of them may be added in the future.
The Output Control function allows you to control when the script output is sent.
This can be useful in several different situations, especially if you need to send headers to the browser after your script has started sending data.
Output Control functions do not affect headers sent using header () or setcookie (), only functions such as echo () and data between blocks of PHP code.
Output control example
In the example above, the output of echo () is stored in the output buffer until ob_end_flush () is called.
Meanwhile, a call to setcookie () successfully saved the cookie without raising an error. (Normally, you can't send headers to your browser after the data has been sent.)
See also header () and setcookie ().
If you have a PDF library from Thomas Merz (available from http://www.pdflib.com/pdflib/index.html), you can use PDF functions to create PDF files; you will also need a JPEG library and a TIFF library to compile.
Follow the configuration script error messages to resolve any issues.
Provides a very good overview of pdflib capabilities.
The arguments are also identical.
If you want to use this module really effectively, you should also understand some of the concepts of PDF or Postscript.
All dimensions and coordinates are given in Postscript points.
There are generally 72 PostScript dots per inch, but this depends on the output resolution.
There is another PHP module for creating PDF documents, based on ClibPDF from FastIO.
See the ClibPDF function for details.
This PDF module introduces a new type of variable.
It's called pdfdoc. pdfdoc is a pointer to a PDF document and almost all functions require it as their first argument.
Since the very beginning of PDF support in PHP - from pdflib 0.6 - there have been many changes especially in the pdflib API.
Most of these changes were somehow obscured by PHP, some required a change to the PHP API.
Since pdflib 3.x, the API has perhaps stabilized, and PHP 4 has adopted this version as a minimum to support PDF.
As a result, many features will sooner or later disappear or be replaced by alternatives.
Support for pdflib 0.6 has been completely discontinued.
Old feature
Reimbursement
Not necessary.
pdf_get_value () with "font" as the second argument.
pdf_get_value () with "fontsize" as the second argument.
pdf_get_parameter () with "fontname" as the second argument.
pdf_set_info () with "Creator" as the second argument.
pdf_set_info () with "Title" as the second argument.
pdf_set_info () with "Subject" as the second argument.
pdf_set_info () with "Author" as the second argument.
pdf_set_info () with "Keywords" as the second argument.
pdf_set_value () with "leading" as the second argument.
pdf_set_value () with "textrendering" as the second argument.
pdf_set_value () with "textrise" as the second argument.
pdf_set_value () with "horizscaling" as the second argument.
does not exist
pdf_set_value () with "charspacing" as the second argument.
pdf_set_value () with "wordspacing" as the second argument.
pdf_set_parameter () with "transition" as the second argument.
pdf_set_value () with "duration" as the second argument.
pdf_open_image_file () with "gif" as the second argument.
pdf_open_image_file () with "jpeg" as the second argument.
pdf_open_image_file () with "tiff" as the second argument.
pdf_open_image_file () with "png" as the second argument.
pdf_get_imagewidth ()
pdf_get_value () with "imagewidth" as the second argument and image as the third argument.
pdf_get_imageheight ()
pdf_get_value () with "imageheight" as the second argument and image as the third argument.
()
As of pdflib 3.0, pdflib should be configured with the --enable-shared-pdflib option.
If you are using pdflib 2.01, check how this library is installed.
You should have a libpdf.so file or a link to it.
Version 2.01 creates the libpdf2.01.so file, which cannot be found when linking the test file in configure.
You will need to create a symbolic link from libpdf.so to libpdf2.01.so.
Version 2.20 adds further changes to the pdflib API and support for Chinese and Japanese fonts.
If you are using pdflib 2.20, be careful when generating PDF documents in memory.
Until pdflib 3.0, it could be unstable.
This means that instead of e.g.
4 you must use 'winansi'.
If you are using pdflib 2.30, you do not have pdf_set_text_matrix ().
She stopped being supported.
The general advice is to find out any changes to the release notes of the pdflib version used.
As of March 9, 2000, no version of PHP 4 supports podflib older than 3.0.
On the other hand, PHP 3 should not be used with a newer version of pdflib than 2.01.
Most features are quite easy to use.
Probably the hardest part is creating a simple PDF document.
The following example should help get started.
Creates a single-page test.pdf file.
This page contains the text "Times Roman outlined" written in 30 points.
The text is also underlined.
Creating a PDF document with pdflib
? php $ fp = fopen ("test.pdf", "w"); $ pdf = pdf_open ($ fp); pdf_set_info ($ pdf, "Author", "Uwe Steinmann"); pdf_set_info ($ pdf, "Title", "Test for PHP wrapper of PDFlib 2.0"); pdf_set_info ($ pdf, "Creator", "See Author"); pdf_set_info ($ pdf, "Subject", "Testing"); pdf_begin_page ($ pdf, 595, 842); pdf_add_outline ($ pdf, "Page 1"); pdf_set_font ($ pdf, "Times-Roman", 30, "host"); pdf_set_value ($ pdf, "textrendering", 1); pdf_show_xy ($ pdf, "Times Roman outlined", 50, 750); pdf_moveto ($ pdf, 50, 740); pdf_lineto ($ pdf, 330, 740); pdf_stroke ($ pdf); pdf_end_page ($ pdf); pdf_close ($ pdf); fclose ($ fp); echo "A HREF = getpdf.php finished / A" ;?
The getpdf.php script only returns the created pdf document.
? php $ fp = fopen ("test.pdf", "r"); header ("Content-type: application / pdf"); fpassthru ($ fp); fclose ($ fp);
The pdflib distribution contains a larger sample that includes a series of pages with analog clocks.
This example converted to PHP looks like this (see the clibpdf module documentation for the same example):
Example 2. pdfclock sample from pdflib distribution
? php $ pdffilename = "clock.pdf"; $ radius = 200; $ margin = 20; $ pagecount = 40; $ fp = fopen ($ pdffilename, "w"); $ pdf = pdf_open ($ fp); pdf_set_info ($ pdf, "Creator", "pdf_clock.php3"); pdf_set_info ($ pdf, "Author", "Uwe Steinmann"); pdf_set_info ($ pdf, "Title", "Analog Clock"); while ($ pagecount- - 0) {pdf_begin_page ($ pdf, 2 * ($ radius + $ margin), 2 * ($ radius + $ margin)); pdf_set_parameter ($ pdf, "transition", "wipe"); pdf_set_value ($ pdf, "duration", 0.5); pdf_translate ($ pdf, $ radius + $ margin, $ radius + $ margin); pdf_save ($ pdf); pdf_setrgbcolor ($ pdf, 0.0, 0.0, 1.0); / * minute strokes * / pdf_setlinewidth ($ pdf, 2.0); for ($ alpha = 0; $ alpha 360; $ alpha + = 6) {pdf_rotate ($ pdf, 6.0); pdf_moveto ($ pdf, $ radius, 0.0); pdf_lineto ($ pdf, $ radius- $ margin / 3, 0.0); pdf_stroke ($ pdf);} pdf_restore ($ pdf); pdf_save ($ pdf); / * 5 minute strokes * / pdf_setlinewidth ($ pdf, 3.0); for ($ alpha = 0; $ alpha 360; $ alpha + = 30) {pdf_rotate ($ pdf, 30.0); pdf_moveto ($ pdf, $ radius, 0.0); pdf_lineto ($ pdf, $ radius- $ margin, 0.0); pdf_stroke ($ pdf);} $ ltime = getdate (); / * draw hour hand * / pdf_save ($ pdf); pdf_rotate ($ pdf, - (($ ltime ['minutes'] / 60.0) + $ ltime ['hours'] - 3.0) * 30.0); pdf_moveto ($ pdf, - $ radius / 10, - $ radius / 20); pdf_lineto ($ pdf, $ radius / 2, 0.0); pdf_lineto ($ pdf, - $ radius / 10, $ radius / 20); pdf_closepath ($ pdf); pdf_fill ($ pdf); pdf_restore ($ pdf); / * draw minute hand * / pdf_save ($ pdf); pdf_rotate ($ pdf, - (($ ltime ['seconds'] / 60.0) + $ ltime ['minutes'] - 15.0) * 6.0); pdf_moveto ($ pdf, - $ radius / 10, - $ radius / 20); pdf_lineto ($ pdf, $ radius * 0.8, 0.0); pdf_lineto ($ pdf, - $ radius / 10, $ radius / 20); pdf_closepath ($ pdf); pdf_fill ($ pdf); pdf_restore ($ pdf); / * draw second hand * / pdf_setrgbcolor ($ pdf, 1.0, 0.0, 0.0); pdf_setlinewidth ($ pdf, 2); pdf_save ($ pdf); pdf_rotate ($ pdf, - (($ ltime ['seconds'] - 15.0) * 6.0)); pdf_moveto ($ pdf, - $ radius / 5, 0.0); pdf_lineto ($ pdf, $ radius, 0.0); pdf_stroke ($ pdf); pdf_restore ($ pdf); / * draw little circle at center * / pdf_circle ($ pdf, 0, 0, $ radius / 30); pdf_fill ($ pdf); pdf_restore ($ pdf); pdf_end_page ($ pdf);} $ pdf = pdf_close ($ pdf); fclose ($ fp); echo "A HREF = getpdf.php? filename =". $ pdffilename. "finished / A"; - (($ ltime ['seconds'] - 15.0) * 6.0)); pdf_moveto ($ pdf, - $ radius / 5, 0.0); pdf_lineto ($ pdf, $ radius, 0.0); pdf_stroke ($ pdf); pdf_restore ($ pdf); / * draw little circle at center * / pdf_circle ($ pdf, 0, 0, $ radius / 30); pdf_fill ($ pdf); pdf_restore ($ pdf); pdf_end_page ($ pdf);} $ pdf = pdf_close ($ pdf); fclose ($ fp); echo "A HREF = getpdf.php? filename =". $ pdffilename. "finished / A"; - (($ ltime ['seconds'] - 15.0) * 6.0)); pdf_moveto ($ pdf, - $ radius / 5, 0.0); pdf_lineto ($ pdf, $ radius, 0.0); pdf_stroke ($ pdf); pdf_restore ($ pdf); / * draw little circle at center * / pdf_circle ($ pdf, 0, 0, $ radius / 30); pdf_fill ($ pdf); pdf_restore ($ pdf); pdf_end_page ($ pdf);} $ pdf = pdf_close ($ pdf); fclose ($ fp); echo "A HREF = getpdf.php? filename =". $ pdffilename. "finished / A";
The PHP script getpdf.php only returns the created PDF document.
? php $ fp = fopen ($ filename, "r"); header ("Content-type: application / pdf"); fpassthru ($ fp); fclose ($ fp);
This extension allows you to process credit cards and perform other financial transactions using Verisign Payment Services (formerly Signio, http://www.verisign.com/products/payflow/pro/index.html).
These functions are only available if PHP was compiled with --with-pfpro [= DIR].
You will need the SDK for your platform, which can be downloaded from the management interface after registration.
If you downloaded the correct SDK, copy the following files from the lib directory of this distribution: pfpro.h to / usr / local / include and libpfpro.so to / usr / local / lib.
When using these functions, you can skip the calls to pfpro_init () and pfpro_cleanup (), and this extension will do this automatically as needed.
However, these features are still available in case you need to process a large number of transactions and require complete control over this library.
You can perform any number of transactions between pfpro_init () and pfpro_cleanup ().
These features only provide a connection to Verisign Payment Services.
readline () functions implement an interface to the GNU Readline library.
These features provide editable command lines.
An example is the way Bash allows you to enter characters or scroll through the command history using the cursor keys.
Due to the interactive nature of this library, it is not very useful for writing web applications, but it can be useful for writing scripts to run from the command line.
The home page of the GNU Readline project is http: //cnswww.cns.cwru.edu/~chet/readline/rltop.html.
It is maintained by Chet Ramey, who is also the author of Bash.
This module contains an interface to the GNU Recode library, version 3.5.
If you want to use the functions defined in this module, you must compile your PHP interpreter with --with-recode.
To do this, you need to have GNU Recode 3.5 or higher installed on your system.
The GNU Recode library converts files between different character sets and encodings.
When accurate conversion cannot be achieved, it can resort to approximations.
This library recognizes or produces almost 150 different character sets, and is capable of converting files between almost any pair.
It supports most character sets from RFC 1345.
This extension provides semaphore functions using System V semaphores.
Traffic lights can be used to provide exclusive access to resources on a given system, or to limit the number of processes that can use a particular resource at one time.
This extension also provides shared memory functionality using System V shared memory.
Shared material can be used to provide access to global variables.
Various httpd-daemons and even other programs (e.g.
Perl, C, ...) can access this data, creating a global data exchange.
Remember that shared memory is not protected against simultaneous access.
Use traffic lights to sync.
Unix shared memory limitations
max shared memory size, normally 131072 bytes
min. shared memory size, normally 1 byte
max. number of shared memory segments, normally 100
max. number of shared memory segments per process, normally 6
These features do not work on Windows.
Example 1.
Example 2.
Shmop is an easy-to-use set of features that allows PHP to read, write, create, and delete UNIX shared memory segments.
These features do not work on Windows because this system does not support shared memory.
If you want to use shmop, you will need to compile PHP with --enable-shmop.
The names of the functions described in this chapter start in PHP 4.0.3 with shm_ (), but since PHP 4.0.4 their names have changed to shmop_ ().
Overview of shared memory operations
? php // Create a 100 byte shared memory block with system id 0xff3 $ shm_id = shmop_open (0xff3, "c", 0644, 100); if (! $ shm_id) {echo "Failed to create shared memory segment \ n";} // Determine shared memory block size $ shm_size = shmop_size ($ shm_id); echo "SHM block size:". $ shm_size. "was created. \ n"; // Write to the shared memory test string $ shm_bytes_written = shmop_write ($ shm_id, "my shared memory block", 0); if ($ shm_bytes_written! = strlen ("my shared memory block")) {echo "Failed to write complete data \ n";} // Load string back $ my_string = shmop_read ($ shm_id, 0, $ shm_size); if (! $ my_string) {echo "Failed to read from shared memory block \ n";} echo "Data in shared memory was:". $ my_string. "\ n";
There are many wrappers built into PHP by default (See I), and additional, custom wrappers may be added either within a PHP script using stream_register_wrapper (), or directly from an extension using the API Reference in 43.
Custom filters can be defined in a PHP script using stream_register_filter () or in an extension using the API Reference in 43.
See I for a list of PHP builtin wrappers.
Again, see I for a description of targets for builtin streams.
All of these functions work with strings in different ways.
You can find some more specialized features in the Regular Expressions and URL Handling sections.
For information on the behavior of strings, especially when using single quotes, double quotes, and backslash characters, see Strings in the Types section of this manual.
For more information on much more powerful string handling and handler functions, see POSIX Regular Expression Functions and Perl Compatible Regular Expression Functions.
These features are designed to work with WDDX.
If you want to use WDDX, you will need to install the expat library (which is for Apache 1.3.7 and higher) and compile PHP with --with-xml and --enable-wddx.
Note: All functions that serialize variables use the first element of the array to decide whether the array is serialized into an array or structure.
If the first element has a string as an index, it is serialized into a structure, otherwise into an array.
Serialization of a single value
This example creates:
Use of incremental packets
Example 4. xmltest.xml
Example 5. xmltest2.xml
Extensible Stylesheet Language (XSL) Transformations (XSLT) is a language for transforming XML documents into other XML documents.
It is a standard defined by The World Wide Web Consortium (W3C).
Information on XSLT and related technologies is available at http://www.w3.org/tr/slt.
This extension uses Sabloton and expat, which are available at http://www.gingerall.com/, both binaries and source code.
On UNIX, run configure with --with-sablot.
The Sablotron library should be installed somewhere where your compiler can find it.
This PHP extension implements Ginger Alliance's Sablotron support in PHP.
These tools allow you to transform XML documents into other documents, including new XML documents, but also into XML and other target formats.
It basically provides a standardized and portable template system that separates website content and design.
This is a list of PHP reserved words, usually constants and predefined variables.
You will not find any functions here, which does not apply to language constructs.
You should not try to call variables, functions, constants or methods with these names, as this will reliably lead to confusion.
E_PARSE
$ argv
E_ERROR
E_WARNING
$ argc
PHP_OS
$ PHP_SELF
PHP_VERSION
FALSE
$ HTTP_COOKIE_VARS
$ HTTP_GET_VARS
$ HTTP_POST_VARS
stdClass
$ HTTP_POST_FILES
$ this
$ HTTP_ENV_VARS
TRUE
$ HTTP_SERVER_VARS
virtual ()
__sleep
__wakeup
NULL
List of Resource Types
Table H-1.
Chapter 5.
By using open_basedir you can control and restrict what directories are allowed to be used for PHP.
Example 5-5.
Example 5-6.
Example 5-7.
Example 5-8.
Example 5-9.
Example 5-10.
Example 5-11.
Example 5-12.
Example 5-13.
Example 5-1.
Example 5-2 ....
Example 5-3.
Example 5-4.
Example 5-18.
Example 5-19.
Example 5-20.
Example 5-14.
Example 5-15.
Example 5-16.
Example 5-17.
Chapter 43.
Example 43-1. simple stream example that displays the PHP home page
Table 43-1.
Table 43-2.
Table 43-1. php_stream_make_seekable () return values
Example 43-2.
Example 43-3.
Table J-1.
Chapter 2.
Example 2-1.
Example 2-6.
Example 2-7.
Example 2-2.
Example 2-3.
Example 2-4.
Example 2-5.
Annex I.
A set of macros was introduced into Zend's API that simplify access to zval containers (see 42-1).
Table 42-1.
Chapter 32.
To work around this, you have to use a set of API functions to force a type conversion on every argument that 's being passed (see 32-1).
Table 32-1.
32-2 shows the output.
Figure 32-2.
Example 32-2.
For a description of both structures, see 32-2, 32-3 and 32-4.
Table 32-2.
See 32-3 for a description.
For a list of available types, see 32-4.
Table 32-3.
Table 32-4.
Examples are given in 32-3.
Example 32-3.
Figure 32-1.
A very clever implementation of this can be found in the code handling PHP 's fsockopen () located in ext / standard / fsock.c, as shown in 32-1.
Example 32-1.
The default config.m4 shown in 27-1 is a bit more complex:
Example 27-1.
38-1 shows a small demonstration of calling a user function.
Example 38-1.
PHP defines a set of macros that can be used in this process, the most useful of which are described in 41-1.
Table 41-1.
28-1 shows the source.
Example 28-1.
The module shown earlier in 28-1 can be enabled with --enable-first_module or --enable-first_module = yes.
Access to initialization entries can also be handled with the macros shown in 39-1.
Table 39-1.
Chapter 26.
This might sound a bit confusing at first, but it 's not that complicated (see 24-1).
Figure 24-1.
Chapter 25.
As shown in 24-1 above, PHP can be extended primarily at three points: external modules, built-in modules, and the Zend engine.
Chapter 36.
For examples of these functions, see 36-2.
Example 36-2.
36-1 shows a source example and its output.
Example 36-1.
Table 36-1.
Figure 36-1.
These macros automatically set the correspondent type and value, as described in 35-1 and 35-2.
The macros in 35-1 automatically return from your function, those in 35-2 only set the return value; they don't return from your function.
Table 35-1.
Table 35-2.
Chapter 31.
The parameter list of this declaration is very important; you should keep these parameters in mind (see 31-1 for descriptions).
Table 31-1.
Internally, zend_function_entry is defined as shown in 31-1.
Example 31-1.
31-2 shows a list of all the macros that you can use to define functions.
Table 31-2.
You can see the internal definition of this module in 31-2.
Example 31-2.
For reference purposes, you can find a list of the macros involved in declared startup and shutdown functions in 31-3.
Table 31-3.
For a simple test procedure, you can copy it to your htdocs directory and try it with the source in 29-1.
Example 29-1.
Calling this PHP file in your Web browser should give you the output shown in 29-1.
Figure 29-1.
Chapter 33.
33-1, 33-2 and 33-3 33-1, 33-2 and 33-3 describe these functions.
Table 33-1.
Table 33-2.
Table 33-3.
This is done using zend_hash_update () () for associative arrays (see 33-3) and zend_hash_index_update () for indexed arrays (see 33-4):
Example 33-3.
Example 33-4.
To create your own constants, you can use the macros in 33-6.
Table 33-6.
This is somewhat bad practice, but Table 33-5 describes macros that do exactly this task.
Table 33-5.
Example 33-1.
The corresponding type value for longs is IS_LONG (see 33-2).
Example 33-2.
Table 33-4.
